{
    "sourceFile": "src/lib/firebase.functions.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754641844436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754641907718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   UploadTaskSnapshot,\n } from 'firebase/storage'\n import { FileData } from 'firebase/vertexai'\n import { ChangeEvent } from 'react'\n-import { devLog } from '@/lib/utils/devLogger'\n+import { devLog } from '@/utils/devLogger'\n \n export interface FileUploadData extends FileData {\n   name: string\n }\n"
                }
            ],
            "date": 1754641844436,
            "name": "Commit-0",
            "content": "import {\n  deleteObject,\n  getDownloadURL,\n  getMetadata,\n  getStorage,\n  ref,\n  ref as storageRef,\n  uploadBytesResumable,\n  UploadTaskSnapshot,\n} from 'firebase/storage'\nimport { FileData } from 'firebase/vertexai'\nimport { ChangeEvent } from 'react'\nimport { devLog } from '@/lib/utils/devLogger'\n\nexport interface FileUploadData extends FileData {\n  name: string\n}\nexport interface UploadImageOptions {\n  onUpload: (data: FileUploadData) => void\n  progress?: (progress: number) => void\n  deleteUrl?: string\n}\n\nexport function uploadImage(\n  event: ChangeEvent<HTMLInputElement>,\n  { onUpload, progress, deleteUrl }: UploadImageOptions\n) {\n  const files = event.target.files\n  if (!files || files.length == 0) return\n  uploadFile(files[0], {\n    onUpload: (data) => {\n      event.target.value = ''\n      onUpload(data)\n    },\n    progress,\n    deleteUrl,\n  })\n}\n\nexport async function uploadFile(\n  file: File,\n  { onUpload, progress, deleteUrl }: UploadImageOptions\n) {\n  const uploadRef = storageRef(getStorage(), `tmp/${file.name}`)\n  const uploadTask = uploadBytesResumable(uploadRef, file)\n  uploadTask.on(\n    'state_changed',\n    (snapshot: UploadTaskSnapshot) => {\n      const percent = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n      if (progress) progress(percent)\n\n      switch (snapshot.state) {\n        case 'paused':\n          devLog('Upload is paused')\n          break\n        case 'running':\n          devLog('Upload is running')\n          break\n      }\n    },\n    (error) => {\n      console.error('Upload failed:', error)\n    },\n    () => {\n      devLog('Upload complete')\n      getDownloadURL(uploadTask.snapshot.ref).then((downloadURL: string) => {\n        devLog('File available at', downloadURL)\n\n        if (deleteUrl) {\n          devLog('Delete  url', deleteUrl)\n\n          deleteObject(storageRef(getStorage(), deleteUrl))\n            .then(() => {\n              devLog('File deleted successfully')\n            })\n            .catch((error: unknown) => {\n              devLog('Uh-oh, an error occurred!', error)\n            })\n        }\n        onUpload({\n          name: file.name,\n          fileUri: downloadURL,\n          mimeType: file.type,\n        })\n      })\n    }\n  )\n}\n\nexport function deleteImage(\n  url: string,\n  {\n    onSuccess,\n    onError,\n  }: {\n    onSuccess?: (url: string) => void\n    onError?: (url: string) => void\n  } = {}\n) {\n  deleteObject(storageRef(getStorage(), url))\n    .then(() => {\n      devLog('File deleted successfully')\n      if (onSuccess) onSuccess(url)\n    })\n    .catch((error: unknown) => {\n      devLog('Uh-oh, an error occurred!', error)\n      if (onError) onError(url)\n    })\n}\n\nexport async function getMimeType(fileUrl: string): Promise<string | null> {\n  try {\n    const fileRef = ref(getStorage(), fileUrl)\n    const metadata = await getMetadata(fileRef)\n    return metadata.contentType || null\n  } catch (error) {\n    console.error('Error fetching metadata:', error)\n    return null\n  }\n}\n\nexport function uploadFiles(files: File[], options: UploadImageOptions) {\n  if (!files) return\n\n  const allowedMimeTypes = [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'text/plain',\n    'application/x-hwp',\n  ]\n\n  files.forEach((file) => {\n    devLog('Attempting to upload file:', file.name, 'Type:', file.type)\n    if (file && allowedMimeTypes.includes(file.type)) {\n      devLog('Allowed file type, proceeding with upload:', file.name)\n      uploadFile(file, options)\n    } else {\n      console.warn(\n        'Disallowed file type or no file, skipping upload:',\n        file.name,\n        'Type:',\n        file.type\n      )\n    }\n  })\n}\n"
        }
    ]
}