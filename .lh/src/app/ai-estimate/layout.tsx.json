{
    "sourceFile": "src/app/ai-estimate/layout.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754550650396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754553411815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     padding: 0;\n     border-radius: 8px;\n \n     &:hover {\n-      background-color: ${({ theme }) => `${theme.accent}1A`};\n+      background-color: ${({ theme }) => `${theme.body}`};\n     }\n   }\n `;\n \n"
                },
                {
                    "date": 1754553479547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\n import { lightTheme, darkTheme } from '@/styles/theme';\n import Icon from '@/components/ai-esti/Icon';\n import BottomInput from '@/components/ai-esti/BottomInput';\n+import { useRouter } from 'next/navigation'; // useRouter ÌõÖ ÏûÑÌè¨Ìä∏\n \n const GlobalStyle = createGlobalStyle`\n   body {\n     background-color: ${({ theme }) => theme.body};\n@@ -87,8 +88,9 @@\n }\n \n export default function AiEstimateLayout({ children, inputPlaceholder, onInputSubmit }: AiEstimateLayoutProps) {\n   const [themeMode, setThemeMode] = useState('dark');\n+  const router = useRouter(); // useRouter ÌõÖ ÏÇ¨Ïö©\n \n   const toggleTheme = () => {\n     setThemeMode(themeMode === 'light' ? 'dark' : 'light');\n   };\n@@ -103,15 +105,20 @@\n     estimate: isLightTheme ? '/ai-estimate/esti.png' : '/ai-estimate/esti_dark.png',\n     profile: isLightTheme ? '/ai-estimate/profile.png' : '/ai-estimate/profile_dark.png',\n   };\n \n+  const handleBack = () => {\n+    router.back();\n+  };\n+\n   return (\n     <ThemeProvider theme={currentTheme}>\n       <GlobalStyle />\n       <LayoutWrapper>\n         <TopNav>\n           <div className=\"left-icons\">\n-            <span className=\"icon\">\n+            {/* Îí§Î°ú Í∞ÄÍ∏∞ ÏïÑÏù¥ÏΩò Ï∂îÍ∞Ä */}\n+            <span className=\"icon\" onClick={handleBack}>\n               <Icon src={icons.back} width={24} height={24} />\n             </span>\n           </div>\n           <div className=\"right-icons\">\n"
                }
            ],
            "date": 1754550650396,
            "name": "Commit-0",
            "content": "// src/app/ai-estimate/layout.tsx\n\"use client\";\n\nimport React, { useState, ReactNode } from 'react';\nimport styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { lightTheme, darkTheme } from '@/styles/theme';\nimport Icon from '@/components/ai-esti/Icon';\nimport BottomInput from '@/components/ai-esti/BottomInput';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    transition: all 0.25s linear;\n  }\n`;\n\nconst LayoutWrapper = styled.div`\n  padding-top: 0px;\n  padding-bottom: calc(76px + env(safe-area-inset-bottom)); /* Ïù∏Ìíã ÎÜíÏù¥(52px) + Ìå®Îî©(24px) + ÏïàÏ†ÑÏòÅÏó≠ */\n  min-height: 100vh;\n  background-color: ${({ theme }) => theme.body};\n`;\n\nconst TopNav = styled.nav`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 80px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 16px;\n  background-color: ${({ theme }) => theme.body};\n  border-bottom: 1px solid ${({ theme }) => theme.border};\n  z-index: 100;\n  \n\n  .left-icons, .right-icons {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n\n  .icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    padding: 0;\n    border-radius: 8px;\n\n    &:hover {\n      background-color: ${({ theme }) => `${theme.accent}1A`};\n    }\n  }\n`;\n\nconst ThemeToggleButton = styled.button`\n  position: fixed;\n  bottom: 120px;\n  right: 20px;\n  padding: 10px 15px;\n  border-radius: 20px;\n  border: 1px solid ${({ theme }) => theme.border};\n  background-color: ${({ theme }) => theme.surface1};\n  color: ${({ theme }) => theme.text};\n  cursor: pointer;\n  font-weight: bold;\n  z-index: 1000;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\ninterface AiEstimateLayoutProps {\n  children: ReactNode;\n  inputPlaceholder?: string;\n  onInputSubmit?: (value: string) => void;\n}\n\ninterface ChildWithThemeProps {\n  toggleTheme?: () => void;\n  themeMode?: 'light' | 'dark';\n}\n\nexport default function AiEstimateLayout({ children, inputPlaceholder, onInputSubmit }: AiEstimateLayoutProps) {\n  const [themeMode, setThemeMode] = useState('dark');\n\n  const toggleTheme = () => {\n    setThemeMode(themeMode === 'light' ? 'dark' : 'light');\n  };\n  \n  const currentTheme = themeMode === 'light' ? lightTheme : darkTheme;\n\n  const isLightTheme = themeMode === 'light';\n  const icons = {\n    back: '/ai-estimate/arrow_back.png',\n    share: isLightTheme ? '/ai-estimate/share.png' : '/ai-estimate/share_dark.png',\n    new: isLightTheme ? '/ai-estimate/new.png' : '/ai-estimate/new_dark.png',\n    estimate: isLightTheme ? '/ai-estimate/esti.png' : '/ai-estimate/esti_dark.png',\n    profile: isLightTheme ? '/ai-estimate/profile.png' : '/ai-estimate/profile_dark.png',\n  };\n\n  return (\n    <ThemeProvider theme={currentTheme}>\n      <GlobalStyle />\n      <LayoutWrapper>\n        <TopNav>\n          <div className=\"left-icons\">\n            <span className=\"icon\">\n              <Icon src={icons.back} width={24} height={24} />\n            </span>\n          </div>\n          <div className=\"right-icons\">\n             <span className=\"icon\"><Icon src={icons.share} width={36} height={36} /></span>\n             <span className=\"icon\"><Icon src={icons.new} width={36} height={36} /></span>\n             <span className=\"icon\"><Icon src={icons.estimate} width={36} height={36} /></span>\n             <span className=\"icon\"><Icon src={icons.profile} width={36} height={36} /></span>\n          </div>\n        </TopNav>\n        \n        {React.Children.map(children, child => {\n          if (React.isValidElement<ChildWithThemeProps>(child)) {\n            return React.cloneElement(child, { toggleTheme, themeMode: themeMode as 'light' | 'dark' });\n          }\n          return child;\n        })}\n\n        <ThemeToggleButton onClick={toggleTheme}>\n          {themeMode === 'light' ? 'üåô' : '‚òÄÔ∏è'}\n        </ThemeToggleButton>\n        <BottomInput \n          placeholder={inputPlaceholder} \n          onSubmit={onInputSubmit}\n        />\n      </LayoutWrapper>\n    </ThemeProvider>\n  );\n}\n"
        }
    ]
}