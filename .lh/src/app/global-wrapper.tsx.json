{
    "sourceFile": "src/app/global-wrapper.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1755075039444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755075121654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+'use client';\n+\n+import { useEffect, Suspense } from 'react';\n+import { GoogleOAuthProvider } from '@react-oauth/google';\n+import { DeviceProvider } from '@/contexts/DeviceContext';\n+// import { LangProvider } from '@/contexts/LangContext';\n+import { PageLoaderProvider } from '@/contexts/PageLoaderContext';\n+import { GlobalStyle } from '@/styles/globalStyles';\n+// import useAuthStore from '@/store/authStore';\n+import { v4 as uuidv4 } from 'uuid';\n+import { devLog } from '@/lib/utils/devLogger';\n+\n+export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n+  useEffect(() => {\n+    window.scrollTo(0, 0);\n+\n+    // ✅ 비로그인 사용자 uuid(localStorage 저장용)\n+    const logIdKey = 'logId';\n+    const auth = useAuthStore.getState();\n+\n+    // 로그인하지 않은 경우에만 처리\n+    if (!auth.user?.uuid) {\n+      const existing = localStorage.getItem(logIdKey);\n+      if (!existing) {\n+        const newUuid = uuidv4();\n+        localStorage.setItem(logIdKey, newUuid);\n+        devLog('[GlobalWrapper] uuid 생성 및 저장:', newUuid);\n+      } else {\n+        devLog('[GlobalWrapper] 기존 uuid 사용:', existing);\n+      }\n+    }\n+  }, []);\n+\n+  return (\n+    <Suspense fallback={null}>\n+      <GoogleOAuthProvider\n+        clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID || ''}\n+      >\n+        <PageLoaderProvider>\n+          {/* <LangProvider> */}\n+            <DeviceProvider>\n+              <GlobalStyle />\n+              {children}\n+            </DeviceProvider>\n+          {/* </LangProvider> */}\n+        </PageLoaderProvider>\n+      </GoogleOAuthProvider>\n+    </Suspense>\n+  );\n+}\n+\n+export default GlobalWrapper;\n"
                },
                {
                    "date": 1755075199006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,104 +1,53 @@\n-'use client';\n+\"use client\";\n \n-import { useEffect, Suspense } from 'react';\n-import { GoogleOAuthProvider } from '@react-oauth/google';\n-import { DeviceProvider } from '@/contexts/DeviceContext';\n-// import { LangProvider } from '@/contexts/LangContext';\n-import { PageLoaderProvider } from '@/contexts/PageLoaderContext';\n-import { GlobalStyle } from '@/styles/globalStyles';\n-// import useAuthStore from '@/store/authStore';\n-import { v4 as uuidv4 } from 'uuid';\n-import { devLog } from '@/lib/utils/devLogger';\n+import { DeviceProvider } from \"@/contexts/DeviceContext\";\n+import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n+import { SettingsProvider } from \"@/contexts/SettingsContext\";\n+import GlobalStyle from \"@/styles/GlobalStyles\";\n+import { useEffect } from \"react\";\n+import { initImagePreload } from \"@/hooks/useImagePreloader\";\n+import ComponentImagePreloader from \"@/components/ComponentImagePreloader\";\n+import ActivationProvider from \"@/components/ActivationProvider\";\n+import { ToastContainer } from 'react-toastify';\n+import 'react-toastify/dist/ReactToastify.css'; \n+// src/app/providers.tsx\n \n-export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n-  useEffect(() => {\n-    window.scrollTo(0, 0);\n+/**\n+ * GlobalWrapper는 애플리케이션 전역에 필요한 컨텍스트와 스타일을 감싸주는 최상위 Provider 컴포넌트입니다.\n+ * 디바이스 정보, 페이지 로딩 상태, 글로벌 스타일 등을 일괄 적용하는 용도로 사용됩니다.\n+ *\n+ * GlobalWrapper is the top-level provider component that wraps the app with global context and styles.\n+ * It applies device info, page loader state, and global styles across the application.\n+ */\n \n-    // ✅ 비로그인 사용자 uuid(localStorage 저장용)\n-    const logIdKey = 'logId';\n-    const auth = useAuthStore.getState();\n \n-    // 로그인하지 않은 경우에만 처리\n-    if (!auth.user?.uuid) {\n-      const existing = localStorage.getItem(logIdKey);\n-      if (!existing) {\n-        const newUuid = uuidv4();\n-        localStorage.setItem(logIdKey, newUuid);\n-        devLog('[GlobalWrapper] uuid 생성 및 저장:', newUuid);\n-      } else {\n-        devLog('[GlobalWrapper] 기존 uuid 사용:', existing);\n-      }\n-    }\n-  }, []);\n-\n-  return (\n-    <Suspense fallback={null}>\n-      <GoogleOAuthProvider\n-        clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID || ''}\n-      >\n-        <PageLoaderProvider>\n-          {/* <LangProvider> */}\n-            <DeviceProvider>\n-              <GlobalStyle />\n-              {children}\n-            </DeviceProvider>\n-          {/* </LangProvider> */}\n-        </PageLoaderProvider>\n-      </GoogleOAuthProvider>\n-    </Suspense>\n-  );\n-}\n-\n-export default GlobalWrapper;\n-'use client';\n-\n-import { useEffect, Suspense } from 'react';\n-import { GoogleOAuthProvider } from '@react-oauth/google';\n-import { DeviceProvider } from '@/contexts/DeviceContext';\n-// import { LangProvider } from '@/contexts/LangContext';\n-import { PageLoaderProvider } from '@/contexts/PageLoaderContext';\n-import GlobalStyle from '@/styles/GlobalStyles';\n-import useAuthStore from '@/store/authStore';\n-import { v4 as uuidv4 } from 'uuid';\n-import { devLog } from '@/lib/utils/devLogger';\n-\n export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n+  // 앱 시작과 동시에 구성품 이미지들을 preload\n   useEffect(() => {\n-    window.scrollTo(0, 0);\n-\n-    // ✅ 비로그인 사용자 uuid(localStorage 저장용)\n-    const logIdKey = 'logId';\n-    const auth = useAuthStore.getState();\n-\n-    // 로그인하지 않은 경우에만 처리\n-    if (!auth.user?.uuid) {\n-      const existing = localStorage.getItem(logIdKey);\n-      if (!existing) {\n-        const newUuid = uuidv4();\n-        localStorage.setItem(logIdKey, newUuid);\n-        devLog('[GlobalWrapper] uuid 생성 및 저장:', newUuid);\n-      } else {\n-        devLog('[GlobalWrapper] 기존 uuid 사용:', existing);\n-      }\n-    }\n+    initImagePreload();\n   }, []);\n \n   return (\n-    <Suspense fallback={null}>\n-      <GoogleOAuthProvider\n-        clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID || ''}\n-      >\n+    <>\n+      {/* HTML link preload 추가 */}\n+      <ComponentImagePreloader />\n+      <ToastContainer style={{ zIndex: 9999 }} />\n+\n+      {/* react-activation Provider | Keep components alive */}\n+      <ActivationProvider>\n+        {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n         <PageLoaderProvider>\n-          {/* <LangProvider> */}\n+          {/* 설정값 전역 관리 | Global settings management */}\n+          <SettingsProvider>\n+            {/* 반응형 디바이스 정보 전역 제공 | Global device type context */}\n             <DeviceProvider>\n+              {/* 글로벌 스타일 적용 | Apply global base styles */}\n               <GlobalStyle />\n               {children}\n             </DeviceProvider>\n-          {/* </LangProvider> */}\n+          </SettingsProvider>\n         </PageLoaderProvider>\n-      </GoogleOAuthProvider>\n-    </Suspense>\n+      </ActivationProvider>\n+    </>\n   );\n }\n-\n-export default GlobalWrapper;\n"
                },
                {
                    "date": 1755075269561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+\"use client\";\n+\n+import { DeviceProvider } from \"@/contexts/DeviceContext\";\n+import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n+import { SettingsProvider } from \"@/contexts/SettingsContext\";\n+import GlobalStyle from \"@/styles/GlobalStyles\";\n+import { useEffect } from \"react\";\n+import { initImagePreload } from \"@/hooks/useImagePreloader\";\n+import ComponentImagePreloader from \"@/components/ComponentImagePreloader\";\n+import ActivationProvider from \"@/components/ActivationProvider\";\n+import { ToastContainer } from 'react-toastify';\n+import 'react-toastify/dist/ReactToastify.css'; \n+// src/app/providers.tsx\n+\n+/**\n+ * GlobalWrapper는 애플리케이션 전역에 필요한 컨텍스트와 스타일을 감싸주는 최상위 Provider 컴포넌트입니다.\n+ * 디바이스 정보, 페이지 로딩 상태, 글로벌 스타일 등을 일괄 적용하는 용도로 사용됩니다.\n+ *\n+ * GlobalWrapper is the top-level provider component that wraps the app with global context and styles.\n+ * It applies device info, page loader state, and global styles across the application.\n+ */\n+\n+\n+export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n+  // 앱 시작과 동시에 구성품 이미지들을 preload\n+  useEffect(() => {\n+    initImagePreload();\n+  }, []);\n+\n+  return (\n+    <>\n+      {/* HTML link preload 추가 */}\n+      <ComponentImagePreloader />\n+      <ToastContainer style={{ zIndex: 9999 }} />\n+\n+      {/* react-activation Provider | Keep components alive */}\n+      <ActivationProvider>\n+        {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n+        <PageLoaderProvider>\n+          {/* 설정값 전역 관리 | Global settings management */}\n+          <SettingsProvider\n+            {/* 반응형 디바이스 정보 전역 제공 | Global device type context */}\n+            <DeviceProvider>\n+              {/* 글로벌 스타일 적용 | Apply global base styles */}\n+              <GlobalStyle />\n+              {children}\n+            </DeviceProvider>\n+          </SettingsProvider>\n+        </PageLoaderProvider>\n+      </ActivationProvider>\n+    </>\n+  );\n+}\n"
                },
                {
                    "date": 1755075275292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,70 +37,15 @@\n       <ActivationProvider>\n         {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n         <PageLoaderProvider>\n           {/* 설정값 전역 관리 | Global settings management */}\n-          <SettingsProvider\n             {/* 반응형 디바이스 정보 전역 제공 | Global device type context */}\n             <DeviceProvider>\n               {/* 글로벌 스타일 적용 | Apply global base styles */}\n               <GlobalStyle />\n               {children}\n             </DeviceProvider>\n-          </SettingsProvider>\n         </PageLoaderProvider>\n       </ActivationProvider>\n     </>\n   );\n }\n-\"use client\";\n-\n-import { DeviceProvider } from \"@/contexts/DeviceContext\";\n-import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n-import { SettingsProvider } from \"@/contexts/SettingsContext\";\n-import GlobalStyle from \"@/styles/GlobalStyles\";\n-import { useEffect } from \"react\";\n-import { initImagePreload } from \"@/hooks/useImagePreloader\";\n-import ComponentImagePreloader from \"@/components/ComponentImagePreloader\";\n-import ActivationProvider from \"@/components/ActivationProvider\";\n-import { ToastContainer } from 'react-toastify';\n-import 'react-toastify/dist/ReactToastify.css'; \n-// src/app/providers.tsx\n-\n-/**\n- * GlobalWrapper는 애플리케이션 전역에 필요한 컨텍스트와 스타일을 감싸주는 최상위 Provider 컴포넌트입니다.\n- * 디바이스 정보, 페이지 로딩 상태, 글로벌 스타일 등을 일괄 적용하는 용도로 사용됩니다.\n- *\n- * GlobalWrapper is the top-level provider component that wraps the app with global context and styles.\n- * It applies device info, page loader state, and global styles across the application.\n- */\n-\n-\n-export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n-  // 앱 시작과 동시에 구성품 이미지들을 preload\n-  useEffect(() => {\n-    initImagePreload();\n-  }, []);\n-\n-  return (\n-    <>\n-      {/* HTML link preload 추가 */}\n-      <ComponentImagePreloader />\n-      <ToastContainer style={{ zIndex: 9999 }} />\n-\n-      {/* react-activation Provider | Keep components alive */}\n-      <ActivationProvider>\n-        {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n-        <PageLoaderProvider>\n-          {/* 설정값 전역 관리 | Global settings management */}\n-          <SettingsProvider>\n-            {/* 반응형 디바이스 정보 전역 제공 | Global device type context */}\n-            <DeviceProvider>\n-              {/* 글로벌 스타일 적용 | Apply global base styles */}\n-              <GlobalStyle />\n-              {children}\n-            </DeviceProvider>\n-          </SettingsProvider>\n-        </PageLoaderProvider>\n-      </ActivationProvider>\n-    </>\n-  );\n-}\n"
                },
                {
                    "date": 1755075300114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n import { SettingsProvider } from \"@/contexts/SettingsContext\";\n import GlobalStyle from \"@/styles/GlobalStyles\";\n import { useEffect } from \"react\";\n-import { initImagePreload } from \"@/hooks/useImagePreloader\";\n import ComponentImagePreloader from \"@/components/ComponentImagePreloader\";\n import ActivationProvider from \"@/components/ActivationProvider\";\n import { ToastContainer } from 'react-toastify';\n import 'react-toastify/dist/ReactToastify.css'; \n"
                },
                {
                    "date": 1755075313786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n import { SettingsProvider } from \"@/contexts/SettingsContext\";\n import GlobalStyle from \"@/styles/GlobalStyles\";\n import { useEffect } from \"react\";\n+import { initImagePreload } from \"@/hooks/useImagePreloader\";\n import ComponentImagePreloader from \"@/components/ComponentImagePreloader\";\n import ActivationProvider from \"@/components/ActivationProvider\";\n import { ToastContainer } from 'react-toastify';\n import 'react-toastify/dist/ReactToastify.css'; \n"
                },
                {
                    "date": 1755075319328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n \n   return (\n     <>\n       {/* HTML link preload 추가 */}\n-      <ComponentImagePreloader />\n       <ToastContainer style={{ zIndex: 9999 }} />\n \n       {/* react-activation Provider | Keep components alive */}\n       <ActivationProvider>\n"
                },
                {
                    "date": 1755075327089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n \n   return (\n     <>\n       {/* HTML link preload 추가 */}\n+      <ComponentImagePreloader />\n       <ToastContainer style={{ zIndex: 9999 }} />\n \n       {/* react-activation Provider | Keep components alive */}\n       <ActivationProvider>\n"
                },
                {
                    "date": 1755075334941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+\"use client\";\n+\n+import { DeviceProvider } from \"@/contexts/DeviceContext\";\n+import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n+import { SettingsProvider } from \"@/contexts/SettingsContext\";\n+import GlobalStyle from \"@/styles/GlobalStyles\";\n+import { useEffect } from \"react\";\n+import ActivationProvider from \"@/components/ActivationProvider\";\n+import { ToastContainer } from 'react-toastify';\n+import 'react-toastify/dist/ReactToastify.css'; \n+// src/app/providers.tsx\n+\n+/**\n+ * GlobalWrapper는 애플리케이션 전역에 필요한 컨텍스트와 스타일을 감싸주는 최상위 Provider 컴포넌트입니다.\n+ * 디바이스 정보, 페이지 로딩 상태, 글로벌 스타일 등을 일괄 적용하는 용도로 사용됩니다.\n+ *\n+ * GlobalWrapper is the top-level provider component that wraps the app with global context and styles.\n+ * It applies device info, page loader state, and global styles across the application.\n+ */\n+\n+\n+export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n+  // 앱 시작과 동시에 구성품 이미지들을 preload\n+\n+  return (\n+    <>\n+      {/* HTML link preload 추가 */}\n+      <ToastContainer style={{ zIndex: 9999 }} />\n+\n+      {/* react-activation Provider | Keep components alive */}\n+      <ActivationProvider>\n+        {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n+        <PageLoaderProvider>\n+          {/* 설정값 전역 관리 | Global settings management */}\n+            {/* 반응형 디바이스 정보 전역 제공 | Global device type context */}\n+            <DeviceProvider>\n+              {/* 글로벌 스타일 적용 | Apply global base styles */}\n+              <GlobalStyle />\n+              {children}\n+            </DeviceProvider>\n+        </PageLoaderProvider>\n+      </ActivationProvider>\n+    </>\n+  );\n+}\n"
                },
                {
                    "date": 1755075351941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+\"use client\";\n+\n+import { DeviceProvider } from \"@/contexts/DeviceContext\";\n+import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n+import { SettingsProvider } from \"@/contexts/SettingsContext\";\n+import GlobalStyle from \"@/styles/GlobalStyles\";\n+import { useEffect } from \"react\";\n+import ActivationProvider from \"@/components/ActivationProvider\";\n+import { ToastContainer } from 'react-toastify';\n+import 'react-toastify/dist/ReactToastify.css'; \n+// src/app/providers.tsx\n+\n+/**\n+ * GlobalWrapper는 애플리케이션 전역에 필요한 컨텍스트와 스타일을 감싸주는 최상위 Provider 컴포넌트입니다.\n+ * 디바이스 정보, 페이지 로딩 상태, 글로벌 스타일 등을 일괄 적용하는 용도로 사용됩니다.\n+ *\n+ * GlobalWrapper is the top-level provider component that wraps the app with global context and styles.\n+ * It applies device info, page loader state, and global styles across the application.\n+ */\n+\n+\n+export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n+  // 앱 시작과 동시에 구성품 이미지들을 preload\n+\n+  return (\n+    <>\n+      {/* HTML link preload 추가 */}\n+      <ToastContainer style={{ zIndex: 9999 }} />\n+\n+      {/* react-activation Provider | Keep components alive */}\n+      <ActivationProvider>\n+        {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n+        <PageLoaderProvider>\n+            <DeviceProvider>\n+              {/* 글로벌 스타일 적용 | Apply global base styles */}\n+              <GlobalStyle />\n+              {children}\n+            </DeviceProvider>\n+        </PageLoaderProvider>\n+      </ActivationProvider>\n+    </>\n+  );\n+}\n"
                },
                {
                    "date": 1755075380378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n       {/* HTML link preload 추가 */}\n       <ToastContainer style={{ zIndex: 9999 }} />\n \n       {/* react-activation Provider | Keep components alive */}\n-      <ActivationProvider>\n+      {/* <ActivationProvider> */}\n         {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n         <PageLoaderProvider>\n             <DeviceProvider>\n               {/* 글로벌 스타일 적용 | Apply global base styles */}\n"
                },
                {
                    "date": 1755075424212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { DeviceProvider } from \"@/contexts/DeviceContext\";\n import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n import { SettingsProvider } from \"@/contexts/SettingsContext\";\n-import GlobalStyle from \"@/styles/GlobalStyles\";\n+import { GlobalStyle } from \"@/styles/globalStyles\";\n import { useEffect } from \"react\";\n import ActivationProvider from \"@/components/ActivationProvider\";\n import { ToastContainer } from 'react-toastify';\n import 'react-toastify/dist/ReactToastify.css'; \n@@ -36,104 +36,8 @@\n               <GlobalStyle />\n               {children}\n             </DeviceProvider>\n         </PageLoaderProvider>\n-      </ActivationProvider>\n+      {/* </ActivationProvider> */}\n     </>\n   );\n }\n-\"use client\";\n-\n-import { DeviceProvider } from \"@/contexts/DeviceContext\";\n-import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n-import { SettingsProvider } from \"@/contexts/SettingsContext\";\n-import GlobalStyle from \"@/styles/GlobalStyles\";\n-import { useEffect } from \"react\";\n-import ActivationProvider from \"@/components/ActivationProvider\";\n-import { ToastContainer } from 'react-toastify';\n-import 'react-toastify/dist/ReactToastify.css'; \n-// src/app/providers.tsx\n-\n-/**\n- * GlobalWrapper는 애플리케이션 전역에 필요한 컨텍스트와 스타일을 감싸주는 최상위 Provider 컴포넌트입니다.\n- * 디바이스 정보, 페이지 로딩 상태, 글로벌 스타일 등을 일괄 적용하는 용도로 사용됩니다.\n- *\n- * GlobalWrapper is the top-level provider component that wraps the app with global context and styles.\n- * It applies device info, page loader state, and global styles across the application.\n- */\n-\n-\n-export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n-  // 앱 시작과 동시에 구성품 이미지들을 preload\n-\n-  return (\n-    <>\n-      {/* HTML link preload 추가 */}\n-      <ToastContainer style={{ zIndex: 9999 }} />\n-\n-      {/* react-activation Provider | Keep components alive */}\n-      <ActivationProvider>\n-        {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n-        <PageLoaderProvider>\n-          {/* 설정값 전역 관리 | Global settings management */}\n-            {/* 반응형 디바이스 정보 전역 제공 | Global device type context */}\n-            <DeviceProvider>\n-              {/* 글로벌 스타일 적용 | Apply global base styles */}\n-              <GlobalStyle />\n-              {children}\n-            </DeviceProvider>\n-        </PageLoaderProvider>\n-      </ActivationProvider>\n-    </>\n-  );\n-}\n-\"use client\";\n-\n-import { DeviceProvider } from \"@/contexts/DeviceContext\";\n-import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n-import { SettingsProvider } from \"@/contexts/SettingsContext\";\n-import GlobalStyle from \"@/styles/GlobalStyles\";\n-import { useEffect } from \"react\";\n-import { initImagePreload } from \"@/hooks/useImagePreloader\";\n-import ComponentImagePreloader from \"@/components/ComponentImagePreloader\";\n-import ActivationProvider from \"@/components/ActivationProvider\";\n-import { ToastContainer } from 'react-toastify';\n-import 'react-toastify/dist/ReactToastify.css'; \n-// src/app/providers.tsx\n-\n-/**\n- * GlobalWrapper는 애플리케이션 전역에 필요한 컨텍스트와 스타일을 감싸주는 최상위 Provider 컴포넌트입니다.\n- * 디바이스 정보, 페이지 로딩 상태, 글로벌 스타일 등을 일괄 적용하는 용도로 사용됩니다.\n- *\n- * GlobalWrapper is the top-level provider component that wraps the app with global context and styles.\n- * It applies device info, page loader state, and global styles across the application.\n- */\n-\n-\n-export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n-  // 앱 시작과 동시에 구성품 이미지들을 preload\n-  useEffect(() => {\n-    initImagePreload();\n-  }, []);\n-\n-  return (\n-    <>\n-      {/* HTML link preload 추가 */}\n-      <ComponentImagePreloader />\n-      <ToastContainer style={{ zIndex: 9999 }} />\n-\n-      {/* react-activation Provider | Keep components alive */}\n-      <ActivationProvider>\n-        {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n-        <PageLoaderProvider>\n-          {/* 설정값 전역 관리 | Global settings management */}\n-            {/* 반응형 디바이스 정보 전역 제공 | Global device type context */}\n-            <DeviceProvider>\n-              {/* 글로벌 스타일 적용 | Apply global base styles */}\n-              <GlobalStyle />\n-              {children}\n-            </DeviceProvider>\n-        </PageLoaderProvider>\n-      </ActivationProvider>\n-    </>\n-  );\n-}\n"
                },
                {
                    "date": 1755075473936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+\"use client\";\n+\n+import { DeviceProvider } from \"@/contexts/DeviceContext\";\n+import { PageLoaderProvider } from \"@/contexts/PageLoaderContext\";\n+import { SettingsProvider } from \"@/contexts/SettingsContext\";\n+import { GlobalStyle } from \"@/styles/globalStyles\";\n+import { useEffect } from \"react\";\n+import ActivationProvider from \"@/components/ActivationProvider\";\n+import { ToastContainer } from 'react-toastify';\n+import 'react-toastify/dist/ReactToastify.css'; \n+// src/app/providers.tsx\n+\n+/**\n+ * GlobalWrapper는 애플리케이션 전역에 필요한 컨텍스트와 스타일을 감싸주는 최상위 Provider 컴포넌트입니다.\n+ * 디바이스 정보, 페이지 로딩 상태, 글로벌 스타일 등을 일괄 적용하는 용도로 사용됩니다.\n+ *\n+ * GlobalWrapper is the top-level provider component that wraps the app with global context and styles.\n+ * It applies device info, page loader state, and global styles across the application.\n+ */\n+\n+\n+export function GlobalWrapper({ children }: { children: React.ReactNode }) {\n+  // 앱 시작과 동시에 구성품 이미지들을 preload\n+\n+  return (\n+    <>\n+      {/* HTML link preload 추가 */}\n+      <ToastContainer style={{ zIndex: 9999 }} />\n+\n+      {/* react-activation Provider | Keep components alive */}\n+      {/* <ActivationProvider> */}\n+        {/* 페이지 로딩 상태 전역 관리 | Global page loading state */}\n+        <PageLoaderProvider>\n+            <DeviceProvider>\n+              {/* 글로벌 스타일 적용 | Apply global base styles */}\n+              {/* <GlobalStyle /> */}\n+              {children}\n+            </DeviceProvider>\n+        </PageLoaderProvider>\n+      {/* </ActivationProvider> */}\n+    </>\n+  );\n+}\n"
                }
            ],
            "date": 1755075039444,
            "name": "Commit-0",
            "content": "'use client';\n\nimport { useEffect, Suspense } from 'react';\nimport { GoogleOAuthProvider } from '@react-oauth/google';\nimport { DeviceProvider } from '@/contexts/DeviceContext';\n// import { LangProvider } from '@/contexts/LangContext';\nimport { PageLoaderProvider } from '@/contexts/PageLoaderContext';\nimport GlobalStyle from '@/styles/GlobalStyles';\nimport useAuthStore from '@/store/authStore';\nimport { v4 as uuidv4 } from 'uuid';\nimport { devLog } from '@/lib/utils/devLogger';\n\nexport function GlobalWrapper({ children }: { children: React.ReactNode }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    // ✅ 비로그인 사용자 uuid(localStorage 저장용)\n    const logIdKey = 'logId';\n    const auth = useAuthStore.getState();\n\n    // 로그인하지 않은 경우에만 처리\n    if (!auth.user?.uuid) {\n      const existing = localStorage.getItem(logIdKey);\n      if (!existing) {\n        const newUuid = uuidv4();\n        localStorage.setItem(logIdKey, newUuid);\n        devLog('[GlobalWrapper] uuid 생성 및 저장:', newUuid);\n      } else {\n        devLog('[GlobalWrapper] 기존 uuid 사용:', existing);\n      }\n    }\n  }, []);\n\n  return (\n    <Suspense fallback={null}>\n      <GoogleOAuthProvider\n        clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID || ''}\n      >\n        <PageLoaderProvider>\n          {/* <LangProvider> */}\n            <DeviceProvider>\n              <GlobalStyle />\n              {children}\n            </DeviceProvider>\n          {/* </LangProvider> */}\n        </PageLoaderProvider>\n      </GoogleOAuthProvider>\n    </Suspense>\n  );\n}\n\nexport default GlobalWrapper;\n"
        }
    ]
}