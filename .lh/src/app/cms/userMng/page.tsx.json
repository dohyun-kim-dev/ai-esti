{
    "sourceFile": "src/app/cms/userMng/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1755147021137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755147056790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,9 +387,9 @@\n                 setCellphone(input);\n               }\n             }}\n             placeholder=\"- 제외 하고 입력하세요\"\n-            errorMessage={cell-phoneError ?? undefined}\n+            errorMessage={ ?? undefined}\n           />\n           <SwitchInput\n             label=\"이메일 수신\"\n             value={emailYn}\n"
                },
                {
                    "date": 1755147142991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,8 +272,9 @@\n         sortable: true,\n         formatter: (value) =>\n           value ? dayjs(value).format('YYYY-MM-DD HH:mm:ss') : '-',\n       },\n+      \n       {\n         header: '이름',\n         accessor: 'name',\n         formatter: (name, row) => (\n@@ -387,9 +388,9 @@\n                 setCellphone(input);\n               }\n             }}\n             placeholder=\"- 제외 하고 입력하세요\"\n-            errorMessage={ ?? undefined}\n+            errorMessage={cellphoneError ?? undefined}\n           />\n           <SwitchInput\n             label=\"이메일 수신\"\n             value={emailYn}\n"
                },
                {
                    "date": 1755147191340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,19 +272,24 @@\n         sortable: true,\n         formatter: (value) =>\n           value ? dayjs(value).format('YYYY-MM-DD HH:mm:ss') : '-',\n       },\n-      \n       {\n-        header: '이름',\n-        accessor: 'name',\n+        header: '프로필',\n+        accessor: 'profile',\n         formatter: (name, row) => (\n           <ProfileWrapper>\n             <ProfileHeader $imageUrl={row.profileImageUrl} />\n             <span>{name}</span>\n           </ProfileWrapper>\n         ),\n       },\n+      {\n+        header: '이름',\n+        accessor: 'name',\n+        formatter: (value)\n+        ),\n+      },\n       { header: '아이디', accessor: 'adminId' },\n       { header: '이메일', accessor: 'email' },\n       { header: '전화번호', accessor: 'cellphone' },\n       { header: '비고', accessor: 'description' },\n"
                },
                {
                    "date": 1755147199603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,9 +285,8 @@\n       },\n       {\n         header: '이름',\n         accessor: 'name',\n-        formatter: (value)\n         ),\n       },\n       { header: '아이디', accessor: 'adminId' },\n       { header: '이메일', accessor: 'email' },\n"
                },
                {
                    "date": 1755147206142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,9 +284,9 @@\n       },\n       {\n         header: '이름',\n         accessor: 'name',\n-        ,\n+        \n       },\n       { header: '아이디', accessor: 'adminId' },\n       { header: '이메일', accessor: 'email' },\n       { header: '전화번호', accessor: 'cellphone' },\n"
                }
            ],
            "date": 1755147021137,
            "name": "Commit-0",
            "content": "'use client';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport GenericListUI, {\n  FetchParams,\n  FetchResult,\n} from '@/components/CustomList/GenericListUI';\nimport { ColumnDefinition } from '@/components/CustomList/GenericDataTable';\nimport { adminGetList } from '@/lib/api/admin/adminApi';\nimport dayjs from 'dayjs';\nimport styled from 'styled-components';\nimport { THEME_COLORS } from '@/styles/theme_colors';\nimport ActionButton from '@/components/ActionButton';\nimport CmsPopup from '@/components/CmsPopup';\nimport { TextField } from '@/components/TextField';\nimport SelectionField from '@/components/selectionField';\nimport { AppColors } from '@/styles/colors';\nimport { Validators } from '@/lib/utils/validators';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { adminCreate } from '@/lib/api/admin';\nimport Switch from '@/components/Switch';\nimport { SwitchInput } from '@/components/SwitchInput';\nimport { devLog } from '@/lib/utils/devLogger';\nimport CmsResponsiveContainer from '../../../components/CustomList/ResponsiveList/CmsResponsiveContainer';\n\nconst SwitchRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 12px 0;\n`;\n\nconst SwitchLabel = styled.label`\n  font-size: 16px;\n  font-weight: 500;\n  color: black;\n`;\n\nconst ProfileWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst ProfileHeader = styled.div<{ $imageUrl: string | null }>`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  background-size: cover;\n  background-position: center;\n  background-image: url(${({ $imageUrl }) => $imageUrl || '/default-profile.png'});\n  border: 1px solid #ccc;\n  flex-shrink: 0;\n  margin-right: 8px;\n`;\n\ntype User = {\n  adminId: string;\n  name: string;\n  email: string;\n  cellphone: string;\n  lastLoginTime: string | null;\n  createdTime: string | null;\n  emailYn: 'Y' | 'N';\n  smsYn: 'Y' | 'N';\n  profileImageUrl?: string;\n};\n\nconst PopupFooter = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n  margin-top: 24px;\n`;\n\nconst FooterButton = styled.button`\n  width: 120px;\n  height: 48px;\n  border-radius: 6px;\n  font-weight: bold;\n  font-size: 16px;\n  cursor: pointer;\n  border: none;\n`;\n\nconst CancelButton = styled(FooterButton)`\n  background-color: #ffffff;\n  color: ${AppColors.onSurface};\n  border: 1px solid ${AppColors.border};\n`;\n\nconst SaveButton = styled(FooterButton)`\n  background-color: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  gap: 22px;\n  justify-content: space-evenly;\n`;\n\nconst RegisterButton = styled(ActionButton)<{ $themeMode: 'light' | 'dark' }>`\n  background: ${({ $themeMode }) =>\n    $themeMode === 'light'\n      ? THEME_COLORS.light.primary\n      : THEME_COLORS.dark.buttonText};\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? '#f8f8f8' : THEME_COLORS.dark.primary};\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) =>\n      $themeMode === 'light' ? '#e8e8e8' : '#424451'};\n  }\n`;\n\nconst UserMngPage: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<Partial<User> | null>(\n    null\n  );\n\n  const [userId, setUserId] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [cellphone, setCellphone] = useState('');\n  const [emailYn, setEmailYn] = useState<'Y' | 'N'>('Y');\n  const [smsYn, setSmsYn] = useState<'Y' | 'N'>('Y');\n  const [description, setDescription] = useState('');\n\n  const [idError, setIdError] = useState<string | null>(null);\n  const [pwdError, setPwdError] = useState<string | null>(null);\n  const [nameError, setNameError] = useState<string | null>(null);\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [cellphoneError, setCellphoneError] = useState<string | null>(null);\n\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n\n  const listRef = useRef<{ refetch: () => void }>(null);\n\n  const clearFormErrors = useCallback(() => {\n    setIdError(null);\n    setPwdError(null);\n    setNameError(null);\n    setEmailError(null);\n    setCellphoneError(null);\n  }, []);\n\n  const resetForm = useCallback(\n    (initial?: Partial<User>) => {\n      setSelectedUser(initial ?? null);\n      setUserId(initial?.adminId ?? '');\n      setPassword('');\n      setName(initial?.name ?? '');\n      setEmail(initial?.email ?? '');\n      setCellphone(initial?.cellphone ?? '');\n      setEmailYn(initial?.emailYn ?? 'Y');\n      setSmsYn(initial?.smsYn ?? 'Y');\n      clearFormErrors();\n    },\n    [clearFormErrors]\n  );\n\n  const handleHeaderButtonClick = () => {\n    resetForm(); // 신규 등록\n    setIsPopupOpen(true);\n  };\n\n  const handleRowClick = (item: User) => {\n    resetForm(item); // 수정\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  const handleSave = async () => {\n    let valid = true;\n\n    if (!Validators.required(userId) || !Validators.id(userId)) {\n      setIdError('아이디는 영문자와 숫자를 포함한 6~20자여야 합니다.');\n      valid = false;\n    } else setIdError(null);\n\n    if (!Validators.password(password)) {\n      setPwdError(\n        '비밀번호는 영문, 숫자, 특수문자를 포함해 8자 이상이어야 합니다.'\n      );\n      valid = false;\n    } else setPwdError(null);\n\n    if (!Validators.required(name)) {\n      setNameError('이름을 입력해주세요.');\n      valid = false;\n    } else setNameError(null);\n\n    if (!Validators.email(email)) {\n      setEmailError('올바른 이메일 형식이 아닙니다.');\n      valid = false;\n    } else setEmailError(null);\n\n    if (!Validators.phone(cellphone)) {\n      setCellphoneError('연락처는 숫자 11자리여야 합니다.');\n      valid = false;\n    } else setCellphoneError(null);\n\n    if (!valid) return;\n\n    try {\n      const response = await adminCreate({\n        adminId: userId,\n        password,\n        name,\n        cellphone,\n        description,\n        email,\n        emailYn,\n        smsYn,\n      });\n\n      devLog('사용자 등록 응답', response);\n\n      if (response?.[0]?.message === 'success') {\n        toast.success('사용자가 성공적으로 등록되었습니다.');\n        setIsPopupOpen(false);\n        listRef.current?.refetch();\n      } else {\n        const errorMessage =\n          response?.[0]?.error?.customMessage || response?.[0]?.message || '사용자 등록에 실패했습니다.';\n        toast.error(errorMessage);\n      }\n    } catch (error: any) {\n      const errorMessage = error?.customMessage || error?.message || '사용자 등록에 실패했습니다.';\n      toast.error(errorMessage);\n    }\n  };\n\n  const fetchData = useCallback(\n    async (params: FetchParams): Promise<FetchResult<User>> => {\n      const raw = await adminGetList({ keyword: params.keyword ?? '' });\n      const wrapper = raw?.[0];\n      const data = wrapper?.data ?? [];\n      const totalItems = wrapper?.metadata?.totalCnt ?? data.length;\n      const allItems = wrapper?.metadata?.allCnt ?? totalItems;\n      return { data, totalItems, allItems };\n    },\n    []\n  );\n\n  const handleDropdownChange = useCallback(\n    (adminId: string, type: 'emailYn' | 'smsYn', newValue: 'Y' | 'N') => {\n      console.log(`Changed ${type} for ${adminId} to ${newValue}`);\n    },\n    []\n  );\n\n  const columns: ColumnDefinition<User>[] = useMemo(\n    () => [\n      { header: 'No', accessor: 'no' },\n      {\n        header: '가입일',\n        accessor: 'createdTime',\n        sortable: true,\n        formatter: (value) => (value ? dayjs(value).format('YYYY-MM-DD') : '-'),\n      },\n      {\n        header: '최근접속',\n        accessor: 'lastLoginTime',\n        sortable: true,\n        formatter: (value) =>\n          value ? dayjs(value).format('YYYY-MM-DD HH:mm:ss') : '-',\n      },\n      {\n        header: '이름',\n        accessor: 'name',\n        formatter: (name, row) => (\n          <ProfileWrapper>\n            <ProfileHeader $imageUrl={row.profileImageUrl} />\n            <span>{name}</span>\n          </ProfileWrapper>\n        ),\n      },\n      { header: '아이디', accessor: 'adminId' },\n      { header: '이메일', accessor: 'email' },\n      { header: '전화번호', accessor: 'cellphone' },\n      { header: '비고', accessor: 'description' },\n    ],\n    []\n  );\n\n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n        style={{ zIndex: 10000 }}\n      ></ToastContainer>\n      <CmsResponsiveContainer<User>\n        ref={listRef}\n        title=\"고객 회원관리\"\n        excelFileName=\"UserList\"\n        columns={columns}\n        fetchData={() => fetchData({})}\n        enableSearch={true}\n        enableDateFilter={true}\n        searchPlaceholder=\"이름, 이메일, 아이디 검색\"\n        onRowClick={handleRowClick}\n        themeMode=\"light\"\n      />\n\n      <CmsPopup\n        title=\"사용자등록\"\n        isOpen={isPopupOpen}\n        onClose={closePopup}\n        bottomFloating={\n          <PopupFooter>\n            <CancelButton onClick={closePopup}>닫기</CancelButton>\n            <SaveButton onClick={handleSave}>저장</SaveButton>\n          </PopupFooter>\n        }\n      >\n        <FormContainer>\n          <TextField\n            radius=\"0\"\n            value={userId}\n            label=\"* 아이디\"\n            autoComplete=\"off\"\n            $labelPosition=\"horizontal\"\n            labelColor=\"white\"\n            onChange={(e) => setUserId(e.target.value)}\n            placeholder=\"영문자와 숫자를 포함한 6~20자\"\n            errorMessage={idError ?? undefined}\n          />\n          <TextField\n            radius=\"0\"\n            value={password}\n            showSuffixIcon={true}\n            label=\"* 비밀번호\"\n            autoComplete=\"new-password\"\n            $labelPosition=\"horizontal\"\n            labelColor=\"white\"\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"영문 + 숫자 + 특수문자 1개 포함 8자리 이상\"\n            isPasswordField={true}\n            errorMessage={pwdError ?? undefined}\n          />\n          <TextField\n            radius=\"0\"\n            value={name}\n            label=\"* 이름\"\n            $labelPosition=\"horizontal\"\n            labelColor=\"white\"\n            onChange={(e) => setName(e.target.value)}\n            placeholder=\"이름을 입력하세요\"\n            errorMessage={nameError ?? undefined}\n          />\n          <TextField\n            radius=\"0\"\n            value={email}\n            label=\"* 이메일\"\n            $labelPosition=\"horizontal\"\n            labelColor=\"white\"\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"이메일 형식으로 입력하세요\"\n            errorMessage={emailError ?? undefined}\n          />\n          <TextField\n            radius=\"0\"\n            value={cellphone}\n            label=\"* 연락처\"\n            $labelPosition=\"horizontal\"\n            labelColor=\"white\"\n            onChange={(e) => {\n              const input = e.target.value;\n              if (/^\\d*$/.test(input)) {\n                setCellphone(input);\n              }\n            }}\n            placeholder=\"- 제외 하고 입력하세요\"\n            errorMessage={cell-phoneError ?? undefined}\n          />\n          <SwitchInput\n            label=\"이메일 수신\"\n            value={emailYn}\n            onChange={setEmailYn}\n            $labelPosition=\"horizontal\"\n            labelColor=\"white\"\n          />\n          <SwitchInput\n            label=\"SMS 수신\"\n            value={smsYn}\n            onChange={setSmsYn}\n            $labelPosition=\"horizontal\"\n            labelColor=\"white\"\n          />\n          <TextField\n            radius=\"0\"\n            multiline\n            minLines={4}\n            maxLines={10}\n            height=\"200px\"\n            value={description}\n            label=\"비고\"\n            $labelPosition=\"horizontal\"\n            labelColor=\"white\"\n            onChange={(e) => setDescription(e.target.value)}\n            placeholder=\"비고를 입력하세요\"\n          />\n        </FormContainer>\n      </CmsPopup>\n    </>\n  );\n};\n\nexport default UserMngPage;"
        }
    ]
}