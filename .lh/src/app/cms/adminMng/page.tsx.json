{
    "sourceFile": "src/app/cms/adminMng/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1755075669009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755075690872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n   columns={columns}\n   fetchData={() => fetchData({})} // Promise<{ data, totalItems, allItems }>\n   onRowClick={handleRowClick}\n   onAdd={handleHeaderButtonClick} // \"추가\" 버튼 클릭시 동작\n-  addButtonLabel=\"관ㄹ\"\n+  addButtonLabel=\"관리자 등록\"\n   themeMode=\"light\"\n   compactFieldCount={3} // 모바일 compact 모드에서 보여줄 필드 수\n   defaultViewMode=\"detail\" // 모바일 기본 보기 모드\n />\n"
                },
                {
                    "date": 1755075825217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n   columns={columns}\n   fetchData={() => fetchData({})} // Promise<{ data, totalItems, allItems }>\n   onRowClick={handleRowClick}\n   onAdd={handleHeaderButtonClick} // \"추가\" 버튼 클릭시 동작\n-  addButtonLabel=\"관리자 등록\"\n+  \n   themeMode=\"light\"\n   compactFieldCount={3} // 모바일 compact 모드에서 보여줄 필드 수\n   defaultViewMode=\"detail\" // 모바일 기본 보기 모드\n />\n"
                },
                {
                    "date": 1755138412345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n   columns={columns}\n   fetchData={() => fetchData({})} // Promise<{ data, totalItems, allItems }>\n   onRowClick={handleRowClick}\n   onAdd={handleHeaderButtonClick} // \"추가\" 버튼 클릭시 동작\n-  \n+  add\n   themeMode=\"light\"\n   compactFieldCount={3} // 모바일 compact 모드에서 보여줄 필드 수\n   defaultViewMode=\"detail\" // 모바일 기본 보기 모드\n />\n"
                },
                {
                    "date": 1755144372192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,12 +386,14 @@\n   columns={columns}\n   fetchData={() => fetchData({})} // Promise<{ data, totalItems, allItems }>\n   onRowClick={handleRowClick}\n   onAdd={handleHeaderButtonClick} // \"추가\" 버튼 클릭시 동작\n-  add\n+  addButtonLabel='관리자 등록'\n   themeMode=\"light\"\n   compactFieldCount={3} // 모바일 compact 모드에서 보여줄 필드 수\n   defaultViewMode=\"detail\" // 모바일 기본 보기 모드\n+  enableDateFilter={true}\n+  en\n />\n <CmsPopup\n   title=\"관리자등록\"\n   isOpen={isPopupOpen}\n"
                },
                {
                    "date": 1755144411202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -391,9 +391,8 @@\n   themeMode=\"light\"\n   compactFieldCount={3} // 모바일 compact 모드에서 보여줄 필드 수\n   defaultViewMode=\"detail\" // 모바일 기본 보기 모드\n   enableDateFilter={true}\n-  en\n />\n <CmsPopup\n   title=\"관리자등록\"\n   isOpen={isPopupOpen}\n"
                }
            ],
            "date": 1755075669009,
            "name": "Commit-0",
            "content": "'use client';\nimport React, { useCallback, useMemo, useRef, useState } from 'react'; // useRef 추가\n\nimport GenericListUI, {\n  FetchParams,\n  FetchResult,\n} from '@/components/CustomList/GenericListUI';\nimport { ColumnDefinition } from '@/components/CustomList/GenericDataTable';\nimport { adminGetList } from '@/lib/api/admin/adminApi';\nimport dayjs from 'dayjs';\nimport styled from 'styled-components';\nimport { THEME_COLORS } from '@/styles/theme_colors';\nimport ActionButton from '@/components/ActionButton';\nimport CmsPopup from '@/components/CmsPopup';\nimport { TextField } from '@/components/TextField';\nimport SelectionField from '@/components/selectionField';\nimport { AppColors } from '@/styles/colors';\nimport { Validators } from '@/lib/utils/validators';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { adminCreate,adminUpdate } from '@/lib/api/admin';\nimport Switch from '@/components/Switch';\nimport { SwitchInput } from '@/components/SwitchInput';\nimport { devLog } from '@/lib/utils/devLogger';\nimport PasswordPopup from './PasswordPopup';\nimport CmsResponsiveContainer from '../../../components/CustomList/ResponsiveList/CmsResponsiveContainer';\n\nconst SwitchRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: start;\n  /* margin: 12px 0; */\n`;\n\n\n\nconst SwitchLabel = styled.label`\n  font-size: 16px;\n  /* font-weight: 500; */\n  margin-left: 10px;\n  margin-right: 33px;\n  color: white;\n`;\n\ntype AdminUser = {\n  adminId: string;\n  name: string;\n  email: string;\n  cellphone: string;\n  lastLoginTime: string | null;\n  createdTime: string | null;\n  emailYn: 'Y' | 'N';\n  smsYn: 'Y' | 'N';\n  description: string;\n};\n\nconst PopupFooter = styled.div`\n  display: flex;\n  justify-content: space-between; /* 좌우로 분리 */\n  align-items: center;\n  width: 100%;\n  gap: 12px;\n`;\n\n\nconst FooterButton = styled.button`\n  width: 120px;\n  height: 48px;\n  border-radius: 6px;\n  font-weight: bold;\n  font-size: 16px;\n  cursor: pointer;\n  border: none;\n`;\n\nconst CancelButton = styled(FooterButton)`\n  background-color: #ffffff;\n  color: ${AppColors.onSurface};\n  border: 1px solid ${AppColors.border};\n`;\n\nconst SaveButton = styled(FooterButton)`\n  background-color: ${AppColors.primary};\n  border: 1px solid ${AppColors.border};\n  color: ${AppColors.onPrimary};\n`;\n\n\nconst PwdChangeButton = styled(FooterButton)`\n  background-color: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n  border: 1px solid ${AppColors.border};\n  height: 48px;\n  width: 160px !important; /* !important를 추가하여 강제로 덮어쓰기 */\n`;\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  gap: 22px;\n  justify-content: space-evenly;\n`;\n\nconst RegisterButton = styled(ActionButton)<{ $themeMode: 'light' | 'dark' }>`\n  background: ${({ $themeMode }) =>\n    $themeMode === 'light'\n      ? THEME_COLORS.light.primary\n      : THEME_COLORS.dark.buttonText};\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? '#f8f8f8' : THEME_COLORS.dark.primary};\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) =>\n      $themeMode === 'light' ? '#e8e8e8' : '#424451'};\n  }\n`;\n\nconst AdminMngPage: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<Partial<AdminUser> | null>(\n    null\n  );\n\n  const [userId, setUserId] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [cellphone, setCellphone] = useState('');\n  const [emailYn, setEmailYn] = useState<'Y' | 'N'>('Y');\n  const [smsYn, setSmsYn] = useState<'Y' | 'N'>('Y');\n  const [description, setDescription] = useState('');\n\n  const [idError, setIdError] = useState<string | null>(null);\n  const [pwdError, setPwdError] = useState<string | null>(null);\n  const [confirmPwdError, setConfirmPwdError] = useState<string | null>(null);\n  const [nameError, setNameError] = useState<string | null>(null);\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [cellphoneError, setCellphoneError] = useState<string | null>(null);\n\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [isPwdChangeOpen, setIsPwdChangeOpen] = useState(false);\n\n\n  const listRef = useRef<{ refetch: () => void }>(null);\n\n  const clearFormErrors = useCallback(() => {\n    setIdError(null);\n    setPwdError(null);\n    setNameError(null);\n    setEmailError(null);\n    setCellphoneError(null);\n  }, []);\n\n  const resetForm = useCallback(\n    (initial?: Partial<AdminUser>) => {\n      setSelectedUser(initial ?? null);\n      setUserId(initial?.adminId ?? '');\n      setPassword('');\n      setName(initial?.name ?? '');\n      setEmail(initial?.email ?? '');\n      setCellphone(initial?.cellphone ?? '');\n      setEmailYn(initial?.emailYn ?? 'Y');\n      setSmsYn(initial?.smsYn ?? 'Y');\n      setDescription(initial?.description ?? '');\n      clearFormErrors();\n    },\n    [clearFormErrors]\n  );\n\n  const handleHeaderButtonClick = () => {\n    resetForm(); // 신규 등록\n    setIsPopupOpen(true);\n  };\n\n  const handleRowClick = (item: AdminUser) => {\n    resetForm(item); // 수정\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  const handleSave = async () => {\n    let valid = true;\n  \n    if (!Validators.required(userId) || !Validators.id(userId)) {\n      setIdError('아이디는 영문자와 숫자를 포함한 6~20자여야 합니다.');\n      valid = false;\n    } else setIdError(null);\n  \n    if (!selectedUser && !Validators.password(password)) {\n      setPwdError('비밀번호는 영문, 숫자, 특수문자를 포함해 8자 이상이어야 합니다.');\n      valid = false;\n    } else setPwdError(null);\n\n    if (!selectedUser && password !== confirmPassword) {\n      setConfirmPwdError('비밀번호가 일치하지 않습니다.');\n      valid = false;\n    } else setConfirmPwdError(null);\n  \n    if (!Validators.required(name)) {\n      setNameError('이름을 입력해주세요.');\n      valid = false;\n    } else setNameError(null);\n  \n    if (!Validators.email(email)) {\n      setEmailError('올바른 이메일 형식이 아닙니다.');\n      valid = false;\n    } else setEmailError(null);\n  \n    if (!Validators.phone(cellphone)) {\n      setCellphoneError('연락처는 숫자 11자리여야 합니다.');\n      valid = false;\n    } else setCellphoneError(null);\n  \n    if (!valid) return;\n  \n    try {\n      if (selectedUser) {\n        const updatePayload = {\n          targetAdminId: userId,\n          name,\n          cellphone,\n          description,\n          email,\n          emailYn,\n          smsYn,\n        };\n  \n        const response = await adminUpdate(updatePayload);\n        if (response?.[0]?.message === 'success') {\n          toast.success('관리자 정보가 수정되었습니다.');\n          setIsPopupOpen(false);\n          listRef.current?.refetch();\n        } else {\n          const errorMessage =\n            response?.[0]?.error?.customMessage || response?.[0]?.message || '수정에 실패했습니다.';\n          toast.error(errorMessage);\n        }\n      } else {\n        const createPayload = {\n          adminId: userId,\n          password,\n          name,\n          cellphone,\n          description,\n          email,\n          emailYn,\n          smsYn,\n        };\n  \n        const response = await adminCreate(createPayload);\n        if (response?.[0]?.message === 'success') {\n          toast.success('관리자가 성공적으로 등록되었습니다.');\n          setIsPopupOpen(false);\n          listRef.current?.refetch();\n        } else {\n          const errorMessage =\n            response?.[0]?.error?.customMessage || response?.[0]?.message || '등록에 실패했습니다.';\n          toast.error(errorMessage);\n        }\n      }\n    } catch (error: any) {\n      const errorMessage = error?.customMessage || error?.message || '처리에 실패했습니다.';\n      toast.error(errorMessage);\n    }\n  };\n  \n  \n\n  const fetchData = useCallback(\n    async (params: FetchParams): Promise<FetchResult<AdminUser>> => {\n      const raw = await adminGetList({ keyword: params.keyword || '' });\n      const wrapper = raw?.[0];\n      const data = wrapper?.data ?? [];\n      const totalItems = wrapper?.metadata?.totalCnt ?? data.length;\n      const allItems = wrapper?.metadata?.allCnt ?? totalItems;\n      return { data, totalItems, allItems };\n    },\n    []\n  );\n\n  const handleDropdownChange = useCallback(\n    async (adminId: string, type: 'emailYn' | 'smsYn', newValue: 'Y' | 'N') => {\n      try {\n\n        console.log('handleDropdownChange', adminId, type, newValue);\n\n        const response = await adminUpdate({\n          targetAdminId: adminId,       [type]: newValue,\n        } as any); // 강제로 캐스팅 (type-safe 방식은 별도 타입 유틸 필요)\n  \n        const isSuccess = response?.[0]?.message === 'success';\n        if (isSuccess) {\n          toast.success(`${type === 'emailYn' ? '메일' : 'SMS'} 수신 설정이 변경되었습니다.`);\n          listRef.current?.refetch();\n        } else {\n          toast.error('변경에 실패했습니다.');\n        }\n      } catch (error: any) {\n        toast.error(error?.message || '변경에 실패했습니다.');\n      }\n    },\n    []\n  );\n  \n\n  const columns: ColumnDefinition<AdminUser>[] = useMemo(\n    () => [\n      { header: 'No', accessor: 'no' },\n      {\n        header: '가입일',\n        accessor: 'createdTime',\n        sortable: true,\n        formatter: (value) => (value ? dayjs(value).format('YYYY-MM-DD') : '-'),\n      },\n      {\n        header: '최근접속',\n        accessor: 'lastLoginTime',\n        sortable: true,\n        formatter: (value) =>\n          value ? dayjs(value).format('YYYY-MM-DD HH:mm:ss') : '-',\n      },\n      { header: '이름', accessor: 'name' },\n      { header: '아이디', accessor: 'adminId' },\n      { header: '이메일', accessor: 'email' },\n      { header: '전화번호', accessor: 'cellphone' },\n      {\n        header: 'SMS 수신',\n        accessor: 'smsYn',\n        noPopup: true,\n        formatter: (_value, row) => (\n          <Switch\n            checked={row.smsYn === 'Y'}\n            onToggle={() =>\n              handleDropdownChange(\n                row.adminId,\n                'smsYn',\n                row.smsYn === 'Y' ? 'N' : 'Y'\n              )\n            }\n          />\n        ),\n      },\n      {\n        header: '메일 수신',\n        accessor: 'emailYn',\n        noPopup: true,\n        formatter: (_value, row) => (\n          <Switch\n            checked={row.emailYn === 'Y'}\n            onToggle={() =>\n              handleDropdownChange(\n                row.adminId,\n                'emailYn',\n                row.emailYn === 'Y' ? 'N' : 'Y'\n              )\n            }\n          />\n        ),\n      },\n      { header: '비고', accessor: 'description' },\n    ],\n    [handleDropdownChange]\n  );\n\n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n        style={{ zIndex: 10000 }}\n      ></ToastContainer>\n\n    <CmsResponsiveContainer<AdminUser>\n  title=\"관리자 회원관리\"\n  data={[]} // 초기값, fetchData가 있으면 무시됨\n  columns={columns}\n  fetchData={() => fetchData({})} // Promise<{ data, totalItems, allItems }>\n  onRowClick={handleRowClick}\n  onAdd={handleHeaderButtonClick} // \"추가\" 버튼 클릭시 동작\n  addButtonLabel=\"관ㄹ\"\n  themeMode=\"light\"\n  compactFieldCount={3} // 모바일 compact 모드에서 보여줄 필드 수\n  defaultViewMode=\"detail\" // 모바일 기본 보기 모드\n/>\n<CmsPopup\n  title=\"관리자등록\"\n  isOpen={isPopupOpen}\n  onClose={closePopup}\n  isWide={false}\n  showRequiredMark={true}\n  bottomFloating={\n<PopupFooter>\n  {/* 왼쪽 영역: 삭제 버튼 */}\n  {selectedUser ? (\n    <CancelButton\n      style={{ backgroundColor: 'eeeeee', color: '#333333' }}\n      onClick={() => toast.info('삭제 기능은 추후 구현 예정입니다.')}\n    >\n      삭제\n    </CancelButton>\n  ) : (\n    <div /> // 빈 영역 유지\n  )}\n\n  {/* 오른쪽 영역: 저장/닫기 */}\n  <div style={{ display: 'flex', gap: '12px' }}>\n    <SaveButton onClick={handleSave}>저장</SaveButton>\n    <CancelButton onClick={closePopup}>닫기</CancelButton>\n  </div>\n</PopupFooter>\n\n  }\n  \n>\n  <FormContainer>\n  <TextField\n  radius=\"0\"\n  value={userId}\n  label=\"* 아이디\"\n  autoComplete=\"off\"\n  $labelPosition=\"horizontal\"\n  labelColor=\"white\"\n  onChange={(e) => setUserId(e.target.value)}\n  placeholder=\"영문자와 숫자를 포함한 6~20자\"\n  errorMessage={idError ?? undefined}\n  readOnly={!!selectedUser} // ✅ 조건부 readOnly\n/>\n\n  {/* 신규 등록 시: 아이디 아래에 비밀번호 입력 */}\n  {!selectedUser && (\n    <TextField\n      radius=\"0\"\n      value={password}\n      showSuffixIcon={true}\n      label=\"* 비밀번호\"\n      autoComplete=\"new-password\"\n      $labelPosition=\"horizontal\"\n      labelColor=\"white\"\n      onChange={(e) => setPassword(e.target.value)}\n      placeholder=\"영문 + 숫자 + 특수문자 1개 포함 8자리 이상\"\n      isPasswordField={true}\n      errorMessage={pwdError ?? undefined}\n    />\n  )}\n  {/* // 비밀번호 확인 필드 */}\n  {!selectedUser && (\n    <TextField\n      radius=\"0\"\n      value={confirmPassword}\n      showSuffixIcon={true}\n      label=\"* 비밀번호 확인\"\n      autoComplete=\"new-password\"\n      $labelPosition=\"horizontal\"\n      labelColor=\"white\"\n      onChange={(e) => setConfirmPassword(e.target.value)}\n      placeholder=\"영문 + 숫자 + 특수문자 1개 포함 8자리 이상\"\n      isPasswordField={true}\n      errorMessage={confirmPwdError ?? undefined}\n    />\n  )}\n\n\n    <TextField\n      radius=\"0\"\n      value={name}\n      label=\"* 이름\"\n      $labelPosition=\"horizontal\"\n      labelColor=\"white\"\n      onChange={(e) => setName(e.target.value)}\n      placeholder=\"이름을 입력하세요\"\n      errorMessage={nameError ?? undefined}\n    />\n    <TextField\n      radius=\"0\"\n      value={email}\n      label=\"* 이메일\"\n      $labelPosition=\"horizontal\"\n      labelColor=\"white\"\n      onChange={(e) => setEmail(e.target.value)}\n      placeholder=\"이메일 형식으로 입력하세요\"\n      errorMessage={emailError ?? undefined}\n    />\n    <TextField\n      radius=\"0\"\n      value={cellphone}\n      label=\"* 연락처\"\n      $labelPosition=\"horizontal\"\n      labelColor=\"white\"\n      onChange={(e) => {\n        const input = e.target.value;\n        if (/^\\d*$/.test(input)) {\n          setCellphone(input);\n        }\n      }}\n      placeholder=\"- 제외 하고 입력하세요\"\n      errorMessage={cellphoneError ?? undefined}\n    />\n\n\n  {/* 수정 모드일 때: 이메일 수신 Switch 위에 비밀번호 변경 버튼 */}\n  {selectedUser && (\n    <SwitchRow>\n      <SwitchLabel>비밀번호 변경</SwitchLabel>\n      <PwdChangeButton\n  style={{ width: 'auto', padding: '0 16px', fontSize: '14px' }}\n  onClick={() => setIsPwdChangeOpen(true)}\n>\n  비밀번호 변경\n</PwdChangeButton>\n\n    </SwitchRow>\n  )}\n\n\n    <SwitchInput\n      label=\"이메일 수신\"\n      value={emailYn}\n      onChange={setEmailYn}\n      $labelPosition=\"horizontal\"\n      labelColor=\"white\"\n    />\n\n    <SwitchInput\n      label=\"SMS 수신\"\n      value={smsYn}\n      onChange={setSmsYn}\n      $labelPosition=\"horizontal\"\n      labelColor=\"white\"\n    />\n\n    <TextField\n      radius=\"0\"\n      multiline\n      minLines={4}\n      maxLines={10}\n      height=\"200px\"\n      value={description}\n      label=\"비고\"\n      $labelPosition=\"horizontal\"\n      labelColor=\"white\"\n      onChange={(e) => setDescription(e.target.value)}\n      placeholder=\"비고를 입력하세요\"\n    />\n  </FormContainer>\n</CmsPopup>\n\n<PasswordPopup\n  adminId={userId}\n  isOpen={isPwdChangeOpen}\n  onClose={() => setIsPwdChangeOpen(false)}\n/>\n\n\n    </>\n  );\n};\n\nexport default AdminMngPage;\n"
        }
    ]
}