{
    "sourceFile": "src/app/cms/userData/price/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755163128722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755163128722,
            "name": "Commit-0",
            "content": "// src/app/cms/userData/priceList/page.tsx\n\n'use client';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport CmsResponsiveContainer from '@/components/CustomList/ResponsiveList/CmsResponsiveContainer';\nimport { ColumnDefinition } from '@/components/CustomList/GenericDataTable';\nimport { FetchParams, FetchResult } from '@/components/CustomList/GenericListUI';\nimport dayjs from 'dayjs';\nimport styled from 'styled-components';\nimport CmsPopup from '@/components/CmsPopup';\n\ntype PriceList = {\n  no: number;\n  select: boolean;\n  code: string;\n  category_name: string;\n  sub_category_name: string;\n  function_name: string;\n  description: string;\n  memo: string;\n  frontend_period: number;\n  backend_period: number;\n  price: number;\n  createdTime: string | null;\n  updateTime: string | null;\n  createdId: string;\n  updateId: string;\n};\n\n// 팝업 관련 스타일은 재사용 가능하므로 필요에 따라 추가\nconst StyledPopupContent = styled.div`\n  padding: 20px;\n  h3 {\n    margin-top: 0;\n  }\n`;\n\nconst PriceListPage: React.FC = () => {\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<Partial<PriceList> | null>(null);\n  const listRef = useRef<{ refetch: () => void }>(null);\n\n  const handleRowClick = (item: PriceList) => {\n    setSelectedItem(item);\n    setIsPopupOpen(true);\n  };\n  \n  const closePopup = () => {\n    setIsPopupOpen(false);\n    setSelectedItem(null);\n  };\n\n  const fetchData = useCallback(\n    async (params: FetchParams): Promise<FetchResult<PriceList>> => {\n      console.log('Mock Data fetching for PriceList...', params);\n      const mockData: PriceList[] = [\n        {\n          no: 1, select: false, code: 'C1', category_name: 'COMMON', sub_category_name: '화면설계', function_name: '기능1', description: '기능에 대한 상세 설명', memo: '잠재고객/지속적인 연락 필요', frontend_period: 0.2, backend_period: 0.2, price: 500000, createdTime: '2025-05-21T11:31:12Z', updateTime: '2025-05-21T11:31:12Z', createdId: '작성자1', updateId: '작성자1',\n        },\n        {\n          no: 2, select: false, code: 'C2', category_name: 'COMMON', sub_category_name: '기획', function_name: '기능2', description: '새로운 기능 설명', memo: '', frontend_period: 0.3, backend_period: 0.1, price: 350000, createdTime: '2025-05-22T14:00:00Z', updateTime: '2025-05-22T14:00:00Z', createdId: '작성자2', updateId: '작성자2',\n        },\n        // 여기에 더 많은 목 데이터를 추가할 수 있습니다.\n      ];\n\n      const filteredData = params.keyword\n        ? mockData.filter(item =>\n            item.function_name.includes(params.keyword as string) ||\n            item.description.includes(params.keyword as string) ||\n            item.category_name.includes(params.keyword as string)\n          )\n        : mockData;\n\n      return {\n        data: filteredData,\n        totalItems: filteredData.length,\n        allItems: mockData.length,\n      };\n    },\n    []\n  );\n\n  const columns: ColumnDefinition<PriceList>[] = useMemo(\n    () => [\n      { header: '선택', accessor: 'select', formatter: () => <input type=\"checkbox\" /> },\n      { header: 'No', accessor: 'no', sortable: true },\n      { header: '코드', accessor: 'code', sortable: true },\n      { header: '항목', accessor: 'category_name', sortable: true },\n      { header: '카테고리', accessor: 'sub_category_name', sortable: true },\n      { header: '기능명', accessor: 'function_name', sortable: true },\n      { header: '설명', accessor: 'description', sortable: true },\n      { header: '메모', accessor: 'memo', sortable: true },\n      { header: '프론트 기간', accessor: 'frontend_period' },\n      { header: '백엔드 기간', accessor: 'backend_period' },\n      { header: '금액', accessor: 'price', formatter: (value) => value.toLocaleString() },\n      { header: '작성일자', accessor: 'createdTime', formatter: (value) => dayjs(value).format('YYYY-MM-DD HH:mm:ss') },\n      { header: '수정일자', accessor: 'updateTime', formatter: (value) => dayjs(value).format('YYYY-MM-DD HH:mm:ss') },\n      { header: '작성id', accessor: 'createdId' },\n      { header: '작성자', accessor: 'updateId' },\n    ],\n    []\n  );\n\n  return (\n    <>\n      <CmsResponsiveContainer<PriceList>\n        ref={listRef}\n        title=\"단가표 관리\"\n        excelFileName=\"PriceList\"\n        columns={columns}\n        fetchData={fetchData}\n        enableSearch\n        enableDateFilter={false} // 날짜 필터 제외\n        searchPlaceholder=\"기능명, 설명, 항목 검색\"\n        onRowClick={handleRowClick}\n        themeMode=\"light\"\n      />\n      <CmsPopup title=\"단가표 상세\" isOpen={isPopupOpen} onClose={closePopup}>\n        <StyledPopupContent>\n          {selectedItem && (\n            <>\n              <h3>{selectedItem.function_name} ({selectedItem.code})</h3>\n              <p>설명: {selectedItem.description}</p>\n              <p>금액: {selectedItem.price?.toLocaleString()}원</p>\n            </>\n          )}\n        </StyledPopupContent>\n      </CmsPopup>\n    </>\n  );\n};\n\nexport default PriceListPage;"
        }
    ]
}