{
    "sourceFile": "src/app/ai/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1754641844436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754643303927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\"\n \n import React, { useState } from 'react'\n import styled from 'styled-components'\n-import { callApiPost } from '@/lib/api'\n+import useAI from '@/hooks/useAI'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -30,8 +30,23 @@\n   max-width: 80%;\n   white-space: pre-wrap;\n `\n \n+const Controls = styled.div`\n+  display: flex;\n+  gap: 8px;\n+  margin-bottom: 12px;\n+`\n+\n+const Select = styled.select`\n+  height: 36px;\n+  border: 1px solid ${({ theme }) => theme.border};\n+  background: ${({ theme }) => theme.body};\n+  color: ${({ theme }) => theme.text};\n+  border-radius: 8px;\n+  padding: 0 8px;\n+`\n+\n const InputRow = styled.form`\n   margin-top: 12px;\n   display: flex;\n   gap: 8px;\n@@ -46,9 +61,9 @@\n   color: ${({ theme }) => theme.text};\n   padding: 0 12px;\n `\n \n-const SendButton = styled.button`\n+const Button = styled.button`\n   height: 44px;\n   padding: 0 16px;\n   background: ${({ theme }) => theme.accent};\n   color: ${({ theme }) => theme.body};\n@@ -56,8 +71,9 @@\n   font-weight: 600;\n `\n \n export default function AiChatPage() {\n+  const { modelName, setModelName, generate, sendChat, resetChat } = useAI('gemini-2.5-flash')\n   const [messages, setMessages] = useState<{ role: 'user' | 'ai'; content: string }[]>([])\n   const [input, setInput] = useState('')\n \n   const onSend = async (e: React.FormEvent) => {\n@@ -66,31 +82,38 @@\n     const next = [...messages, { role: 'user', content: input }]\n     setMessages(next)\n     setInput('')\n \n-    // API 호출 (예시)\n-    const host = process.env.NEXT_PUBLIC_API_HOST\n-    const data = await callApiPost<{ reply?: string }>({\n-      title: 'AI Chat',\n-      url: `${host}/ai/chat`,\n-      body: { messages: next },\n-      isCallPageLoader: true,\n-    })\n+    const reply = await sendChat(input)\n+    setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n+  }\n \n-    setMessages((prev) => [...prev, { role: 'ai', content: data?.reply || '응답을 불러오지 못했습니다.' }])\n+  const onQuickGenerate = async () => {\n+    const reply = await generate('간단 인사 한 줄만 해줘')\n+    setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n   }\n \n   return (\n     <Container>\n       <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n+      <Controls>\n+        <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n+          <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n+          <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n+          <option value=\"gemini-1.5-flash\">gemini-1.5-flash</option>\n+        </Select>\n+        <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n+        <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 초기화</Button>\n+      </Controls>\n+\n       <ChatBox>\n         {messages.map((m, idx) => (\n           <Message key={idx} $role={m.role}>{m.content}</Message>\n         ))}\n       </ChatBox>\n       <InputRow onSubmit={onSend}>\n         <TextInput value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"메시지를 입력하세요\" />\n-        <SendButton type=\"submit\">전송</SendButton>\n+        <Button type=\"submit\">전송</Button>\n       </InputRow>\n     </Container>\n   )\n }\n"
                },
                {
                    "date": 1754878815898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n \"use client\"\n \n import React, { useState } from 'react'\n import styled from 'styled-components'\n-import useAI from '@/hooks/useAI'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -36,17 +35,8 @@\n   gap: 8px;\n   margin-bottom: 12px;\n `\n \n-const Select = styled.select`\n-  height: 36px;\n-  border: 1px solid ${({ theme }) => theme.border};\n-  background: ${({ theme }) => theme.body};\n-  color: ${({ theme }) => theme.text};\n-  border-radius: 8px;\n-  padding: 0 8px;\n-`\n-\n const InputRow = styled.form`\n   margin-top: 12px;\n   display: flex;\n   gap: 8px;\n@@ -71,9 +61,8 @@\n   font-weight: 600;\n `\n \n export default function AiChatPage() {\n-  const { modelName, setModelName, generate, sendChat, resetChat } = useAI('gemini-2.5-flash')\n   const [messages, setMessages] = useState<{ role: 'user' | 'ai'; content: string }[]>([])\n   const [input, setInput] = useState('')\n \n   const onSend = async (e: React.FormEvent) => {\n@@ -82,28 +71,32 @@\n     const next = [...messages, { role: 'user', content: input }]\n     setMessages(next)\n     setInput('')\n \n-    const reply = await sendChat(input)\n-    setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n+    const res = await fetch('/api/ai/chat', {\n+      method: 'POST',\n+      headers: { 'Content-Type': 'application/json' },\n+      body: JSON.stringify({ messages: next }),\n+    })\n+    const data = await res.json()\n+    setMessages((prev) => [...prev, { role: 'ai', content: data?.reply || '응답을 불러오지 못했습니다.' }])\n   }\n \n   const onQuickGenerate = async () => {\n-    const reply = await generate('간단 인사 한 줄만 해줘')\n-    setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n+    const res = await fetch('/api/ai/chat', {\n+      method: 'POST',\n+      headers: { 'Content-Type': 'application/json' },\n+      body: JSON.stringify({ prompt: '간단 인사 한 줄만 해줘' }),\n+    })\n+    const data = await res.json()\n+    setMessages((prev) => [...prev, { role: 'ai', content: data?.reply || '' }])\n   }\n \n   return (\n     <Container>\n       <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n       <Controls>\n-        <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n-          <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n-          <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n-          <option value=\"gemini-1.5-flash\">gemini-1.5-flash</option>\n-        </Select>\n         <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n-        <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 초기화</Button>\n       </Controls>\n \n       <ChatBox>\n         {messages.map((m, idx) => (\n"
                },
                {
                    "date": 1754881053126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,13 @@\n   return (\n     <Container>\n       <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n       <Controls>\n+        <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n+          <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n+          <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n+          <option value=\"gemini-1.5-flash\">gemini-1.5-flash</option>\n+        </Select>\n         <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n       </Controls>\n \n       <ChatBox>\n"
                },
                {
                    "date": 1754881169582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\"\n \n import React, { useState } from 'react'\n import styled from 'styled-components'\n+import useAI from '@/hooks/useAI'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -35,8 +36,17 @@\n   gap: 8px;\n   margin-bottom: 12px;\n `\n \n+const Select = styled.select`\n+  height: 36px;\n+  border: 1px solid ${({ theme }) => theme.border};\n+  background: ${({ theme }) => theme.body};\n+  color: ${({ theme }) => theme.text};\n+  border-radius: 8px;\n+  padding: 0 8px;\n+`\n+\n const InputRow = styled.form`\n   margin-top: 12px;\n   display: flex;\n   gap: 8px;\n@@ -61,8 +71,9 @@\n   font-weight: 600;\n `\n \n export default function AiChatPage() {\n+  const { modelName, setModelName, generate, sendChat, resetChat } = useAI('gemini-2.5-flash')\n   const [messages, setMessages] = useState<{ role: 'user' | 'ai'; content: string }[]>([])\n   const [input, setInput] = useState('')\n \n   const onSend = async (e: React.FormEvent) => {\n@@ -71,37 +82,28 @@\n     const next = [...messages, { role: 'user', content: input }]\n     setMessages(next)\n     setInput('')\n \n-    const res = await fetch('/api/ai/chat', {\n-      method: 'POST',\n-      headers: { 'Content-Type': 'application/json' },\n-      body: JSON.stringify({ messages: next }),\n-    })\n-    const data = await res.json()\n-    setMessages((prev) => [...prev, { role: 'ai', content: data?.reply || '응답을 불러오지 못했습니다.' }])\n+    const reply = await sendChat(input)\n+    setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n   }\n \n   const onQuickGenerate = async () => {\n-    const res = await fetch('/api/ai/chat', {\n-      method: 'POST',\n-      headers: { 'Content-Type': 'application/json' },\n-      body: JSON.stringify({ prompt: '간단 인사 한 줄만 해줘' }),\n-    })\n-    const data = await res.json()\n-    setMessages((prev) => [...prev, { role: 'ai', content: data?.reply || '' }])\n+    const reply = await generate('간단 인사 한 줄만 해줘')\n+    setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n   }\n \n   return (\n     <Container>\n       <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n       <Controls>\n         <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n           <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n-          <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n+          <option value=\"gemini-2.0-flash-lite\">gemini-2.0-flash</option>\n           <option value=\"gemini-1.5-flash\">gemini-1.5-flash</option>\n         </Select>\n         <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n+        <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 초기화</Button>\n       </Controls>\n \n       <ChatBox>\n         {messages.map((m, idx) => (\n"
                },
                {
                    "date": 1754881175549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n       <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n       <Controls>\n         <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n           <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n-          <option value=\"gemini-2.0-flash-lite\">gemini-2.0-flash</option>\n+          <option value=\"gemini-2.5-flash-lite\">gemini-2.5-flash-lite</option>\n           <option value=\"gemini-1.5-flash\">gemini-1.5-flash</option>\n         </Select>\n         <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n         <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 초기화</Button>\n"
                },
                {
                    "date": 1754881386652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import React, { useState } from 'react'\n import styled from 'styled-components'\n import useAI from '@/hooks/useAI'\n+import { useToast } from '@/components/common/ToastProvider'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -34,8 +35,9 @@\n const Controls = styled.div`\n   display: flex;\n   gap: 8px;\n   margin-bottom: 12px;\n+  flex-wrap: wrap;\n `\n \n const Select = styled.select`\n   height: 36px;\n@@ -71,11 +73,12 @@\n   font-weight: 600;\n `\n \n export default function AiChatPage() {\n-  const { modelName, setModelName, generate, sendChat, resetChat } = useAI('gemini-2.5-flash')\n+  const { modelName, setModelName, generate, sendChat, resetChat, testModel } = useAI('gemini-2.5-flash')\n   const [messages, setMessages] = useState<{ role: 'user' | 'ai'; content: string }[]>([])\n   const [input, setInput] = useState('')\n+  const { success, error } = useToast()\n \n   const onSend = async (e: React.FormEvent) => {\n     e.preventDefault()\n     if (!input.trim()) return\n@@ -91,17 +94,27 @@\n     const reply = await generate('간단 인사 한 줄만 해줘')\n     setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n   }\n \n+  const onTestModel = async () => {\n+    const r = await testModel()\n+    if (r.ok) success(`[${modelName}] OK: ${r.message}`)\n+    else error(`[${modelName}] ERROR: ${r.message}`)\n+  }\n+\n   return (\n     <Container>\n       <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n       <Controls>\n         <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n           <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n           <option value=\"gemini-2.5-flash-lite\">gemini-2.5-flash-lite</option>\n+          <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n+          <option value=\"gemini-2.0-flash-lite\">gemini-2.0-flash-lite</option>\n           <option value=\"gemini-1.5-flash\">gemini-1.5-flash</option>\n+          <option value=\"gemini-1.5-flash-8b\">gemini-1.5-flash-8b</option>\n         </Select>\n+        <Button type=\"button\" onClick={onTestModel}>모델 테스트</Button>\n         <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n         <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 초기화</Button>\n       </Controls>\n \n"
                },
                {
                    "date": 1754885179843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,11 +108,8 @@\n         <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n           <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n           <option value=\"gemini-2.5-flash-lite\">gemini-2.5-flash-lite</option>\n           <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n-          <option value=\"gemini-2.0-flash-lite\">gemini-2.0-flash-lite</option>\n-          <option value=\"gemini-1.5-flash\">gemini-1.5-flash</option>\n-          <option value=\"gemini-1.5-flash-8b\">gemini-1.5-flash-8b</option>\n         </Select>\n         <Button type=\"button\" onClick={onTestModel}>모델 테스트</Button>\n         <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n         <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 초기화</Button>\n"
                },
                {
                    "date": 1754885206434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n   font-weight: 600;\n `\n \n export default function AiChatPage() {\n-  const { modelName, setModelName, generate, sendChat, resetChat, testModel } = useAI('gemini-2.5-flash')\n+  const { modelName, setModelName, generate, sendChat, resetChat, testModel } = useAI('gemini-2.5-flash-lite')\n   const [messages, setMessages] = useState<{ role: 'user' | 'ai'; content: string }[]>([])\n   const [input, setInput] = useState('')\n   const { success, error } = useToast()\n \n"
                },
                {
                    "date": 1754885480913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import React, { useState } from 'react'\n import styled from 'styled-components'\n import useAI from '@/hooks/useAI'\n import { useToast } from '@/components/common/ToastProvider'\n+import { buildSystemInstruction } from '@/ai/systemPrompt'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -73,12 +74,12 @@\n   font-weight: 600;\n `\n \n export default function AiChatPage() {\n-  const { modelName, setModelName, generate, sendChat, resetChat, testModel } = useAI('gemini-2.5-flash-lite')\n+  const { modelName, setModelName, generate, sendChat, resetChat, testModel, setSystemInstruction } = useAI('gemini-2.5-flash-lite')\n   const [messages, setMessages] = useState<{ role: 'user' | 'ai'; content: string }[]>([])\n   const [input, setInput] = useState('')\n-  const { success, error } = useToast()\n+  const { success, error, info } = useToast()\n \n   const onSend = async (e: React.FormEvent) => {\n     e.preventDefault()\n     if (!input.trim()) return\n@@ -100,8 +101,26 @@\n     if (r.ok) success(`[${modelName}] OK: ${r.message}`)\n     else error(`[${modelName}] ERROR: ${r.message}`)\n   }\n \n+  const applySystem = () => {\n+    const sys = buildSystemInstruction({\n+      userLocalization: {\n+        primary_language_code: 'ko',\n+        primary_currency_code: 'KRW',\n+        user_country_name: 'South Korea',\n+      },\n+      dataBlock: '',\n+    })\n+    setSystemInstruction(sys)\n+    info('시스템 프롬프트를 적용했어요.')\n+  }\n+\n+  const clearSystem = () => {\n+    setSystemInstruction(undefined)\n+    info('시스템 프롬프트를 제거했어요.')\n+  }\n+\n   return (\n     <Container>\n       <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n       <Controls>\n@@ -112,8 +131,10 @@\n         </Select>\n         <Button type=\"button\" onClick={onTestModel}>모델 테스트</Button>\n         <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n         <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 초기화</Button>\n+        <Button type=\"button\" onClick={applySystem} style={{ background: '#2563eb' }}>시스템 적용</Button>\n+        <Button type=\"button\" onClick={clearSystem} style={{ background: '#6b7280' }}>시스템 제거</Button>\n       </Controls>\n \n       <ChatBox>\n         {messages.map((m, idx) => (\n"
                },
                {
                    "date": 1754961664917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import styled from 'styled-components'\n import useAI from '@/hooks/useAI'\n import { useToast } from '@/components/common/ToastProvider'\n import { buildSystemInstruction } from '@/ai/systemPrompt'\n+import { useChatStore } from '@/store/chatStore'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -75,26 +76,28 @@\n `\n \n export default function AiChatPage() {\n   const { modelName, setModelName, generate, sendChat, resetChat, testModel, setSystemInstruction } = useAI('gemini-2.5-flash-lite')\n-  const [messages, setMessages] = useState<{ role: 'user' | 'ai'; content: string }[]>([])\n   const [input, setInput] = useState('')\n   const { success, error, info } = useToast()\n+  const messages = useChatStore((s) => s.messages)\n+  const addMessage = useChatStore((s) => s.addMessage)\n+  const clear = useChatStore((s) => s.clear)\n \n   const onSend = async (e: React.FormEvent) => {\n     e.preventDefault()\n     if (!input.trim()) return\n-    const next = [...messages, { role: 'user', content: input }]\n-    setMessages(next)\n+    addMessage({ role: 'user', content: input })\n+    const current = input\n     setInput('')\n \n-    const reply = await sendChat(input)\n-    setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n+    const reply = await sendChat(current)\n+    addMessage({ role: 'ai', content: reply })\n   }\n \n   const onQuickGenerate = async () => {\n     const reply = await generate('간단 인사 한 줄만 해줘')\n-    setMessages((prev) => [...prev, { role: 'ai', content: reply }])\n+    addMessage({ role: 'ai', content: reply })\n   }\n \n   const onTestModel = async () => {\n     const r = await testModel()\n@@ -130,9 +133,10 @@\n           <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n         </Select>\n         <Button type=\"button\" onClick={onTestModel}>모델 테스트</Button>\n         <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n-        <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 초기화</Button>\n+        <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 세션 초기화</Button>\n+        <Button type=\"button\" onClick={clear} style={{ background: '#6b7280' }}>메시지 비우기</Button>\n         <Button type=\"button\" onClick={applySystem} style={{ background: '#2563eb' }}>시스템 적용</Button>\n         <Button type=\"button\" onClick={clearSystem} style={{ background: '#6b7280' }}>시스템 제거</Button>\n       </Controls>\n \n"
                }
            ],
            "date": 1754641844436,
            "name": "Commit-0",
            "content": "\"use client\"\n\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { callApiPost } from '@/lib/api'\n\nconst Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 16px;\n`\n\nconst ChatBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.border};\n  border-radius: 8px;\n  padding: 12px;\n  min-height: 320px;\n`\n\nconst Message = styled.div<{ $role: 'user' | 'ai' }>`\n  align-self: ${({ $role }) => ($role === 'user' ? 'flex-end' : 'flex-start')};\n  background: ${({ $role, theme }) => ($role === 'user' ? theme.accent : theme.surface2)};\n  color: ${({ $role, theme }) => ($role === 'user' ? theme.body : theme.text)};\n  padding: 10px 12px;\n  border-radius: 12px;\n  max-width: 80%;\n  white-space: pre-wrap;\n`\n\nconst InputRow = styled.form`\n  margin-top: 12px;\n  display: flex;\n  gap: 8px;\n`\n\nconst TextInput = styled.input`\n  flex: 1;\n  height: 44px;\n  border-radius: 8px;\n  border: 1px solid ${({ theme }) => theme.border};\n  background: ${({ theme }) => theme.body};\n  color: ${({ theme }) => theme.text};\n  padding: 0 12px;\n`\n\nconst SendButton = styled.button`\n  height: 44px;\n  padding: 0 16px;\n  background: ${({ theme }) => theme.accent};\n  color: ${({ theme }) => theme.body};\n  border-radius: 8px;\n  font-weight: 600;\n`\n\nexport default function AiChatPage() {\n  const [messages, setMessages] = useState<{ role: 'user' | 'ai'; content: string }[]>([])\n  const [input, setInput] = useState('')\n\n  const onSend = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!input.trim()) return\n    const next = [...messages, { role: 'user', content: input }]\n    setMessages(next)\n    setInput('')\n\n    // API 호출 (예시)\n    const host = process.env.NEXT_PUBLIC_API_HOST\n    const data = await callApiPost<{ reply?: string }>({\n      title: 'AI Chat',\n      url: `${host}/ai/chat`,\n      body: { messages: next },\n      isCallPageLoader: true,\n    })\n\n    setMessages((prev) => [...prev, { role: 'ai', content: data?.reply || '응답을 불러오지 못했습니다.' }])\n  }\n\n  return (\n    <Container>\n      <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n      <ChatBox>\n        {messages.map((m, idx) => (\n          <Message key={idx} $role={m.role}>{m.content}</Message>\n        ))}\n      </ChatBox>\n      <InputRow onSubmit={onSend}>\n        <TextInput value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"메시지를 입력하세요\" />\n        <SendButton type=\"submit\">전송</SendButton>\n      </InputRow>\n    </Container>\n  )\n}\n"
        }
    ]
}