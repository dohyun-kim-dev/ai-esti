{
    "sourceFile": "src/app/ai/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 43,
            "patches": [
                {
                    "date": 1755244638615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755244960401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n const Button = styled.button`\n   height: 44px;\n   padding: 0 16px;\n   background: ${({ theme }) => theme.accent};\n-  color: ${({ theme }) => theme.body};\n+  color: ${({ theme }) => theme.text};\n   border-radius: 8px;\n   font-weight: 600;\n `\n \n"
                },
                {
                    "date": 1755244993179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n const Button = styled.button`\n   height: 44px;\n   padding: 0 16px;\n   background: ${({ theme }) => theme.accent};\n-  color: ${({ theme }) => theme.text};\n+  color: ${({ theme }) => theme.body};\n   border-radius: 8px;\n   font-weight: 600;\n `\n \n"
                },
                {
                    "date": 1755245294826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n \"use client\"\n \n-import React, { useState } from 'react'\n+import React from 'react'\n import styled from 'styled-components'\n import useAI from '@/hooks/useAI'\n import { useToast } from '@/components/common/ToastProvider'\n import { buildSystemInstruction } from '@/ai/systemPrompt'\n import { useChatStore } from '@/store/chatStore'\n import BottomInput from '@/components/ai-esti/BottomInput'\n+import AiResponseMessage from '@/components/ai-esti/AiResponseMessage'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -25,18 +26,24 @@\n   padding: 12px;\n   min-height: 320px;\n `\n \n-const Message = styled.div<{ $role: 'user' | 'ai' }>`\n-  align-self: ${({ $role }) => ($role === 'user' ? 'flex-end' : 'flex-start')};\n-  background: ${({ $role, theme }) => ($role === 'user' ? theme.accent : theme.surface2)};\n-  color: ${({ $role, theme }) => ($role === 'user' ? theme.body : theme.text)};\n+const UserMessage = styled.div`\n+  align-self: flex-end;\n+  background: ${({ theme }) => theme.accent};\n+  color: ${({ theme }) => theme.body};\n   padding: 10px 12px;\n   border-radius: 12px;\n   max-width: 80%;\n   white-space: pre-wrap;\n `\n \n+const StyledAiMessage = styled(AiResponseMessage)`\n+  padding: 0;\n+  max-width: 80%;\n+  align-self: flex-start;\n+`\n+\n const Controls = styled.div`\n   display: flex;\n   gap: 8px;\n   margin-bottom: 12px;\n@@ -60,8 +67,10 @@\n   border-radius: 8px;\n   font-weight: 600;\n `\n \n+type ModelName = 'gemini-2.5-flash' | 'gemini-2.5-flash-lite' | 'gemini-2.0-flash';\n+\n export default function AiChatPage() {\n   const { modelName, setModelName, generate, sendChat, resetChat, testModel, setSystemInstruction } = useAI('gemini-2.5-flash-lite')\n   const { success, error, info } = useToast()\n   const messages = useChatStore((s) => s.messages)\n@@ -103,13 +112,17 @@\n     setSystemInstruction(undefined)\n     info('시스템 프롬프트를 제거했어요.')\n   }\n \n+  const handleModelChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n+    setModelName(e.target.value as ModelName)\n+  }\n+\n   return (\n     <Container>\n       <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n       <Controls>\n-        <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n+        <Select value={modelName} onChange={handleModelChange}>\n           <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n           <option value=\"gemini-2.5-flash-lite\">gemini-2.5-flash-lite</option>\n           <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n         </Select>\n@@ -122,9 +135,18 @@\n       </Controls>\n \n       <ChatBox>\n         {messages.map((m, idx) => (\n-          <Message key={idx} $role={m.role}>{m.content}</Message>\n+          m.role === 'user' ? (\n+            <UserMessage key={idx}>{m.content}</UserMessage>\n+          ) : (\n+            <StyledAiMessage \n+              key={idx}\n+              content={m.content}\n+              profileImage=\"/ai-estimate/pretty.png\"\n+              name=\"AI 어시스턴트\"\n+            />\n+          )\n         ))}\n       </ChatBox>\n \n       <BottomInput \n"
                },
                {
                    "date": 1755245491422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n             <StyledAiMessage \n               key={idx}\n               content={m.content}\n               profileImage=\"/ai-estimate/pretty.png\"\n-              name=\"AI 어시스턴트\"\n+              name=\"\"\n             />\n           )\n         ))}\n       </ChatBox>\n"
                },
                {
                    "date": 1755245550641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n             <StyledAiMessage \n               key={idx}\n               content={m.content}\n               profileImage=\"/ai-estimate/pretty.png\"\n-              name=\"\"\n+              name=\"AIGO\"\n             />\n           )\n         ))}\n       </ChatBox>\n"
                },
                {
                    "date": 1755245567753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n const ChatBox = styled.div`\n   display: flex;\n   flex-direction: column;\n   gap: 12px;\n-  background: ${({ theme }) => theme.surface1};\n   border: 1px solid ${({ theme }) => theme.border};\n   border-radius: 8px;\n   padding: 12px;\n   min-height: 320px;\n"
                },
                {
                    "date": 1755245597382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n const ChatBox = styled.div`\n   display: flex;\n   flex-direction: column;\n   gap: 12px;\n-  border: 1px solid ${({ theme }) => theme.border};\n+  // border: 1px solid ${({ theme }) => theme.border};\n   border-radius: 8px;\n   padding: 12px;\n   min-height: 320px;\n `\n"
                },
                {
                    "date": 1755246017916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n `\n \n const UserMessage = styled.div`\n   align-self: flex-end;\n-  background: ${({ theme }) => theme.accent};\n+  background: ${({ theme }) => theme.surface1};\n   color: ${({ theme }) => theme.body};\n   padding: 10px 12px;\n   border-radius: 12px;\n   max-width: 80%;\n"
                },
                {
                    "date": 1755246073832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n const UserMessage = styled.div`\n   align-self: flex-end;\n   background: ${({ theme }) => theme.surface1};\n-  color: ${({ theme }) => theme.body};\n+  color: ${({ theme }) => theme.text};\n   padding: 10px 12px;\n   border-radius: 12px;\n   max-width: 80%;\n   white-space: pre-wrap;\n"
                },
                {
                    "date": 1755246700034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n \"use client\"\n \n-import React from 'react'\n+import React, { useState } from 'react'\n import styled from 'styled-components'\n import useAI from '@/hooks/useAI'\n import { useToast } from '@/components/common/ToastProvider'\n-import { buildSystemInstruction } from '@/ai/systemPrompt'\n import { useChatStore } from '@/store/chatStore'\n import BottomInput from '@/components/ai-esti/BottomInput'\n import AiResponseMessage from '@/components/ai-esti/AiResponseMessage'\n+import PromptSelector from '@/components/ai-esti/PromptSelector'\n+import { promptTemplates, combinePrompts } from '@/ai/promptTemplates'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -19,9 +20,8 @@\n const ChatBox = styled.div`\n   display: flex;\n   flex-direction: column;\n   gap: 12px;\n-  // border: 1px solid ${({ theme }) => theme.border};\n   border-radius: 8px;\n   padding: 12px;\n   min-height: 320px;\n `\n@@ -69,50 +69,34 @@\n \n type ModelName = 'gemini-2.5-flash' | 'gemini-2.5-flash-lite' | 'gemini-2.0-flash';\n \n export default function AiChatPage() {\n-  const { modelName, setModelName, generate, sendChat, resetChat, testModel, setSystemInstruction } = useAI('gemini-2.5-flash-lite')\n-  const { success, error, info } = useToast()\n+  const { modelName, setModelName, generate, sendChat, resetChat, testModel } = useAI('gemini-2.5-flash-lite')\n+  const { success, error } = useToast()\n   const messages = useChatStore((s) => s.messages)\n   const addMessage = useChatStore((s) => s.addMessage)\n   const clear = useChatStore((s) => s.clear)\n+  const [selectedPromptId, setSelectedPromptId] = useState('default')\n \n   const handleSubmit = async (input: string) => {\n     if (!input.trim()) return\n+    \n+    // 원본 메시지 표시\n     addMessage({ role: 'user', content: input })\n-    const reply = await sendChat(input)\n+    \n+    // 프롬프트 템플릿과 결합하여 AI에 전송\n+    const combinedPrompt = combinePrompts(selectedPromptId, input)\n+    const reply = await sendChat(combinedPrompt)\n+    \n     addMessage({ role: 'ai', content: reply })\n   }\n \n-  const onQuickGenerate = async () => {\n-    const reply = await generate('간단 인사 한 줄만 해줘')\n-    addMessage({ role: 'ai', content: reply })\n-  }\n-\n   const onTestModel = async () => {\n     const r = await testModel()\n     if (r.ok) success(`[${modelName}] OK: ${r.message}`)\n     else error(`[${modelName}] ERROR: ${r.message}`)\n   }\n \n-  const applySystem = () => {\n-    const sys = buildSystemInstruction({\n-      userLocalization: {\n-        primary_language_code: 'ko',\n-        primary_currency_code: 'KRW',\n-        user_country_name: 'South Korea',\n-      },\n-      dataBlock: '',\n-    })\n-    setSystemInstruction(sys)\n-    info('시스템 프롬프트를 적용했어요.')\n-  }\n-\n-  const clearSystem = () => {\n-    setSystemInstruction(undefined)\n-    info('시스템 프롬프트를 제거했어요.')\n-  }\n-\n   const handleModelChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n     setModelName(e.target.value as ModelName)\n   }\n \n@@ -125,13 +109,16 @@\n           <option value=\"gemini-2.5-flash-lite\">gemini-2.5-flash-lite</option>\n           <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n         </Select>\n         <Button type=\"button\" onClick={onTestModel}>모델 테스트</Button>\n-        <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n         <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 세션 초기화</Button>\n         <Button type=\"button\" onClick={clear} style={{ background: '#6b7280' }}>메시지 비우기</Button>\n-        <Button type=\"button\" onClick={applySystem} style={{ background: '#2563eb' }}>시스템 적용</Button>\n-        <Button type=\"button\" onClick={clearSystem} style={{ background: '#6b7280' }}>시스템 제거</Button>\n+        \n+        <PromptSelector\n+          templates={promptTemplates}\n+          selectedId={selectedPromptId}\n+          onSelect={setSelectedPromptId}\n+        />\n       </Controls>\n \n       <ChatBox>\n         {messages.map((m, idx) => (\n"
                },
                {
                    "date": 1755247760727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n import BottomInput from '@/components/ai-esti/BottomInput'\n import AiResponseMessage from '@/components/ai-esti/AiResponseMessage'\n import PromptSelector from '@/components/ai-esti/PromptSelector'\n import { promptTemplates, combinePrompts } from '@/ai/promptTemplates'\n+import EstimateCard from '@/components/ai-esti/EstimateCard'\n+import type { ProjectEstimate } from '@/app/ai-estimate/types/projectEstimate'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -68,8 +70,44 @@\n `\n \n type ModelName = 'gemini-2.5-flash' | 'gemini-2.5-flash-lite' | 'gemini-2.0-flash';\n \n+// JSON 응답에서 견적서 데이터 추출\n+const extractEstimateData = (content: string): ProjectEstimate | null => {\n+  try {\n+    const match = content.match(/<script type=\"application\\/json\" id=\"invoiceData\">(.*?)<\\/script>/s);\n+    if (!match) return null;\n+    \n+    const jsonStr = match[1];\n+    const data = JSON.parse(jsonStr);\n+    return data as ProjectEstimate;\n+  } catch (error) {\n+    console.error('Failed to parse estimate data:', error);\n+    return null;\n+  }\n+};\n+\n+// AI 응답 메시지 렌더링 컴포넌트\n+const AiMessageContent: React.FC<{ content: string }> = ({ content }) => {\n+  const estimateData = extractEstimateData(content);\n+  \n+  if (estimateData) {\n+    return (\n+      <>\n+        {/* 견적서 JSON 이전의 텍스트가 있다면 표시 */}\n+        {content.split('<script')[0].trim() && (\n+          <div style={{ marginBottom: '16px' }}>\n+            {content.split('<script')[0].trim()}\n+          </div>\n+        )}\n+        <EstimateCard estimate={estimateData} />\n+      </>\n+    );\n+  }\n+  \n+  return <div>{content}</div>;\n+};\n+\n export default function AiChatPage() {\n   const { modelName, setModelName, generate, sendChat, resetChat, testModel } = useAI('gemini-2.5-flash-lite')\n   const { success, error } = useToast()\n   const messages = useChatStore((s) => s.messages)\n@@ -126,9 +164,9 @@\n             <UserMessage key={idx}>{m.content}</UserMessage>\n           ) : (\n             <StyledAiMessage \n               key={idx}\n-              content={m.content}\n+              content={<AiMessageContent content={m.content} />}\n               profileImage=\"/ai-estimate/pretty.png\"\n               name=\"AIGO\"\n             />\n           )\n"
                },
                {
                    "date": 1755247959283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,14 @@\n import AiResponseMessage from '@/components/ai-esti/AiResponseMessage'\n import PromptSelector from '@/components/ai-esti/PromptSelector'\n import { promptTemplates, combinePrompts } from '@/ai/promptTemplates'\n import EstimateCard from '@/components/ai-esti/EstimateCard'\n+import EstimateAccordion from '@/components/ai-esti/EstimateAccordion'\n+import DetailModal from '@/components/ai-esti/DetailModal'\n+import EstimateActionButtons from '@/components/ai-esti/EstimateActionButtons'\n+import PeriodSlider from '@/components/ai-esti/PeriodSlider'\n import type { ProjectEstimate } from '@/app/ai-estimate/types/projectEstimate'\n+import type { EstimateItem } from '@/app/ai-estimate/types'\n \n const Container = styled.div`\n   max-width: 960px;\n   margin: 0 auto;\n@@ -68,8 +73,45 @@\n   border-radius: 8px;\n   font-weight: 600;\n `\n \n+const EstimateContainer = styled.div`\n+  width: 100%;\n+  max-width: 1200px;\n+  margin: 0 auto;\n+`\n+\n+const TopSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 20px;\n+\n+  @media (min-width: 1024px) {\n+    flex-direction: row;\n+    align-items: flex-start;\n+    gap: 24px;\n+  }\n+`;\n+\n+const MainContent = styled.div`\n+  flex: 1;\n+  width: 100%;\n+\n+  @media (min-width: 1024px) {\n+    max-width: 800px;\n+  }\n+`;\n+\n+const SideContent = styled.div`\n+  width: 100%;\n+\n+  @media (min-width: 1024px) {\n+    width: 320px;\n+    position: sticky;\n+    top: 120px;\n+  }\n+`;\n+\n type ModelName = 'gemini-2.5-flash' | 'gemini-2.5-flash-lite' | 'gemini-2.0-flash';\n \n // JSON 응답에서 견적서 데이터 추출\n const extractEstimateData = (content: string): ProjectEstimate | null => {\n@@ -87,21 +129,57 @@\n };\n \n // AI 응답 메시지 렌더링 컴포넌트\n const AiMessageContent: React.FC<{ content: string }> = ({ content }) => {\n+  const [isDetailsVisible, setIsDetailsVisible] = useState(false);\n+  const [selectedItem, setSelectedItem] = useState<EstimateItem | null>(null);\n+  const [projectPeriod, setProjectPeriod] = useState(20); // 기본값\n+  \n   const estimateData = extractEstimateData(content);\n   \n+  const handleItemClick = (item: EstimateItem) => {\n+    setSelectedItem(item);\n+  };\n+\n+  const handleCloseModal = () => {\n+    setSelectedItem(null);\n+  };\n+  \n   if (estimateData) {\n     return (\n-      <>\n+      <EstimateContainer>\n         {/* 견적서 JSON 이전의 텍스트가 있다면 표시 */}\n         {content.split('<script')[0].trim() && (\n           <div style={{ marginBottom: '16px' }}>\n             {content.split('<script')[0].trim()}\n           </div>\n         )}\n-        <EstimateCard estimate={estimateData} />\n-      </>\n+        \n+        <TopSection>\n+          <MainContent>\n+            <EstimateCard estimate={estimateData} />\n+            <PeriodSlider value={projectPeriod} onChange={setProjectPeriod} />\n+            <EstimateAccordion \n+              data={estimateData} \n+              onItemClick={handleItemClick}\n+            />\n+          </MainContent>\n+          <SideContent>\n+            <EstimateActionButtons \n+              onConsult={() => console.log('문의하기')}\n+              onAiEstimate={() => console.log('AI 예산 줄이기')}\n+              onAiOptimize={() => console.log('AI 맞춤 추천')}\n+            />\n+          </SideContent>\n+        </TopSection>\n+        \n+        {selectedItem && (\n+          <DetailModal \n+            item={selectedItem} \n+            onClose={handleCloseModal} \n+          />\n+        )}\n+      </EstimateContainer>\n     );\n   }\n   \n   return <div>{content}</div>;\n@@ -113,20 +191,30 @@\n   const messages = useChatStore((s) => s.messages)\n   const addMessage = useChatStore((s) => s.addMessage)\n   const clear = useChatStore((s) => s.clear)\n   const [selectedPromptId, setSelectedPromptId] = useState('default')\n+  const [isProcessing, setIsProcessing] = useState(false)\n \n   const handleSubmit = async (input: string) => {\n-    if (!input.trim()) return\n+    if (!input.trim() || isProcessing) return\n     \n-    // 원본 메시지 표시\n-    addMessage({ role: 'user', content: input })\n+    // 이미 \"견적서를 보여줘\"를 처리 중이면 \"줘\" 입력을 무시\n+    if (isProcessing && input.trim() === \"줘\") return\n     \n-    // 프롬프트 템플릿과 결합하여 AI에 전송\n-    const combinedPrompt = combinePrompts(selectedPromptId, input)\n-    const reply = await sendChat(combinedPrompt)\n+    setIsProcessing(true)\n     \n-    addMessage({ role: 'ai', content: reply })\n+    try {\n+      // 원본 메시지 표시\n+      addMessage({ role: 'user', content: input })\n+      \n+      // 프롬프트 템플릿과 결합하여 AI에 전송\n+      const combinedPrompt = combinePrompts(selectedPromptId, input)\n+      const reply = await sendChat(combinedPrompt)\n+      \n+      addMessage({ role: 'ai', content: reply })\n+    } finally {\n+      setIsProcessing(false)\n+    }\n   }\n \n   const onTestModel = async () => {\n     const r = await testModel()\n"
                },
                {
                    "date": 1755248072309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,8 +120,15 @@\n     if (!match) return null;\n     \n     const jsonStr = match[1];\n     const data = JSON.parse(jsonStr);\n+    \n+    // 데이터 구조 검증\n+    if (!data || typeof data !== 'object' || !Array.isArray(data.categories)) {\n+      console.error('Invalid estimate data structure:', data);\n+      return null;\n+    }\n+    \n     return data as ProjectEstimate;\n   } catch (error) {\n     console.error('Failed to parse estimate data:', error);\n     return null;\n@@ -143,9 +150,9 @@\n   const handleCloseModal = () => {\n     setSelectedItem(null);\n   };\n   \n-  if (estimateData) {\n+  if (estimateData && estimateData.categories) {\n     return (\n       <EstimateContainer>\n         {/* 견적서 JSON 이전의 텍스트가 있다면 표시 */}\n         {content.split('<script')[0].trim() && (\n@@ -160,8 +167,10 @@\n             <PeriodSlider value={projectPeriod} onChange={setProjectPeriod} />\n             <EstimateAccordion \n               data={estimateData} \n               onItemClick={handleItemClick}\n+              isOpen={isDetailsVisible}\n+              onToggle={() => setIsDetailsVisible(!isDetailsVisible)}\n             />\n           </MainContent>\n           <SideContent>\n             <EstimateActionButtons \n"
                },
                {
                    "date": 1755248356632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,8 +163,12 @@\n         \n         <TopSection>\n           <MainContent>\n             <EstimateCard estimate={estimateData} />\n+            <DetailsToggle onClick={() => setIsDetailsVisible(!isDetailsVisible)}>\n+                  상세견적 보기 {isDetailsVisible ? <DetailsToggleIcon><IoChevronUp size={24}/></DetailsToggleIcon> : <DetailsToggleIcon><IoChevronDown size={24}/></DetailsToggleIcon>\n+                }\n+                </DetailsToggle>\n             <PeriodSlider value={projectPeriod} onChange={setProjectPeriod} />\n             <EstimateAccordion \n               data={estimateData} \n               onItemClick={handleItemClick}\n"
                },
                {
                    "date": 1755248456291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,14 +168,11 @@\n                   상세견적 보기 {isDetailsVisible ? <DetailsToggleIcon><IoChevronUp size={24}/></DetailsToggleIcon> : <DetailsToggleIcon><IoChevronDown size={24}/></DetailsToggleIcon>\n                 }\n                 </DetailsToggle>\n             <PeriodSlider value={projectPeriod} onChange={setProjectPeriod} />\n-            <EstimateAccordion \n-              data={estimateData} \n-              onItemClick={handleItemClick}\n-              isOpen={isDetailsVisible}\n-              onToggle={() => setIsDetailsVisible(!isDetailsVisible)}\n-            />\n+            <AnimatedContainer $isvisible={isDetailsVisible}>\n+                  <EstimateAccordion data={projectEstimate} onItemClick={handleItemClick} />\n+                </AnimatedContainer>\n           </MainContent>\n           <SideContent>\n             <EstimateActionButtons \n               onConsult={() => console.log('문의하기')}\n"
                },
                {
                    "date": 1755248625807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,16 +163,15 @@\n         \n         <TopSection>\n           <MainContent>\n             <EstimateCard estimate={estimateData} />\n-            <DetailsToggle onClick={() => setIsDetailsVisible(!isDetailsVisible)}>\n-                  상세견적 보기 {isDetailsVisible ? <DetailsToggleIcon><IoChevronUp size={24}/></DetailsToggleIcon> : <DetailsToggleIcon><IoChevronDown size={24}/></DetailsToggleIcon>\n-                }\n-                </DetailsToggle>\n             <PeriodSlider value={projectPeriod} onChange={setProjectPeriod} />\n-            <AnimatedContainer $isvisible={isDetailsVisible}>\n-                  <EstimateAccordion data={projectEstimate} onItemClick={handleItemClick} />\n-                </AnimatedContainer>\n+            <EstimateAccordion \n+              data={estimateData} \n+              onItemClick={handleItemClick}\n+              isOpen={isDetailsVisible}\n+              onToggle={() => setIsDetailsVisible(!isDetailsVisible)}\n+            />\n           </MainContent>\n           <SideContent>\n             <EstimateActionButtons \n               onConsult={() => console.log('문의하기')}\n"
                },
                {
                    "date": 1755248731386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n import EstimateAccordion from '@/components/ai-esti/EstimateAccordion'\n import DetailModal from '@/components/ai-esti/DetailModal'\n import EstimateActionButtons from '@/components/ai-esti/EstimateActionButtons'\n import PeriodSlider from '@/components/ai-esti/PeriodSlider'\n+import { IoChevronDown, IoChevronUp } from 'react-icons/io5'\n import type { ProjectEstimate } from '@/app/ai-estimate/types/projectEstimate'\n import type { EstimateItem } from '@/app/ai-estimate/types'\n \n const Container = styled.div`\n@@ -110,14 +111,46 @@\n     top: 120px;\n   }\n `;\n \n+const DetailsToggle = styled.div`\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  text-align: center;\n+  padding: 10px;\n+  font-size: 14px;\n+  font-style: normal;\n+  font-weight: 600;\n+  line-height: 160%; \n+  letter-spacing: 0.28px;\n+  color: ${({ theme }) => theme.subtleText};\n+  cursor: pointer;\n+  margin: -20px 0 20px;\n+`;\n+\n+const DetailsToggleIcon = styled.div`\n+  margin-top: 4px;\n+  margin-left: 10px;\n+`;\n+\n+const AnimatedContainer = styled.div<{ $isvisible: boolean }>`\n+  display: grid;\n+  grid-template-rows: ${({ $isvisible }) => ($isvisible ? '1fr' : '0fr')};\n+  transition: grid-template-rows 0.5s ease-in-out;\n+  overflow: hidden;\n+\n+  > * {\n+    min-height: 0;\n+  }\n+`;\n+\n type ModelName = 'gemini-2.5-flash' | 'gemini-2.5-flash-lite' | 'gemini-2.0-flash';\n \n // JSON 응답에서 견적서 데이터 추출\n const extractEstimateData = (content: string): ProjectEstimate | null => {\n   try {\n-    const match = content.match(/<script type=\"application\\/json\" id=\"invoiceData\">(.*?)<\\/script>/s);\n+    const match = content.match(/<script type=\"application\\/json\" id=\"invoiceData\">([\\s\\S]*?)<\\/script>/);\n     if (!match) return null;\n     \n     const jsonStr = match[1];\n     const data = JSON.parse(jsonStr);\n@@ -163,15 +196,21 @@\n         \n         <TopSection>\n           <MainContent>\n             <EstimateCard estimate={estimateData} />\n+            <DetailsToggle onClick={() => setIsDetailsVisible(!isDetailsVisible)}>\n+              상세견적 보기 {isDetailsVisible ? \n+                <DetailsToggleIcon><IoChevronUp size={24}/></DetailsToggleIcon> : \n+                <DetailsToggleIcon><IoChevronDown size={24}/></DetailsToggleIcon>\n+              }\n+            </DetailsToggle>\n             <PeriodSlider value={projectPeriod} onChange={setProjectPeriod} />\n-            <EstimateAccordion \n-              data={estimateData} \n-              onItemClick={handleItemClick}\n-              isOpen={isDetailsVisible}\n-              onToggle={() => setIsDetailsVisible(!isDetailsVisible)}\n-            />\n+            <AnimatedContainer $isvisible={isDetailsVisible}>\n+              <EstimateAccordion \n+                data={estimateData} \n+                onItemClick={handleItemClick}\n+              />\n+            </AnimatedContainer>\n           </MainContent>\n           <SideContent>\n             <EstimateActionButtons \n               onConsult={() => console.log('문의하기')}\n"
                },
                {
                    "date": 1755478016568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n `\n \n const StyledAiMessage = styled(AiResponseMessage)`\n   padding: 0;\n-  max-width: 80%;\n+  max-width: 100%;\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755478049184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n `\n \n const StyledAiMessage = styled(AiResponseMessage)`\n   padding: 0;\n-  max-width: 100%;\n+  max-width: 80%;\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755478582636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,11 @@\n   border-radius: 12px;\n   max-width: 80%;\n   white-space: pre-wrap;\n `\n-\n-const StyledAiMessage = styled(AiResponseMessage)`\n+const StyledAiMessage = styled(AiResponseMessage)<{ isFullWidth?: boolean }>`\n   padding: 0;\n-  max-width: 80%;\n+  max-width: ${({ isFullWidth }) => (isFullWidth ? '100%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755478602791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,8 +302,9 @@\n               key={idx}\n               content={<AiMessageContent content={m.content} />}\n               profileImage=\"/ai-estimate/pretty.png\"\n               name=\"AIGO\"\n+              isFullWidth={isEstimateMessage(m.content)}\n             />\n           )\n         ))}\n       </ChatBox>\n"
                },
                {
                    "date": 1755478644795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,11 @@\n   const addMessage = useChatStore((s) => s.addMessage)\n   const clear = useChatStore((s) => s.clear)\n   const [selectedPromptId, setSelectedPromptId] = useState('default')\n   const [isProcessing, setIsProcessing] = useState(false)\n-\n+  const isEstimateMessage = (content: string) => {\n+    return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n+  };\n   const handleSubmit = async (input: string) => {\n     if (!input.trim() || isProcessing) return\n     \n     // 이미 \"견적서를 보여줘\"를 처리 중이면 \"줘\" 입력을 무시\n"
                },
                {
                    "date": 1755478711833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,11 +239,14 @@\n   const addMessage = useChatStore((s) => s.addMessage)\n   const clear = useChatStore((s) => s.clear)\n   const [selectedPromptId, setSelectedPromptId] = useState('default')\n   const [isProcessing, setIsProcessing] = useState(false)\n+\n+\n   const isEstimateMessage = (content: string) => {\n     return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n   };\n+  \n   const handleSubmit = async (input: string) => {\n     if (!input.trim() || isProcessing) return\n     \n     // 이미 \"견적서를 보여줘\"를 처리 중이면 \"줘\" 입력을 무시\n"
                },
                {
                    "date": 1755479214104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n \n   const isEstimateMessage = (content: string) => {\n     return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n   };\n-  \n+\n   const handleSubmit = async (input: string) => {\n     if (!input.trim() || isProcessing) return\n     \n     // 이미 \"견적서를 보여줘\"를 처리 중이면 \"줘\" 입력을 무시\n@@ -306,9 +306,9 @@\n             <StyledAiMessage \n               key={idx}\n               content={<AiMessageContent content={m.content} />}\n               profileImage=\"/ai-estimate/pretty.png\"\n-              name=\"AIGO\"\n+              name=\"AI 에이전트\"\n               isFullWidth={isEstimateMessage(m.content)}\n             />\n           )\n         ))}\n"
                },
                {
                    "date": 1755479302125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n   if (estimateData && estimateData.categories) {\n     return (\n       <EstimateContainer>\n         {/* 견적서 JSON 이전의 텍스트가 있다면 표시 */}\n-        {content.split('<script')[0].trim() && (\n+        {content.split('<ㅊ')[0].trim() && (\n           <div style={{ marginBottom: '16px' }}>\n             {content.split('<script')[0].trim()}\n           </div>\n         )}\n"
                },
                {
                    "date": 1755479357618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n   if (estimateData && estimateData.categories) {\n     return (\n       <EstimateContainer>\n         {/* 견적서 JSON 이전의 텍스트가 있다면 표시 */}\n-        {content.split('<ㅊ')[0].trim() && (\n+        {content.split('<script')[0].trim() && (\n           <div style={{ marginBottom: '16px' }}>\n             {content.split('<script')[0].trim()}\n           </div>\n         )}\n@@ -242,9 +242,9 @@\n   const [isProcessing, setIsProcessing] = useState(false)\n \n \n   const isEstimateMessage = (content: string) => {\n-    return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n+    return content.includes('<script');\n   };\n \n   const handleSubmit = async (input: string) => {\n     if (!input.trim() || isProcessing) return\n"
                },
                {
                    "date": 1755479376238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n   const [isProcessing, setIsProcessing] = useState(false)\n \n \n   const isEstimateMessage = (content: string) => {\n-    return content.includes('<script');\n+    return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n   };\n \n   const handleSubmit = async (input: string) => {\n     if (!input.trim() || isProcessing) return\n"
                },
                {
                    "date": 1755479443669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,8 @@\n   white-space: pre-wrap;\n `\n const StyledAiMessage = styled(AiResponseMessage)<{ isFullWidth?: boolean }>`\n   padding: 0;\n-  max-width: ${({ isFullWidth }) => (isFullWidth ? '100%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755479474603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n   white-space: pre-wrap;\n `\n const StyledAiMessage = styled(AiResponseMessage)<{ isFullWidth?: boolean }>`\n   padding: 0;\n+  max-width: ${({ isFullWidth }) => (isFullWidth ? '100%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755479536423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   white-space: pre-wrap;\n `\n const StyledAiMessage = styled(AiResponseMessage)<{ isFullWidth?: boolean }>`\n   padding: 0;\n-  max-width: ${({ isFullWidth }) => (isFullWidth ? '100%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n+  max-width: ${({ isFullWidth }) => (isFullWidth ? '0%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755479590060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   white-space: pre-wrap;\n `\n const StyledAiMessage = styled(AiResponseMessage)<{ isFullWidth?: boolean }>`\n   padding: 0;\n-  max-width: ${({ isFullWidth }) => (isFullWidth ? '0%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n+  max-width: ${({ isFullWidth }) => (isFullWidth ? '70%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755479636804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   white-space: pre-wrap;\n `\n const StyledAiMessage = styled(AiResponseMessage)<{ isFullWidth?: boolean }>`\n   padding: 0;\n-  max-width: ${({ isFullWidth }) => (isFullWidth ? '70%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n+  max-width: ${({ isFullWidth }) => (isFullWidth ? '100%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755479754379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,8 +227,14 @@\n         )}\n       </EstimateContainer>\n     );\n   }\n+  if (estimateData && estimateData.categories) {\n+    // 견적서 UI 렌더링\n+  } else if (content.includes('<script')) {\n+    // JSON 파싱 중일 때 로딩 상태 표시\n+    return <div>견적서를 불러오는 중...</div>;\n+  }\n   \n   return <div>{content}</div>;\n };\n \n"
                },
                {
                    "date": 1755479774681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,10 +261,14 @@\n     setIsProcessing(true)\n     \n     try {\n       // 원본 메시지 표시\n-      addMessage({ role: 'user', content: input })\n-      \n+      addMessage({ \n+        role: 'user', \n+        content: input, \n+        id: Date.now() + '-user' \n+      });\n+            \n       // 프롬프트 템플릿과 결합하여 AI에 전송\n       const combinedPrompt = combinePrompts(selectedPromptId, input)\n       const reply = await sendChat(combinedPrompt)\n       \n"
                },
                {
                    "date": 1755479835632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,14 +261,10 @@\n     setIsProcessing(true)\n     \n     try {\n       // 원본 메시지 표시\n-      addMessage({ \n-        role: 'user', \n-        content: input, \n-        id: Date.now() + '-user' \n-      });\n-            \n+      addMessage({ role: 'user', content: input })\n+      \n       // 프롬프트 템플릿과 결합하여 AI에 전송\n       const combinedPrompt = combinePrompts(selectedPromptId, input)\n       const reply = await sendChat(combinedPrompt)\n       \n"
                },
                {
                    "date": 1755480705209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,9 @@\n   const addMessage = useChatStore((s) => s.addMessage)\n   const clear = useChatStore((s) => s.clear)\n   const [selectedPromptId, setSelectedPromptId] = useState('default')\n   const [isProcessing, setIsProcessing] = useState(false)\n+  const updateLastMessage = useChatStore((s) => s.updateLastMessage);\n \n \n   const isEstimateMessage = (content: string) => {\n     return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n"
                },
                {
                    "date": 1755480736584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,8 +269,9 @@\n       const combinedPrompt = combinePrompts(selectedPromptId, input)\n       const reply = await sendChat(combinedPrompt)\n       \n       addMessage({ role: 'ai', content: reply })\n+      updateLastMessage(reply)\n     } finally {\n       setIsProcessing(false)\n     }\n   }\n"
                },
                {
                    "date": 1755480805950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,31 +251,26 @@\n \n   const isEstimateMessage = (content: string) => {\n     return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n   };\n+  const updateLastMessage = useChatStore((s) => s.updateLastMessage);\n \n   const handleSubmit = async (input: string) => {\n-    if (!input.trim() || isProcessing) return\n-    \n-    // 이미 \"견적서를 보여줘\"를 처리 중이면 \"줘\" 입력을 무시\n-    if (isProcessing && input.trim() === \"줘\") return\n-    \n-    setIsProcessing(true)\n-    \n+    if (!input.trim() || isProcessing) return;\n+  \n+    setIsProcessing(true);\n+  \n+    addMessage({ role: 'user', content: input });\n+    addMessage({ role: 'ai', content: '', isLoading: true });\n+  \n     try {\n-      // 원본 메시지 표시\n-      addMessage({ role: 'user', content: input })\n-      \n-      // 프롬프트 템플릿과 결합하여 AI에 전송\n-      const combinedPrompt = combinePrompts(selectedPromptId, input)\n-      const reply = await sendChat(combinedPrompt)\n-      \n-      addMessage({ role: 'ai', content: reply })\n-      updateLastMessage(reply)\n+      const combinedPrompt = combinePrompts(selectedPromptId, input);\n+      const reply = await sendChat(combinedPrompt);\n+      updateLastMessage(reply); // 마지막 메시지를 응답으로 업데이트\n     } finally {\n-      setIsProcessing(false)\n+      setIsProcessing(false);\n     }\n-  }\n+  };\n \n   const onTestModel = async () => {\n     const r = await testModel()\n     if (r.ok) success(`[${modelName}] OK: ${r.message}`)\n"
                },
                {
                    "date": 1755480813721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,10 +251,10 @@\n \n   const isEstimateMessage = (content: string) => {\n     return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n   };\n-  const updateLastMessage = useChatStore((s) => s.updateLastMessage);\n \n+  \n   const handleSubmit = async (input: string) => {\n     if (!input.trim() || isProcessing) return;\n   \n     setIsProcessing(true);\n"
                },
                {
                    "date": 1755480900712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   white-space: pre-wrap;\n `\n const StyledAiMessage = styled(AiResponseMessage)<{ isFullWidth?: boolean }>`\n   padding: 0;\n-  max-width: ${({ isFullWidth }) => (isFullWidth ? '100%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n+  max-width: ${({ isFullWidth }) => (isFullWidth ? '80%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n@@ -252,9 +252,9 @@\n   const isEstimateMessage = (content: string) => {\n     return content.includes('<script type=\"application/json\" id=\"invoiceData\">');\n   };\n \n-  \n+\n   const handleSubmit = async (input: string) => {\n     if (!input.trim() || isProcessing) return;\n   \n     setIsProcessing(true);\n"
                },
                {
                    "date": 1755480975293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   white-space: pre-wrap;\n `\n const StyledAiMessage = styled(AiResponseMessage)<{ isFullWidth?: boolean }>`\n   padding: 0;\n-  max-width: ${({ isFullWidth }) => (isFullWidth ? '80%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n+  max-width: ${({ isFullWidth }) => (isFullWidth ? '100%' : '80%')}; // 👈 prop에 따라 동적 스타일 적용\n   align-self: flex-start;\n `\n \n const Controls = styled.div`\n"
                },
                {
                    "date": 1755481136045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n `\n \n const EstimateContainer = styled.div`\n   width: 100%;\n-  min-\n+  width:\n   max-width: 1200px;\n   margin: 0 auto;\n `\n \n"
                },
                {
                    "date": 1755481444675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,13 +93,13 @@\n `;\n \n const MainContent = styled.div`\n   flex: 1;\n-  flex-grow: 1;\n+  \n   width: 100%;\n \n   @media (min-width: 1024px) {\n-    // max-width: 800px;\n+    max-width: 800px;\n   }\n `;\n \n const SideContent = styled.div`\n"
                }
            ],
            "date": 1755244638615,
            "name": "Commit-0",
            "content": "\"use client\"\n\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport useAI from '@/hooks/useAI'\nimport { useToast } from '@/components/common/ToastProvider'\nimport { buildSystemInstruction } from '@/ai/systemPrompt'\nimport { useChatStore } from '@/store/chatStore'\nimport BottomInput from '@/components/ai-esti/BottomInput'\n\nconst Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 16px;\n  padding-bottom: calc(76px + env(safe-area-inset-bottom));\n`\n\nconst ChatBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.border};\n  border-radius: 8px;\n  padding: 12px;\n  min-height: 320px;\n`\n\nconst Message = styled.div<{ $role: 'user' | 'ai' }>`\n  align-self: ${({ $role }) => ($role === 'user' ? 'flex-end' : 'flex-start')};\n  background: ${({ $role, theme }) => ($role === 'user' ? theme.accent : theme.surface2)};\n  color: ${({ $role, theme }) => ($role === 'user' ? theme.body : theme.text)};\n  padding: 10px 12px;\n  border-radius: 12px;\n  max-width: 80%;\n  white-space: pre-wrap;\n`\n\nconst Controls = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-bottom: 12px;\n  flex-wrap: wrap;\n`\n\nconst Select = styled.select`\n  height: 36px;\n  border: 1px solid ${({ theme }) => theme.border};\n  background: ${({ theme }) => theme.body};\n  color: ${({ theme }) => theme.text};\n  border-radius: 8px;\n  padding: 0 8px;\n`\n\nconst Button = styled.button`\n  height: 44px;\n  padding: 0 16px;\n  background: ${({ theme }) => theme.accent};\n  color: ${({ theme }) => theme.body};\n  border-radius: 8px;\n  font-weight: 600;\n`\n\nexport default function AiChatPage() {\n  const { modelName, setModelName, generate, sendChat, resetChat, testModel, setSystemInstruction } = useAI('gemini-2.5-flash-lite')\n  const { success, error, info } = useToast()\n  const messages = useChatStore((s) => s.messages)\n  const addMessage = useChatStore((s) => s.addMessage)\n  const clear = useChatStore((s) => s.clear)\n\n  const handleSubmit = async (input: string) => {\n    if (!input.trim()) return\n    addMessage({ role: 'user', content: input })\n    const reply = await sendChat(input)\n    addMessage({ role: 'ai', content: reply })\n  }\n\n  const onQuickGenerate = async () => {\n    const reply = await generate('간단 인사 한 줄만 해줘')\n    addMessage({ role: 'ai', content: reply })\n  }\n\n  const onTestModel = async () => {\n    const r = await testModel()\n    if (r.ok) success(`[${modelName}] OK: ${r.message}`)\n    else error(`[${modelName}] ERROR: ${r.message}`)\n  }\n\n  const applySystem = () => {\n    const sys = buildSystemInstruction({\n      userLocalization: {\n        primary_language_code: 'ko',\n        primary_currency_code: 'KRW',\n        user_country_name: 'South Korea',\n      },\n      dataBlock: '',\n    })\n    setSystemInstruction(sys)\n    info('시스템 프롬프트를 적용했어요.')\n  }\n\n  const clearSystem = () => {\n    setSystemInstruction(undefined)\n    info('시스템 프롬프트를 제거했어요.')\n  }\n\n  return (\n    <Container>\n      <h1 style={{ fontSize: 18, fontWeight: 700, marginBottom: 12 }}>AI 대화</h1>\n      <Controls>\n        <Select value={modelName} onChange={(e) => setModelName(e.target.value as any)}>\n          <option value=\"gemini-2.5-flash\">gemini-2.5-flash</option>\n          <option value=\"gemini-2.5-flash-lite\">gemini-2.5-flash-lite</option>\n          <option value=\"gemini-2.0-flash\">gemini-2.0-flash</option>\n        </Select>\n        <Button type=\"button\" onClick={onTestModel}>모델 테스트</Button>\n        <Button type=\"button\" onClick={onQuickGenerate}>프롬프트 테스트</Button>\n        <Button type=\"button\" onClick={resetChat} style={{ background: '#374151' }}>채팅 세션 초기화</Button>\n        <Button type=\"button\" onClick={clear} style={{ background: '#6b7280' }}>메시지 비우기</Button>\n        <Button type=\"button\" onClick={applySystem} style={{ background: '#2563eb' }}>시스템 적용</Button>\n        <Button type=\"button\" onClick={clearSystem} style={{ background: '#6b7280' }}>시스템 제거</Button>\n      </Controls>\n\n      <ChatBox>\n        {messages.map((m, idx) => (\n          <Message key={idx} $role={m.role}>{m.content}</Message>\n        ))}\n      </ChatBox>\n\n      <BottomInput \n        placeholder=\"메시지를 입력하세요\"\n        onSubmit={handleSubmit}\n      />\n    </Container>\n  )\n}"
        }
    ]
}