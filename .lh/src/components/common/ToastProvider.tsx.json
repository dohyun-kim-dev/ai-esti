{
    "sourceFile": "src/components/common/ToastProvider.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1754635915650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754636070467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,24 @@\n 'use client'\n \n import React, { createContext, useCallback, useContext, useMemo, useState } from 'react'\n import styled, { keyframes } from 'styled-components'\n+import { IoClose, IoCheckmarkCircle, IoAlertCircle, IoInformationCircle } from 'react-icons/io5'\n \n export type ToastType = 'success' | 'error' | 'info'\n \n interface ToastItem {\n   id: number\n   message: string\n   type: ToastType\n+  duration: number\n }\n \n interface ToastContextValue {\n-  show: (message: string, type?: ToastType) => void\n-  success: (message: string) => void\n-  error: (message: string) => void\n-  info: (message: string) => void\n+  show: (message: string, type?: ToastType, durationMs?: number) => void\n+  success: (message: string, durationMs?: number) => void\n+  error: (message: string, durationMs?: number) => void\n+  info: (message: string, durationMs?: number) => void\n }\n \n const ToastContext = createContext<ToastContextValue | null>(null)\n \n@@ -24,72 +26,118 @@\n   from { transform: translate(-50%, 8px); opacity: 0; }\n   to { transform: translate(-50%, 0); opacity: 1; }\n `\n \n+const deplete = keyframes`\n+  from { width: 100%; }\n+  to { width: 0%; }\n+`\n+\n const Container = styled.div`\n   position: fixed;\n   left: 50%;\n   bottom: 96px; /* 푸터 위로 띄움 */\n   transform: translateX(-50%);\n   display: flex;\n   flex-direction: column;\n-  gap: 8px;\n+  gap: 12px;\n   z-index: 2000;\n   pointer-events: none;\n `\n \n-const Toast = styled.div<{ $type: ToastType }>`\n-  min-width: 260px;\n-  max-width: 90vw;\n-  padding: 12px 14px;\n-  border-radius: 8px;\n+const Card = styled.div`\n+  min-width: 300px;\n+  max-width: 92vw;\n   background: ${({ theme }) => theme.surface2};\n   color: ${({ theme }) => theme.text};\n   border: 1px solid ${({ theme }) => theme.border};\n-  box-shadow: 0 8px 24px rgba(0,0,0,0.2);\n-  font-size: 14px;\n+  border-radius: 8px;\n+  box-shadow: 0 8px 24px rgba(0,0,0,0.25);\n   pointer-events: all;\n-  position: relative;\n   animation: ${slideUp} 0.18s ease both;\n+  overflow: hidden;\n+`\n \n-  &::before {\n-    content: '';\n-    position: absolute;\n-    left: 0; top: 0; bottom: 0;\n-    width: 4px;\n-    border-top-left-radius: 8px;\n-    border-bottom-left-radius: 8px;\n-    background: ${({ $type }) => ($type === 'success' ? '#22c55e' : $type === 'error' ? '#ef4444' : '#3391FF')};\n-  }\n+const Row = styled.div`\n+  display: grid;\n+  grid-template-columns: 28px 1fr 28px;\n+  align-items: center;\n+  gap: 10px;\n+  padding: 10px 12px;\n `\n \n+const IconBox = styled.div<{ $type: ToastType }>`\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: ${({ $type }) => ($type === 'success' ? '#6366f1' : $type === 'error' ? '#ef4444' : '#3391FF')};\n+`\n+\n+const Message = styled.div`\n+  font-size: 14px;\n+`\n+\n+const CloseButton = styled.button`\n+  display: inline-flex;\n+  align-items: center;\n+  justify-content: center;\n+  width: 28px;\n+  height: 28px;\n+  color: ${({ theme }) => theme.subtleText};\n+`\n+\n+const Progress = styled.div<{ $type: ToastType; $duration: number }>`\n+  height: 4px;\n+  background: ${({ $type }) => ($type === 'success' ? '#6366f1' : $type === 'error' ? '#ef4444' : '#3391FF')};\n+  animation: ${deplete} linear forwards;\n+  animation-duration: ${({ $duration }) => $duration}ms;\n+`\n+\n+const TYPE_ICON: Record<ToastType, React.ComponentType<{ size?: number }>> = {\n+  success: IoCheckmarkCircle,\n+  error: IoAlertCircle,\n+  info: IoInformationCircle,\n+}\n+\n export function ToastProvider({ children }: { children: React.ReactNode }) {\n   const [toasts, setToasts] = useState<ToastItem[]>([])\n \n   const remove = useCallback((id: number) => {\n     setToasts((prev) => prev.filter((t) => t.id !== id))\n   }, [])\n \n-  const show = useCallback((message: string, type: ToastType = 'info') => {\n+  const show = useCallback((message: string, type: ToastType = 'info', durationMs = 2500) => {\n     const id = Date.now() + Math.random()\n-    setToasts((prev) => [...prev, { id, message, type }])\n-    window.setTimeout(() => remove(id), 2500)\n+    setToasts((prev) => [...prev, { id, message, type, duration: durationMs }])\n+    window.setTimeout(() => remove(id), durationMs)\n   }, [remove])\n \n   const ctx = useMemo<ToastContextValue>(() => ({\n     show,\n-    success: (m) => show(m, 'success'),\n-    error: (m) => show(m, 'error'),\n-    info: (m) => show(m, 'info'),\n+    success: (m, d) => show(m, 'success', d),\n+    error: (m, d) => show(m, 'error', d),\n+    info: (m, d) => show(m, 'info', d),\n   }), [show])\n \n   return (\n     <ToastContext.Provider value={ctx}>\n       {children}\n       <Container>\n-        {toasts.map((t) => (\n-          <Toast key={t.id} $type={t.type}>{t.message}</Toast>\n-        ))}\n+        {toasts.map((t) => {\n+          const Icon = TYPE_ICON[t.type]\n+          return (\n+            <Card key={t.id}>\n+              <Row>\n+                <IconBox $type={t.type}><Icon size={20} /></IconBox>\n+                <Message>{t.message}</Message>\n+                <CloseButton aria-label=\"close\" onClick={() => remove(t.id)}>\n+                  <IoClose size={18} />\n+                </CloseButton>\n+              </Row>\n+              <Progress $type={t.type} $duration={t.duration} />\n+            </Card>\n+          )\n+        })}\n       </Container>\n     </ToastContext.Provider>\n   )\n }\n"
                },
                {
                    "date": 1754636195567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   transform: translateX(-50%);\n   display: flex;\n   flex-direction: column;\n   gap: 12px;\n-  z-index: 2000;\n+  z-index: 9999;\n   pointer-events: none;\n `\n \n const Card = styled.div`\n"
                },
                {
                    "date": 1754636599348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n \n const ToastContext = createContext<ToastContextValue | null>(null)\n \n const slideUp = keyframes`\n-  from { transform: translate(-50%, 8px); opacity: 0; }\n-  to { transform: translate(-50%, 0); opacity: 1; }\n+  from { transform: translateY(8px); opacity: 0; }\n+  to { transform: translateY(0); opacity: 1; }\n `\n \n const deplete = keyframes`\n   from { width: 100%; }\n@@ -33,21 +33,24 @@\n `\n \n const Container = styled.div`\n   position: fixed;\n-  left: 50%;\n-  bottom: 96px; /* 푸터 위로 띄움 */\n-  transform: translateX(-50%);\n+  left: 0;\n+  right: 0;\n+  /* 푸터(80px) + 여백(12px) + iOS 안전영역 고려 */\n+  bottom: calc(80px + env(safe-area-inset-bottom, 0px) + 12px);\n   display: flex;\n   flex-direction: column;\n+  align-items: center;\n   gap: 12px;\n+  padding: 0 12px; /* 모바일에서 좌우 잘림 방지 */\n   z-index: 9999;\n   pointer-events: none;\n `\n \n const Card = styled.div`\n-  min-width: 300px;\n-  max-width: 92vw;\n+  width: 100%;\n+  max-width: 560px; /* 데스크탑 상한 */\n   background: ${({ theme }) => theme.surface2};\n   color: ${({ theme }) => theme.text};\n   border: 1px solid ${({ theme }) => theme.border};\n   border-radius: 8px;\n"
                },
                {
                    "date": 1754636821892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n }\n \n const ToastContext = createContext<ToastContextValue | null>(null)\n \n-const slideUp = keyframes`\n-  from { transform: translateY(8px); opacity: 0; }\n+const slideDown = keyframes`\n+  from { transform: translateY(-8px); opacity: 0; }\n   to { transform: translateY(0); opacity: 1; }\n `\n \n const deplete = keyframes`\n@@ -33,32 +33,29 @@\n `\n \n const Container = styled.div`\n   position: fixed;\n-  left: 0;\n-  right: 0;\n-  /* 푸터(80px) + 여백(12px) + iOS 안전영역 고려 */\n-  bottom: calc(80px + env(safe-area-inset-bottom, 0px) + 12px);\n+  top: calc(env(safe-area-inset-top, 0px) + 12px);\n+  right: 12px;\n   display: flex;\n   flex-direction: column;\n-  align-items: center;\n-  gap: 12px;\n-  padding: 0 12px; /* 모바일에서 좌우 잘림 방지 */\n+  align-items: flex-end;\n+  gap: 8px;\n   z-index: 9999;\n   pointer-events: none;\n `\n \n const Card = styled.div`\n-  width: 100%;\n-  max-width: 560px; /* 데스크탑 상한 */\n-  background: ${({ theme }) => theme.surface2};\n-  color: ${({ theme }) => theme.text};\n-  border: 1px solid ${({ theme }) => theme.border};\n-  border-radius: 8px;\n+  background: #ffffff; /* 라이트/다크 공통 화이트 고정 */\n+  color: #111827; /* neutral-900 */\n+  border: 1px solid #e5e7eb; /* neutral-200 */\n+  border-radius: 4px;\n   box-shadow: 0 8px 24px rgba(0,0,0,0.25);\n   pointer-events: all;\n-  animation: ${slideUp} 0.18s ease both;\n+  animation: ${slideDown} 0.16s ease both;\n   overflow: hidden;\n+  min-width: 280px;\n+  max-width: min(360px, calc(100vw - 24px));\n `\n \n const Row = styled.div`\n   display: grid;\n@@ -76,17 +73,18 @@\n `\n \n const Message = styled.div`\n   font-size: 14px;\n+  line-height: 1.45;\n `\n \n const CloseButton = styled.button`\n   display: inline-flex;\n   align-items: center;\n   justify-content: center;\n   width: 28px;\n   height: 28px;\n-  color: ${({ theme }) => theme.subtleText};\n+  color: #9ca3af; /* neutral-400 */\n `\n \n const Progress = styled.div<{ $type: ToastType; $duration: number }>`\n   height: 4px;\n"
                }
            ],
            "date": 1754635915650,
            "name": "Commit-0",
            "content": "'use client'\n\nimport React, { createContext, useCallback, useContext, useMemo, useState } from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nexport type ToastType = 'success' | 'error' | 'info'\n\ninterface ToastItem {\n  id: number\n  message: string\n  type: ToastType\n}\n\ninterface ToastContextValue {\n  show: (message: string, type?: ToastType) => void\n  success: (message: string) => void\n  error: (message: string) => void\n  info: (message: string) => void\n}\n\nconst ToastContext = createContext<ToastContextValue | null>(null)\n\nconst slideUp = keyframes`\n  from { transform: translate(-50%, 8px); opacity: 0; }\n  to { transform: translate(-50%, 0); opacity: 1; }\n`\n\nconst Container = styled.div`\n  position: fixed;\n  left: 50%;\n  bottom: 96px; /* 푸터 위로 띄움 */\n  transform: translateX(-50%);\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  z-index: 2000;\n  pointer-events: none;\n`\n\nconst Toast = styled.div<{ $type: ToastType }>`\n  min-width: 260px;\n  max-width: 90vw;\n  padding: 12px 14px;\n  border-radius: 8px;\n  background: ${({ theme }) => theme.surface2};\n  color: ${({ theme }) => theme.text};\n  border: 1px solid ${({ theme }) => theme.border};\n  box-shadow: 0 8px 24px rgba(0,0,0,0.2);\n  font-size: 14px;\n  pointer-events: all;\n  position: relative;\n  animation: ${slideUp} 0.18s ease both;\n\n  &::before {\n    content: '';\n    position: absolute;\n    left: 0; top: 0; bottom: 0;\n    width: 4px;\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    background: ${({ $type }) => ($type === 'success' ? '#22c55e' : $type === 'error' ? '#ef4444' : '#3391FF')};\n  }\n`\n\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\n  const [toasts, setToasts] = useState<ToastItem[]>([])\n\n  const remove = useCallback((id: number) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id))\n  }, [])\n\n  const show = useCallback((message: string, type: ToastType = 'info') => {\n    const id = Date.now() + Math.random()\n    setToasts((prev) => [...prev, { id, message, type }])\n    window.setTimeout(() => remove(id), 2500)\n  }, [remove])\n\n  const ctx = useMemo<ToastContextValue>(() => ({\n    show,\n    success: (m) => show(m, 'success'),\n    error: (m) => show(m, 'error'),\n    info: (m) => show(m, 'info'),\n  }), [show])\n\n  return (\n    <ToastContext.Provider value={ctx}>\n      {children}\n      <Container>\n        {toasts.map((t) => (\n          <Toast key={t.id} $type={t.type}>{t.message}</Toast>\n        ))}\n      </Container>\n    </ToastContext.Provider>\n  )\n}\n\nexport function useToast() {\n  const ctx = useContext(ToastContext)\n  if (!ctx) throw new Error('useToast must be used within ToastProvider')\n  return ctx\n}\n"
        }
    ]
}