{
    "sourceFile": "src/components/ai-esti/BottomInput.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754553247065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754638296095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,233 @@\n+\"use client\";\n+\n+import React, { useState, useRef, useEffect } from 'react';\n+import styled, { useTheme } from 'styled-components';\n+import Icon from './Icon';\n+import TextareaAutosize from 'react-textarea-autosize';\n+import { customScrollbar } from '@/styles/commonStyles';\n+\n+const InputWrapper = styled.div`\n+  position: fixed;\n+  bottom: 0;\n+  left: 0;\n+  right: 0;\n+  padding: 12px 16px;\n+  background-color: ${({ theme }) => theme.body};\n+  border-top: 1px solid ${({ theme }) => theme.border};\n+  z-index: 1000;\n+width: 100%;\n+  @media (min-width: 1024px) {\n+    padding: 16px;\n+    max-width: 100vw;\n+    left: 50%;\n+    transform: translateX(-50%);\n+      z-index: 1000;\n+\n+  }\n+`;\n+\n+const InputContainer = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 12px;\n+  padding: 12px 16px;\n+  background-color: ${({ theme }) => theme.body};\n+  border-radius: 50px;\n+  border: 1px solid ${({ theme }) => theme.border};\n+  width: 100%;\n+  min-height: 56px;\n+  transition: min-height 0.2s ease-in-out;\n+  \n+\n+  @media (min-width: 1024px) {\n+    max-width: 1024px;\n+    margin: 0 auto;\n+  }\n+\n+`;\n+\n+const IconButton = styled.button`\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  padding: 8px 0;\n+  background: none;\n+  border: none;\n+  cursor: pointer;\n+  flex-shrink: 0;\n+  \n+  &:hover {\n+    opacity: 0.8;\n+  }\n+`;\n+\n+const Input = styled.textarea`\n+  flex: 1;\n+  border: none;\n+  background: none;\n+  font-size: 14px;\n+  color: ${({ theme }) => theme.text};\n+  outline: none;\n+  padding: 8px 0;\n+  resize: none;\n+  min-height: 24px;\n+  line-height: 24px;\n+  overflow-y: auto;\n+  scrollbar-width: thin;\n+  scrollbar-color: ${({ theme }) => `${theme.border} transparent`};\n+\n+  &::placeholder {\n+    color: ${({ theme }) => theme.subtleText};\n+    white-space: pre-line;\n+  }\n+\n+  &::-webkit-scrollbar {\n+    width: 6px;\n+  }\n+\n+  &::-webkit-scrollbar-track {\n+    background: transparent;\n+  }\n+\n+  &::-webkit-scrollbar-thumb {\n+    background-color: ${({ theme }) => theme.border};\n+    border-radius: 3px;\n+  }\n+`;\n+\n+\n+const AutoSizeInput = styled(TextareaAutosize)`\n+  flex: 1;\n+  display:flex;\n+  justify-content:center;\n+  align-items:center;\n+  background-color: transparent;\n+  border: none;\n+  outline: none;\n+  color: ${({ theme }) => theme.text};\n+  resize: none; // 크기 조절 비활성화\n+  overflow-y: auto; // 내용 넘칠 경우 스크롤 (auto-resize와 함께 작동)\n+  min-height: 21px; // 최소 높이 (body2의 line-height * font-size 근사값)\n+  max-height: 300px; // 최대 높이 제한 (대략 10줄 = 21px * 10)\n+  padding-top: 0; // 내부 패딩 조정\n+  padding-bottom: 0;\n+  line-height: 1.5; // 줄 간격\n+  font-family: inherit; // 폰트 상속\n+\n+\n+  &::placeholder {\n+    color: ${({ theme }) => theme.subtleText};\n+  }\n+\n+  &:disabled {\n+    cursor: not-allowed;\n+    color: ${({ theme }) => theme.subtleText};\n+  }\n+\n+\n+\n+  /* 스크롤바 스타일 추가 */\n+   ${customScrollbar({\n+     trackColor: '#262528', // 스크롤바 배경색\n+  })\n+\n+}\n+`;\n+\n+interface BottomInputProps {\n+  placeholder?: string;\n+  onSubmit?: (value: string) => void;\n+}\n+\n+const BottomInput: React.FC<BottomInputProps> = ({\n+  placeholder = \"서비스 종류와 주요 기능, 예상 기간/예산을 입력! \\ n예시: '온라인 쇼핑몰, 결제/배송/회원가입\",\n+  onSubmit\n+}) => {\n+  const [value, setValue] = useState('');\n+  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);\n+  const inputRef = useRef<HTMLInputElement>(null);\n+  const theme = useTheme();\n+  const isLightTheme = theme.body === '#FFFFFF';\n+\n+  useEffect(() => {\n+    const handleResize = () => {\n+      if (document.activeElement === inputRef.current) {\n+        const visualViewport = window.visualViewport;\n+        if (visualViewport) {\n+          const isKeyboard = visualViewport.height < window.innerHeight;\n+          setIsKeyboardVisible(isKeyboard);\n+        }\n+      }\n+    };\n+\n+    window.visualViewport?.addEventListener('resize', handleResize);\n+    return () => window.visualViewport?.removeEventListener('resize', handleResize);\n+  }, []);\n+\n+  const handleSubmit = () => {\n+    if (value.trim() && onSubmit) {\n+      onSubmit(value.trim());\n+      setValue('');\n+    }\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter') {\n+      handleSubmit();\n+    }\n+  };\n+\n+  return (\n+    <InputWrapper style={{ \n+      bottom: isKeyboardVisible ? window.visualViewport?.height - window.innerHeight : 0 \n+    }}>\n+      <InputContainer>\n+        <IconButton type=\"button\">\n+          <Icon \n+            src={isLightTheme ? \"/ai-estimate/add_image.png\" : \"/ai-estimate/add_image_dark.png\"} \n+            width={36}\n+            height={36} \n+          />\n+        </IconButton>\n+                  {/* <Input\n+            ref={inputRef}\n+            value={value}\n+            onChange={(e) => setValue(e.target.value)}\n+            onKeyDown={(e) => {\n+              if (e.key === 'Enter' && !e.shiftKey) {\n+                e.preventDefault();\n+                handleSubmit();\n+              }\n+            }}\n+            placeholder={placeholder}\n+            rows={1}\n+          /> */}\n+           <AutoSizeInput\n+          minRows={1}\n+          maxRows={12}\n+          placeholder={placeholder}\n+          // disabled={!isFreeFormMode || loading}\n+          value={value}\n+          onChange={(e) => setValue(e.target.value)}\n+          onKeyDown={(e) => {\n+            if (e.key === 'Enter' && !e.shiftKey) {\n+              e.preventDefault();\n+              handleSubmit();\n+            }\n+          }}\n+          // onKeyDown={handleKeyDown}\n+          // onPaste={handlePaste}\n+        />\n+        <IconButton type=\"button\" onClick={handleSubmit}>\n+          <Icon \n+            src={isLightTheme ? \"/ai-estimate/enter.png\" : \"/ai-estimate/enter_dark.png\"} \n+            width={36} \n+            height={36} \n+          />\n+        </IconButton>\n+      </InputContainer>\n+    </InputWrapper>\n+  );\n+};\n+\n+export default BottomInput;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754638306307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,9 @@\n     padding: 16px;\n     max-width: 100vw;\n     left: 50%;\n     transform: translateX(-50%);\n-      z-index: 1000;\n-\n+    \n   }\n `;\n \n const InputContainer = styled.div`\n@@ -229,236 +228,5 @@\n     </InputWrapper>\n   );\n };\n \n-export default BottomInput;\n-\"use client\";\n-\n-import React, { useState, useRef, useEffect } from 'react';\n-import styled, { useTheme } from 'styled-components';\n-import Icon from './Icon';\n-import TextareaAutosize from 'react-textarea-autosize';\n-import { customScrollbar } from '@/styles/commonStyles';\n-\n-const InputWrapper = styled.div`\n-  position: fixed;\n-  bottom: 0;\n-  left: 0;\n-  right: 0;\n-  padding: 12px 16px;\n-  background-color: ${({ theme }) => theme.body};\n-  border-top: 1px solid ${({ theme }) => theme.border};\n-  z-index: 1000;\n-width: 100%;\n-  @media (min-width: 1024px) {\n-    padding: 16px;\n-    max-width: 100vw;\n-    left: 50%;\n-    transform: translateX(-50%);\n-  }\n-`;\n-\n-const InputContainer = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 12px;\n-  padding: 12px 16px;\n-  background-color: ${({ theme }) => theme.body};\n-  border-radius: 50px;\n-  border: 1px solid ${({ theme }) => theme.border};\n-  width: 100%;\n-  min-height: 56px;\n-  transition: min-height 0.2s ease-in-out;\n-  \n-\n-  @media (min-width: 1024px) {\n-    max-width: 1024px;\n-    margin: 0 auto;\n-  }\n-\n-`;\n-\n-const IconButton = styled.button`\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  padding: 8px 0;\n-  background: none;\n-  border: none;\n-  cursor: pointer;\n-  flex-shrink: 0;\n-  \n-  &:hover {\n-    opacity: 0.8;\n-  }\n-`;\n-\n-const Input = styled.textarea`\n-  flex: 1;\n-  border: none;\n-  background: none;\n-  font-size: 14px;\n-  color: ${({ theme }) => theme.text};\n-  outline: none;\n-  padding: 8px 0;\n-  resize: none;\n-  min-height: 24px;\n-  line-height: 24px;\n-  overflow-y: auto;\n-  scrollbar-width: thin;\n-  scrollbar-color: ${({ theme }) => `${theme.border} transparent`};\n-\n-  &::placeholder {\n-    color: ${({ theme }) => theme.subtleText};\n-    white-space: pre-line;\n-  }\n-\n-  &::-webkit-scrollbar {\n-    width: 6px;\n-  }\n-\n-  &::-webkit-scrollbar-track {\n-    background: transparent;\n-  }\n-\n-  &::-webkit-scrollbar-thumb {\n-    background-color: ${({ theme }) => theme.border};\n-    border-radius: 3px;\n-  }\n-`;\n-\n-\n-const AutoSizeInput = styled(TextareaAutosize)`\n-  flex: 1;\n-  display:flex;\n-  justify-content:center;\n-  align-items:center;\n-  background-color: transparent;\n-  border: none;\n-  outline: none;\n-  color: ${({ theme }) => theme.text};\n-  resize: none; // 크기 조절 비활성화\n-  overflow-y: auto; // 내용 넘칠 경우 스크롤 (auto-resize와 함께 작동)\n-  min-height: 21px; // 최소 높이 (body2의 line-height * font-size 근사값)\n-  max-height: 300px; // 최대 높이 제한 (대략 10줄 = 21px * 10)\n-  padding-top: 0; // 내부 패딩 조정\n-  padding-bottom: 0;\n-  line-height: 1.5; // 줄 간격\n-  font-family: inherit; // 폰트 상속\n-\n-\n-  &::placeholder {\n-    color: ${({ theme }) => theme.subtleText};\n-  }\n-\n-  &:disabled {\n-    cursor: not-allowed;\n-    color: ${({ theme }) => theme.subtleText};\n-  }\n-\n-\n-\n-  /* 스크롤바 스타일 추가 */\n-   ${customScrollbar({\n-     trackColor: '#262528', // 스크롤바 배경색\n-  })\n-\n-}\n-`;\n-\n-interface BottomInputProps {\n-  placeholder?: string;\n-  onSubmit?: (value: string) => void;\n-}\n-\n-const BottomInput: React.FC<BottomInputProps> = ({\n-  placeholder = \"서비스 종류와 주요 기능, 예상 기간/예산을 입력! \\ n예시: '온라인 쇼핑몰, 결제/배송/회원가입\",\n-  onSubmit\n-}) => {\n-  const [value, setValue] = useState('');\n-  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);\n-  const inputRef = useRef<HTMLInputElement>(null);\n-  const theme = useTheme();\n-  const isLightTheme = theme.body === '#FFFFFF';\n-\n-  useEffect(() => {\n-    const handleResize = () => {\n-      if (document.activeElement === inputRef.current) {\n-        const visualViewport = window.visualViewport;\n-        if (visualViewport) {\n-          const isKeyboard = visualViewport.height < window.innerHeight;\n-          setIsKeyboardVisible(isKeyboard);\n-        }\n-      }\n-    };\n-\n-    window.visualViewport?.addEventListener('resize', handleResize);\n-    return () => window.visualViewport?.removeEventListener('resize', handleResize);\n-  }, []);\n-\n-  const handleSubmit = () => {\n-    if (value.trim() && onSubmit) {\n-      onSubmit(value.trim());\n-      setValue('');\n-    }\n-  };\n-\n-  const handleKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter') {\n-      handleSubmit();\n-    }\n-  };\n-\n-  return (\n-    <InputWrapper style={{ \n-      bottom: isKeyboardVisible ? window.visualViewport?.height - window.innerHeight : 0 \n-    }}>\n-      <InputContainer>\n-        <IconButton type=\"button\">\n-          <Icon \n-            src={isLightTheme ? \"/ai-estimate/add_image.png\" : \"/ai-estimate/add_image_dark.png\"} \n-            width={36}\n-            height={36} \n-          />\n-        </IconButton>\n-                  {/* <Input\n-            ref={inputRef}\n-            value={value}\n-            onChange={(e) => setValue(e.target.value)}\n-            onKeyDown={(e) => {\n-              if (e.key === 'Enter' && !e.shiftKey) {\n-                e.preventDefault();\n-                handleSubmit();\n-              }\n-            }}\n-            placeholder={placeholder}\n-            rows={1}\n-          /> */}\n-           <AutoSizeInput\n-          minRows={1}\n-          maxRows={12}\n-          placeholder={placeholder}\n-          // disabled={!isFreeFormMode || loading}\n-          value={value}\n-          onChange={(e) => setValue(e.target.value)}\n-          onKeyDown={(e) => {\n-            if (e.key === 'Enter' && !e.shiftKey) {\n-              e.preventDefault();\n-              handleSubmit();\n-            }\n-          }}\n-          // onKeyDown={handleKeyDown}\n-          // onPaste={handlePaste}\n-        />\n-        <IconButton type=\"button\" onClick={handleSubmit}>\n-          <Icon \n-            src={isLightTheme ? \"/ai-estimate/enter.png\" : \"/ai-estimate/enter_dark.png\"} \n-            width={36} \n-            height={36} \n-          />\n-        </IconButton>\n-      </InputContainer>\n-    </InputWrapper>\n-  );\n-};\n-\n export default BottomInput;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1754553247065,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled, { useTheme } from 'styled-components';\nimport Icon from './Icon';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { customScrollbar } from '@/styles/commonStyles';\n\nconst InputWrapper = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 12px 16px;\n  background-color: ${({ theme }) => theme.body};\n  border-top: 1px solid ${({ theme }) => theme.border};\n  z-index: 1000;\nwidth: 100%;\n  @media (min-width: 1024px) {\n    padding: 16px;\n    max-width: 100vw;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 16px;\n  background-color: ${({ theme }) => theme.body};\n  border-radius: 50px;\n  border: 1px solid ${({ theme }) => theme.border};\n  width: 100%;\n  min-height: 56px;\n  transition: min-height 0.2s ease-in-out;\n  \n\n  @media (min-width: 1024px) {\n    max-width: 1024px;\n    margin: 0 auto;\n  }\n\n`;\n\nconst IconButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 8px 0;\n  background: none;\n  border: none;\n  cursor: pointer;\n  flex-shrink: 0;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst Input = styled.textarea`\n  flex: 1;\n  border: none;\n  background: none;\n  font-size: 14px;\n  color: ${({ theme }) => theme.text};\n  outline: none;\n  padding: 8px 0;\n  resize: none;\n  min-height: 24px;\n  line-height: 24px;\n  overflow-y: auto;\n  scrollbar-width: thin;\n  scrollbar-color: ${({ theme }) => `${theme.border} transparent`};\n\n  &::placeholder {\n    color: ${({ theme }) => theme.subtleText};\n    white-space: pre-line;\n  }\n\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: ${({ theme }) => theme.border};\n    border-radius: 3px;\n  }\n`;\n\n\nconst AutoSizeInput = styled(TextareaAutosize)`\n  flex: 1;\n  display:flex;\n  justify-content:center;\n  align-items:center;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  color: ${({ theme }) => theme.text};\n  resize: none; // 크기 조절 비활성화\n  overflow-y: auto; // 내용 넘칠 경우 스크롤 (auto-resize와 함께 작동)\n  min-height: 21px; // 최소 높이 (body2의 line-height * font-size 근사값)\n  max-height: 300px; // 최대 높이 제한 (대략 10줄 = 21px * 10)\n  padding-top: 0; // 내부 패딩 조정\n  padding-bottom: 0;\n  line-height: 1.5; // 줄 간격\n  font-family: inherit; // 폰트 상속\n\n\n  &::placeholder {\n    color: ${({ theme }) => theme.subtleText};\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    color: ${({ theme }) => theme.subtleText};\n  }\n\n\n\n  /* 스크롤바 스타일 추가 */\n   ${customScrollbar({\n     trackColor: '#262528', // 스크롤바 배경색\n  })\n\n}\n`;\n\ninterface BottomInputProps {\n  placeholder?: string;\n  onSubmit?: (value: string) => void;\n}\n\nconst BottomInput: React.FC<BottomInputProps> = ({\n  placeholder = \"서비스 종류와 주요 기능, 예상 기간/예산을 입력! \\ n예시: '온라인 쇼핑몰, 결제/배송/회원가입\",\n  onSubmit\n}) => {\n  const [value, setValue] = useState('');\n  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const theme = useTheme();\n  const isLightTheme = theme.body === '#FFFFFF';\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (document.activeElement === inputRef.current) {\n        const visualViewport = window.visualViewport;\n        if (visualViewport) {\n          const isKeyboard = visualViewport.height < window.innerHeight;\n          setIsKeyboardVisible(isKeyboard);\n        }\n      }\n    };\n\n    window.visualViewport?.addEventListener('resize', handleResize);\n    return () => window.visualViewport?.removeEventListener('resize', handleResize);\n  }, []);\n\n  const handleSubmit = () => {\n    if (value.trim() && onSubmit) {\n      onSubmit(value.trim());\n      setValue('');\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSubmit();\n    }\n  };\n\n  return (\n    <InputWrapper style={{ \n      bottom: isKeyboardVisible ? window.visualViewport?.height - window.innerHeight : 0 \n    }}>\n      <InputContainer>\n        <IconButton type=\"button\">\n          <Icon \n            src={isLightTheme ? \"/ai-estimate/add_image.png\" : \"/ai-estimate/add_image_dark.png\"} \n            width={36}\n            height={36} \n          />\n        </IconButton>\n                  {/* <Input\n            ref={inputRef}\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleSubmit();\n              }\n            }}\n            placeholder={placeholder}\n            rows={1}\n          /> */}\n           <AutoSizeInput\n          minRows={1}\n          maxRows={12}\n          placeholder={placeholder}\n          // disabled={!isFreeFormMode || loading}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              handleSubmit();\n            }\n          }}\n          // onKeyDown={handleKeyDown}\n          // onPaste={handlePaste}\n        />\n        <IconButton type=\"button\" onClick={handleSubmit}>\n          <Icon \n            src={isLightTheme ? \"/ai-estimate/enter.png\" : \"/ai-estimate/enter_dark.png\"} \n            width={36} \n            height={36} \n          />\n        </IconButton>\n      </InputContainer>\n    </InputWrapper>\n  );\n};\n\nexport default BottomInput;"
        }
    ]
}