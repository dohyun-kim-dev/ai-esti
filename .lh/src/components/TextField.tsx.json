{
    "sourceFile": "src/components/TextField.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755150464472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755150506178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import { InputStyles, LabelStyles } from '@/constants/componentConstants';\n \n const Label = styled.label<{ $labelPosition: 'vertical' | 'horizontal' }>`\n   margin-left: 8px;\n-   margin-left: ${({ $labelPosition }) => ($labelPosition === '8p' ? '1' : 'none')};\n+   margin-left: ${({ $labelPosition }) => ($labelPosition === '8pc' ? '1' : 'none')};\n   flex: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '1' : 'none')};\n `;\n \n const Container = styled.div<{ $device: DeviceType; $labelPosition: 'vertical' | 'horizontal' }>`\n"
                },
                {
                    "date": 1755150542006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import { InputStyles, LabelStyles } from '@/constants/componentConstants';\n \n const Label = styled.label<{ $labelPosition: 'vertical' | 'horizontal' }>`\n    margin-left: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '8px' : '0')};\n-      margin-b: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '8px' : '0')};\n+      margin-bottom: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '8px' : '0')};\n \n   flex: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '1' : 'none')};\n `;\n \n@@ -185,5 +185,9 @@\n             </>\n           )}\n         </InputFieldWrapper>\n \n-        {errorMess\n\\ No newline at end of file\n+        {errorMessage && <ErrorText>{errorMessage}</ErrorText>}\n+      </InputWrapper>\n+    </Container>\n+  );\n+};\n"
                }
            ],
            "date": 1755150464472,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { AppColors } from '@/styles/colors';\nimport { useDevice } from '@/contexts/DeviceContext';\nimport type { DeviceType } from '@/types/device';\nimport { StyledInput, StyledTextarea } from '@/elements/InputElement';\nimport { InputStyles, LabelStyles } from '@/constants/componentConstants';\n\nconst Label = styled.label<{ $labelPosition: 'vertical' | 'horizontal' }>`\n  margin-left:  ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '1' : 'none')};\n  flex: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '1' : 'none')};\n`;\n\nconst Container = styled.div<{ $device: DeviceType; $labelPosition: 'vertical' | 'horizontal' }>`\n  display: flex;\n  flex-direction: ${({ $labelPosition }) => ($labelPosition === 'vertical' ? 'column' : 'row')};\n  width: 100%;\n  padding: ${({ $device }) => InputStyles.containerPadding[$device]};\n  align-items: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? 'center' : 'flex-start')};\n`;\n\nconst InputWrapper = styled.div<{ $labelPosition: 'vertical' | 'horizontal' }>`\n  display: flex;\n  flex-direction: column;\n  flex: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '5' : '1')};\n  width: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? 'auto' : '100%')};\n`;\n\nconst InputFieldWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n`;\n\nconst ErrorText = styled.span`\n  color: ${AppColors.error};\n  font-size: 12px;\n  margin-top: 4px;\n  margin-left: 4px;\n`;\n\nconst SuffixIconWrapper = styled.div<{\n  $isPasswordVisible?: boolean;\n  $device: DeviceType;\n}>`\n  position: absolute;\n  right: ${({ $device }) => InputStyles.suffixIconRight[$device]};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  color: ${({ $isPasswordVisible }) =>\n    $isPasswordVisible ? AppColors.iconPrimary : AppColors.iconDisabled};\n`;\n\ninterface TextFieldProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  placeholder?: string;\n  errorMessage?: string;\n  showSuffixIcon?: boolean;\n  isPasswordField?: boolean;\n  readOnly?: boolean;\n\n  multiline?: boolean;\n  minLines?: number;\n  maxLines?: number;\n\n  radius?: string;\n  fontSize?: string;\n  height?: string;\n  padding?: string;\n  paddingRight?: string;\n  label?: string;\n  labelColor?: string;\n  $labelPosition?: 'vertical' | 'horizontal';\n\n  $inputBackgroundColor?: string;\n  $placeholderColor?: string;\n  $textColor?: string;\n  $borderColor?: string;\n\n  autoComplete?: string;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({\n  value,\n  onChange,\n  placeholder,\n  errorMessage,\n  showSuffixIcon,\n  isPasswordField = false,\n  readOnly = false,\n\n  multiline = false,\n  minLines,\n  maxLines,\n\n  radius,\n  fontSize,\n  height,\n  padding,\n  paddingRight,\n  label,\n  labelColor,\n  $labelPosition = 'vertical',\n\n  $inputBackgroundColor,\n  $placeholderColor,\n  $textColor,\n  $borderColor,\n\n  autoComplete,\n}) => {\n  const device = useDevice();\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const resolvedInputType = isPasswordField && !isPasswordVisible ? 'password' : 'text';\n\n  const handleToggleVisibility = () => {\n    setIsPasswordVisible((prev) => !prev);\n  };\n\n  const commonProps = {\n    value,\n    onChange,\n    placeholder,\n    radius,\n    fontSize,\n    height,\n    padding,\n    paddingRight,\n    readOnly,\n    $hasSuffix: !!(showSuffixIcon && isPasswordField),\n    $device: device,\n    autoComplete,\n    $inputBackgroundColor,\n    $placeholderColor,\n    $textColor,\n    $borderColor,\n  };\n\n  return (\n    <Container $device={device} $labelPosition={$labelPosition}>\n      {label && (\n        <Label\n          $labelPosition={$labelPosition}\n          style={{\n            fontSize: LabelStyles.fontSize[device],\n            color: labelColor || LabelStyles.color,\n          }}\n        >\n          {label}\n        </Label>\n      )}\n\n      <InputWrapper $labelPosition={$labelPosition}>\n        <InputFieldWrapper>\n          {multiline ? (\n            <StyledTextarea\n              {...commonProps}\n              rows={minLines || 3}\n              resize=\"vertical\"\n            />\n          ) : (\n            <>\n              <StyledInput\n                {...commonProps}\n                type={resolvedInputType}\n              />\n              {showSuffixIcon && isPasswordField && (\n                <SuffixIconWrapper\n                  onClick={handleToggleVisibility}\n                  $isPasswordVisible={isPasswordVisible}\n                  $device={device}\n                >\n                  {isPasswordVisible ? <VisibilityOff /> : <Visibility />}\n                </SuffixIconWrapper>\n              )}\n            </>\n          )}\n        </InputFieldWrapper>\n\n        {errorMessage && <ErrorText>{errorMessage}</ErrorText>}\n      </InputWrapper>\n    </Container>\n  );\n};\n"
        }
    ]
}