{
    "sourceFile": "src/components/CustomList/GenericListUI.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1755075617003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755137884438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,8 +413,14 @@\n     )}\n   </LeftControls>\n \n   <RightControls>\n+\n+  {addButtonLabel && (\n+      <PrimaryButton $themeMode={themeMode} onClick={addButton.onClick}>\n+        {addButtonLabel}\n+      </PrimaryButton>\n+    )}\n     {isShowExcelTemplate && (\n       <PrimaryButton $themeMode={themeMode} onClick={() => console.log(\"엑셀 템플릿\")}>\n         엑셀 템플릿\n       </PrimaryButton>\n"
                },
                {
                    "date": 1755137917339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -415,9 +415,9 @@\n \n   <RightControls>\n \n   {addButtonLabel && (\n-      <PrimaryButton $themeMode={themeMode} onClick={addButton.onClick}>\n+      <PrimaryButton $themeMode={themeMode} onClick={onAdd?.onClick}>\n         {addButtonLabel}\n       </PrimaryButton>\n     )}\n     {isShowExcelTemplate && (\n"
                },
                {
                    "date": 1755138102414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -415,9 +415,9 @@\n \n   <RightControls>\n \n   {addButtonLabel && (\n-      <PrimaryButton $themeMode={themeMode} onClick={onAdd?.onClick}>\n+      <PrimaryButton $themeMode={themeMode} onClick={() => console.log(\"등록 클릭됨\")}>\n         {addButtonLabel}\n       </PrimaryButton>\n     )}\n     {isShowExcelTemplate && (\n"
                },
                {
                    "date": 1755138568126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n   title: React.ReactNode;\n   columns: ColumnDefinition<T>[];\n   fetchData: (params: FetchParams) => Promise<FetchResult<T>>;\n   excelFileName?: string;\n-\n+onAdd\n   // 새로 변경된 props\n   addButtonLabel?: string;\n   deleteBtnCallBack?: () => void;\n   isShowExcelTemplate?: boolean;\n"
                }
            ],
            "date": 1755075617003,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport React, {useImperativeHandle, forwardRef,  useState, useEffect, useMemo, useCallback, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport dayjs from \"dayjs\";\nimport * as XLSX from \"xlsx\";\nimport GenericDataTable, { ColumnDefinition } from \"./GenericDataTable\"; // 경로 확인\nimport GenericDateRangePicker from \"./GenericDateRangePicker\"; // 경로 확인\nimport DropdownCustom from \"./DropdownCustom\";\nimport { THEME_COLORS, ThemeMode } from \"@/styles/theme_colors\";\nimport ActionButton from \"../ActionButton\";\n\n\n\n\n// Helper: getPropertyValue (기존 유지, UserListPage 버전 개선 적용)\nconst getPropertyValue = <T extends object>(obj: T, path: keyof T | string): any => {\n  if (!obj) return undefined;\n  if (typeof path === \"string\" && path in obj) {\n    return obj[path as keyof T];\n  }\n  if (typeof path === \"number\" || typeof path === \"symbol\") {\n    return obj[path as keyof T];\n  }\n  if (typeof path === \"string\" && path.includes(\".\")) {\n    const keys = path.split(\".\");\n    let value: any = obj;\n    for (const key of keys) {\n      if (value === null || typeof value !== \"object\" || !(key in value)) {\n        return undefined;\n      }\n      value = value[key];\n    }\n    return value;\n  }\n  return undefined;\n};\n\n// --- Component Props ---\ninterface BaseRecord {\n  id?: string | number; // 기본 ID 필드 가정 (keyExtractor 대체용)\n  index?: number; // index 필드도 고려\n  [key: string]: any; // 다른 필드 허용\n}\n\n// API Fetch 함수 타입 정의 (수정: 페이지/정렬 파라미터 제거)\nexport interface FetchParams {\n  fromDate?: string; // Optional\n  toDate?: string; // Optional\n  keyword?: string; // Optional\n}\n\nexport interface FetchResult<T> {\n  data: T[];\n  totalItems: number; // 필터링된 총 아이템 수\n  allItems?: number; // 필터링 전 전체 아이템 수 (Optional)\n}\n\n// 초기 상태 타입\ninterface InitialState {\n  page?: number;\n  size?: number;\n  sortKey?: string | null;\n  sortOrder?: \"asc\" | \"desc\";\n  fromDate?: string;\n  toDate?: string;\n  keyword?: string;\n}\n\n// GenericListUI Props 정의 (수정)\ninterface GenericListUIProps<T extends BaseRecord> {\n  title: React.ReactNode;\n  columns: ColumnDefinition<T>[];\n  fetchData: (params: FetchParams) => Promise<FetchResult<T>>;\n  excelFileName?: string;\n\n  // 새로 변경된 props\n  addButtonLabel?: string;\n  deleteBtnCallBack?: () => void;\n  isShowExcelTemplate?: boolean;\n  excelUploadBtnCallBack?: (() => void);\n\n  initialState?: InitialState;\n  keyExtractor?: (item: T, index: number) => string | number;\n  enableSearch?: boolean;\n  searchPlaceholder?: string;\n  enableDateFilter?: boolean;\n  dateRangeOptions?: string[];\n  itemsPerPageOptions?: number[];\n  themeMode?: ThemeMode;\n  onRowClick?: (item: T, rowIndex: number) => void;\n  renderTabs?: () => React.ReactNode;\n}\n\n// 등록, 템플릿 버튼 (밝은 톤)\nconst PrimaryButton = styled(ActionButton)<{ $themeMode: ThemeMode }>`\n  width: 110px;\n  height: 40px;\n  background: ${({ $themeMode }) =>\n    $themeMode === 'light'\n      ? THEME_COLORS.light.primary\n      : THEME_COLORS.dark.buttonText};\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? '#f8f8f8' : THEME_COLORS.dark.primary};\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#e8e8e8\" : \"#555555\")};\n  }\n`;\n\n// 삭제, 업로드 버튼 (어두운 톤)\nconst SecondaryButton = styled(ActionButton)<{ $themeMode: ThemeMode }>`\n  width: 110px;\n  height: 40px;\n  background: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#eeeeee\" : \"#333333\")};\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#333333\" : \"#eeeeee\")};\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#dddddd\" : \"#555555\")};\n  }\n`;\n\n// 다운로드 버튼 (특정 색)\nconst DownloadButton = styled(ActionButton)`\n  width: 110px;\n  height: 40px;\n  background: #51815a;\n  color: white;\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: #3e6b47;\n  }\n`;\n\n\n// --- The Component --- (상태 및 로직 대폭 수정)\nconst GenericListUIInner = <T extends BaseRecord>(\n  {\n    title,\n    columns,\n    fetchData,\n    excelFileName = \"DataExport\",\n    initialState = {},\n    keyExtractor,\n    enableSearch = true,\n    searchPlaceholder = \"검색어를 입력해주세요\",\n    enableDateFilter = true,\n    itemsPerPageOptions = [12, 30, 50, 100],\n    themeMode = \"light\",\n    onRowClick,\n    renderTabs,\n    addButtonLabel = \"추가\",\n    isShowExcelTemplate,\n    deleteBtnCallBack,\n    excelUploadBtnCallBack,\n  }: GenericListUIProps<T>,\n  ref: React.Ref<{ refetch: () => void }>\n) => {\n\n  // --- 내부 상태 --- (데이터 상태 추가, API 호출 관련 상태 제거)\n  const [allData, setAllData] = useState<T[]>([]); // API로부터 받은 전체 데이터\n  const [totalItems, setTotalItems] = useState(0); // 필터링된 아이템 수 (API 메타데이터 기준)\n  const [allItems, setAllItems] = useState<number | undefined>(undefined); // 전체 아이템 수 (API 메타데이터 기준)\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // UI 제어 상태 (페이지네이션, 정렬, 필터)\n  const [currentPage, setCurrentPage] = useState(initialState.page ?? 1);\n  const [itemsPerPage, setItemsPerPage] = useState(initialState.size ?? itemsPerPageOptions[0] ?? 12);\n  const [sortKey, setSortKey] = useState<string | null>(initialState.sortKey ?? null); // 기본 정렬 없음\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(initialState.sortOrder ?? \"asc\");\n  const [fromDate, setFromDate] = useState(initialState.fromDate ?? dayjs().subtract(6, \"month\").format(\"YYYY-MM-DD\"));\n  const [toDate, setToDate] = useState(initialState.toDate ?? dayjs().format(\"YYYY-MM-DD\"));\n  const [searchTermInput, setSearchTermInput] = useState(initialState.keyword ?? \"\"); // 검색 \"입력\" 상태\n  const [searchKeyword, setSearchKeyword] = useState(initialState.keyword ?? \"\"); // 실제 \"적용된\" 검색어\n\n  // --- 데이터 로딩 콜백 --- (API 호출 시점 변경)\n  const fetchDataCallback = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const params: FetchParams = {\n        keyword: searchKeyword || undefined,\n      };\n      if (enableDateFilter) {\n        params.fromDate = fromDate;\n        params.toDate = toDate;\n      }\n      const result = await fetchData(params); // 페이지/정렬 파라미터 없이 호출\n\n      setAllData(result.data); // 전체 데이터 저장\n      setTotalItems(result.totalItems); // 메타데이터 저장\n      setAllItems(result.allItems); // 메타데이터 저장\n      setCurrentPage(1); // 데이터 로드 시 항상 1페이지로 리셋\n    } catch (err: any) {\n      console.error(\"Error fetching data:\", err);\n      setError(err.message || \"데이터를 불러오는 중 오류가 발생했습니다.\");\n      setAllData([]); // 에러 시 데이터 초기화\n      setTotalItems(0);\n      setAllItems(undefined);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [searchKeyword, fromDate, toDate, enableDateFilter, fetchData]); // keyword, date 변경 시 호출\n  \n  useImperativeHandle(ref, () => ({\n    refetch: () => {\n      fetchDataCallback(); // 내부 API 호출\n    },\n  }));\n  \n  // 초기 로딩\n  useEffect(() => {\n    fetchDataCallback();\n  }, []); // 마운트 시 1회 호출\n\n  // --- 클라이언트 측 데이터 처리 --- (정렬, 페이지네이션)\n  const sortedData = useMemo(() => {\n    const sortableData = [...allData]; // 전체 데이터 복사\n    if (sortKey) {\n      sortableData.sort((a, b) => {\n        const valA = getPropertyValue(a, sortKey);\n        const valB = getPropertyValue(b, sortKey);\n        let comparison = 0;\n        if (valA === null || valA === undefined) comparison = -1;\n        else if (valB === null || valB === undefined) comparison = 1;\n        else if (dayjs.isDayjs(valA) && dayjs.isDayjs(valB)) comparison = valA.valueOf() - valB.valueOf();\n        else if (typeof valA === \"string\" && typeof valB === \"string\") comparison = valA.localeCompare(valB);\n        else if (typeof valA === \"number\" && typeof valB === \"number\") comparison = valA - valB;\n        else comparison = String(valA).localeCompare(String(valB));\n        return sortOrder === \"asc\" ? comparison : comparison * -1;\n      });\n    }\n    return sortableData;\n  }, [allData, sortKey, sortOrder]);\n\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return sortedData.slice(startIndex, startIndex + itemsPerPage);\n  }, [sortedData, currentPage, itemsPerPage]);\n\n  // --- 파생 상태 (페이지네이션) ---\n  // totalItems는 API 결과의 메타데이터 사용 (필터링된 개수)\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const displayTotalItems = totalItems;\n  const displayAllItems = allItems ?? totalItems;\n\n  // --- 이벤트 핸들러 (수정) ---\n  // 페이지 변경: 상태만 업데이트\n  const handlePageNumChange = (newPage: number) => {\n    if (newPage >= 1 && newPage <= totalPages && newPage !== currentPage) {\n      setCurrentPage(newPage);\n    }\n  };\n  // 페이지 크기 변경: 상태만 업데이트\n  const handleItemsPerPageChange = (newSize: number) => {\n    if (newSize !== itemsPerPage) {\n      setItemsPerPage(newSize);\n      setCurrentPage(1);\n    }\n  };\n  // 정렬 변경: 상태만 업데이트\n  const handleHeaderClick = (accessor: keyof T | string) => {\n    const newSortOrder = sortKey === accessor && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    setSortKey(accessor as string);\n    setSortOrder(newSortOrder);\n    setCurrentPage(1); // 정렬 시 1페이지로\n  };\n\n  // 날짜 변경: 상태 업데이트 + API 호출\n  const handleDateChangeInternal = (newFrom: string, newTo: string) => {\n    setFromDate(newFrom);\n    setToDate(newTo);\n    fetchDataCallback(); // 날짜 변경 시 API 재호출\n  };\n\n  // 검색어 입력: 입력 상태만 업데이트 (API 호출 없음)\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTermInput(e.target.value);\n  };\n  // 조회 버튼 클릭: 적용된 검색어 업데이트 + API 호출\n  const handleImmediateSearch = () => {\n    setSearchKeyword(searchTermInput.trim());\n    fetchDataCallback(); // 조회 버튼 클릭 시 API 재호출\n  };\n\n\n  \n\n  // 엑셀 다운로드 핸들러 (수정: 클라이언트 데이터 사용)\n  const handleDownloadClick = () => {\n    setIsLoading(true); // 로딩 표시 (데이터 준비 중)\n    try {\n      // 정렬된 전체 데이터 사용 (페이지네이션 전)\n      const dataToDownload = sortedData;\n\n      if (!dataToDownload || dataToDownload.length === 0) {\n        console.warn(\"다운로드할 데이터가 없습니다.\");\n        alert(\"다운로드할 데이터가 없습니다.\"); // 임시\n        return;\n      }\n\n      // 컬럼 정보를 사용하여 데이터 포맷팅 (기존 로직 유지)\n      const formattedData = dataToDownload.map((item) => {\n        const row: { [key: string]: any } = {};\n        columns.forEach((col) => {\n          if (col.accessor) {\n            let value = getPropertyValue(item, col.accessor);\n            if (col.formatter && typeof col.formatter === \"function\") {\n              const formattedVal = col.formatter(value, item, -1);\n              if (\n                typeof formattedVal === \"string\" ||\n                typeof formattedVal === \"number\" ||\n                typeof formattedVal === \"boolean\"\n              ) {\n                value = formattedVal;\n              } else if (value instanceof Date || dayjs.isDayjs(value)) {\n                value = dayjs(value).format(\"YYYY-MM-DD HH:mm:ss\");\n              } else if (typeof value === \"boolean\") {\n                value = value ? \"Y\" : \"N\";\n              }\n            } else {\n              if (value instanceof Date) value = dayjs(value).format(\"YYYY-MM-DD HH:mm:ss\");\n              else if (typeof value === \"boolean\") value = value ? \"Y\" : \"N\";\n              else if (value === null || value === undefined) value = \"\";\n            }\n            const headerName = typeof col.header === \"string\" ? col.header.replace(/\\n/g, \" \") : String(col.accessor);\n            row[headerName] = value;\n          }\n        });\n        return row;\n      });\n\n      const ws = XLSX.utils.json_to_sheet(formattedData);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\n      XLSX.writeFile(wb, `${excelFileName}_${dayjs().format(\"YYYYMMDD\")}.xlsx`);\n      alert(\"엑셀이 다운로드되었습니다.\"); // 임시\n    } catch (err) {\n      console.error(\"Excel download failed:\", err);\n      alert(\"엑셀 다운로드 중 오류가 발생했습니다.\"); // 임시\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // --- 행 클릭 핸들러 (기존 유지) ---\n  const handleRowClickInternal = useCallback(\n    (item: T, index: number) => {\n      if (onRowClick) {\n        onRowClick(item, index); // 부모 컴포넌트의 onRowClick 함수 호출\n      }\n    },\n    [onRowClick]\n  );\n\n  // --- 키 추출기 (기존 유지) ---\n  const internalKeyExtractor = useMemo(() => {\n    if (keyExtractor) return keyExtractor;\n    // 기본 keyExtractor: item.id 또는 item.index 사용 시도\n    return (item: T, index: number) => item.id ?? item.index ?? `row-${index}`;\n  }, [keyExtractor]);\n\n\n  return (\n    <Container $themeMode={themeMode}>\n      <TopHeader>\n        <TitleContainer>\n          {typeof title === \"string\" ? (\n            <CMSTitle $themeMode={themeMode}>{title}</CMSTitle>\n          ) : (\n            title /* ReactNode 직접 렌더링 */\n          )}\n        </TitleContainer>\n        {renderTabs && <TabsWrapper>{renderTabs()}</TabsWrapper>}\n      </TopHeader>\n\n      <ControlHeader>\n        <APIControls>\n          {enableDateFilter && (\n            <DateRangePickerContainer>\n              <GenericDateRangePicker\n                initialFromDate={fromDate}\n                initialToDate={toDate}\n                onDateChange={handleDateChangeInternal}\n                themeMode={themeMode}\n              />\n            </DateRangePickerContainer>\n          )}\n          {enableSearch && (\n            <SearchContainer>\n              <SearchInput\n                type=\"text\"\n                placeholder={searchPlaceholder}\n                value={searchTermInput}\n                onChange={handleSearchInputChange}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\") handleImmediateSearch();\n                }}\n                $themeMode={themeMode}\n              />\n              <SearchButton onClick={handleImmediateSearch} $themeMode={themeMode}>\n                조회\n              </SearchButton>\n            </SearchContainer>\n          )}\n        </APIControls>\n\n        <EventControls>\n  <LeftControls>\n    {deleteBtnCallBack && (\n      <SecondaryButton $themeMode={themeMode} onClick={deleteBtnCallBack}>삭제</SecondaryButton>\n    )}\n  </LeftControls>\n\n  <RightControls>\n    {isShowExcelTemplate && (\n      <PrimaryButton $themeMode={themeMode} onClick={() => console.log(\"엑셀 템플릿\")}>\n        엑셀 템플릿\n      </PrimaryButton>\n    )}\n    {excelUploadBtnCallBack && (\n      <SecondaryButton $themeMode={themeMode} onClick={excelUploadBtnCallBack}>\n        엑셀 업로드\n      </SecondaryButton>\n    )}\n    <DownloadButton onClick={handleDownloadClick} $themeMode={themeMode} disabled={isLoading}>\n      {isLoading ? \"다운로드 중...\" : \"엑셀 다운로드\"}\n    </DownloadButton>\n\n    <PaginationControls>\n      <NavButton\n        onClick={() => handlePageNumChange(currentPage - 1)}\n        disabled={currentPage <= 1 || isLoading}\n        $themeMode={themeMode}>\n        &lt;\n      </NavButton>\n      <PageBox $themeMode={themeMode}>\n        {currentPage} / {totalPages > 0 ? totalPages : 1}\n      </PageBox>\n      <NavButton\n        onClick={() => handlePageNumChange(currentPage + 1)}\n        disabled={currentPage >= totalPages || isLoading}\n        $themeMode={themeMode}>\n        &gt;\n      </NavButton>\n      <DropdownCustom\n        value={itemsPerPage}\n        onChange={handleItemsPerPageChange}\n        options={itemsPerPageOptions}\n        themeMode={themeMode}\n      />\n      <ItemsPerPageText $themeMode={themeMode}>개씩 보기</ItemsPerPageText>\n    </PaginationControls>\n  </RightControls>\n</EventControls>\n\n      </ControlHeader>\n\n        <TableContainer $themeMode={themeMode}>\n          <GenericDataTable\n            data={paginatedData}\n            columns={columns}\n            isLoading={false}\n            error={null}\n            onRowClick={handleRowClickInternal}\n            onHeaderClick={handleHeaderClick}\n            sortKey={sortKey}\n            sortOrder={sortOrder}\n            keyExtractor={internalKeyExtractor}\n            themeMode={themeMode}\n          />\n        </TableContainer>\n      {/* )} */}\n    </Container>\n  );\n};\n\nconst GenericListUI = forwardRef(GenericListUIInner) as <T extends BaseRecord>(\n  props: GenericListUIProps<T> & { ref?: React.Ref<{ refetch: () => void }> }\n) => React.ReactElement;\n\n\nexport default GenericListUI;\n\n// --- 스타일 컴포넌트 (레이아웃 관련 수정) ---\n\n\n\nconst Container = styled.div<{ $themeMode: ThemeMode }>`\n  min-width: 1200px;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  padding: 30px 30px 30px 30px; // 오른쪽 패딩 포함\n  background-color: ${({ $themeMode }) =>\n    $themeMode === \"light\" ? THEME_COLORS.light.background : THEME_COLORS.dark.background};\n  color: ${({ $themeMode }) =>\n    $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.text};\n`;\n\n\n\nconst TopHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  gap: 15px;\n`;\n\nconst TitleContainer = styled.div`\n  /* 제목 영역 스타일 (필요시 추가) */\n`;\n\nconst ControlHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin: 20px 0;\n  gap: 20px;\n`;\n\nconst APIControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n\nconst EventControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst LeftControls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst RightControls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n\n\nconst SearchContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst SearchInput = styled.input<{ $themeMode: ThemeMode }>`\n  width: 250px;\n  height: 40px;\n  border: 1px solid\n    ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n  border-right: none;\n  border-radius: 4px 0 0 4px;\n\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.inputText : THEME_COLORS.dark.inputText)};\n  padding-left: 15px;\n  padding-right: 35px;\n  background-color: ${({ $themeMode }) =>\n    $themeMode === \"light\" ? THEME_COLORS.light.inputBackground : THEME_COLORS.dark.inputBackground};\n\n  background-image: url(\"/icon_search.png\");\n  background-repeat: no-repeat;\n  background-position: right 10px center;\n  background-size: 16px 16px;\n\n  &::placeholder {\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#AAAAAA\" : \"#888888\")};\n  }\n\n  &:focus {\n    outline: none;\n    border-color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? THEME_COLORS.light.primary : THEME_COLORS.dark.accent};\n    background-image: url(\"/icon_search.png\");\n  }\n`;\n\nconst SearchButton = styled.button<{ $themeMode: ThemeMode }>`\n  width: 60px;\n  height: 40px;\n  margin-left: 10px;\n  background: ${({ $themeMode }) =>\n    $themeMode === \"light\" ? THEME_COLORS.light.primary : THEME_COLORS.dark.buttonBackground};\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : THEME_COLORS.dark.buttonText)};\n  border: 1px solid\n    ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n  border-left: none;\n  border-radius: 0;\n  font-weight: 500;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst ListInfo = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n  margin-right: 10px;\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.text)};\n  font-size: 14px;\n`;\n\n\n\nconst ExcelButton = styled(ActionButton)`\n  background: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#f8f8f8\" : THEME_COLORS.dark.primary)};\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : THEME_COLORS.dark.buttonText)};\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#e8e8e8\" : \"#424451\")};\n  }\n`;\n\nconst PaginationControls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst Cnt = styled.div<{ $themeMode: ThemeMode }>`\n  font-size: 14px;\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#555555\" : THEME_COLORS.dark.text)};\n  white-space: nowrap;\n`;\n\nconst PageBox = styled.div<{ $themeMode: ThemeMode }>`\n  margin: 0 5px;\n  font-size: 14px;\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.text)};\n  white-space: nowrap;\n`;\n\nconst ItemsPerPageText = styled.p<{ $themeMode: ThemeMode }>`\n  margin: 0;\n  margin-left: 5px;\n  font-size: 14px;\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#555555\" : THEME_COLORS.dark.text)};\n  white-space: nowrap;\n`;\n\nconst TableContainer = styled.div<{ $themeMode: ThemeMode }>`\n  width: 100%;\n  min-width: 1000px;\n  border: 1px solid\n    ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n  border-radius: 4px;\n  background: ${({ $themeMode }) =>\n    $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.tableBackground};\n  overflow: visible; /* 가로/세로 스크롤 방지 */\n\n  @media (max-width: 1400px) {\n    min-width: 1000px;\n  }\n`;\n\n\nconst LoadingContainer = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n  width: 100%;\n  background-color: ${({ $themeMode }) =>\n    $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.tableBackground};\n`;\n\nconst LoadingSpinner = styled.div<{ $themeMode: ThemeMode }>`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-top: 4px solid\n    ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : THEME_COLORS.dark.accent)};\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst ErrorContainer = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n  width: 100%;\n  background-color: ${({ $themeMode }) =>\n    $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.tableBackground};\n`;\n\nconst ErrorMessage = styled.p<{ $themeMode: ThemeMode }>`\n  color: #d32f2f;\n  font-size: 16px;\n  text-align: center;\n`;\n\n\nconst DateRangePickerContainer = styled.div`\n  /* 특별한 스타일 불필요 */\n`;\n\nconst TabsWrapper = styled.div`\n  margin-top: 15px;\n`;\n\nconst CMSTitle = styled.h1<{ $themeMode: ThemeMode }>`\n  font-size: 28px;\n  font-weight: bold;\n  margin: 0;\n  margin-bottom: 0;\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.titleColor : THEME_COLORS.dark.titleColor)};\n`;\n\nconst NavButton = styled.button<{ $themeMode: ThemeMode }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  border: 1px solid\n    ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n  background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#FFFFFF\" : THEME_COLORS.dark.secondary)};\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.text)};\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 1;\n  transition: background-color 0.2s, border-color 0.2s;\n\n  &:hover:not(:disabled) {\n    opacity: 0.8;\n    border-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#999\" : \"#AAAAAA\")};\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#f8f8f8\" : \"#424451\")};\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    border-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#EEEEEE\" : \"#555555\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#AAAAAA\" : \"#777777\")};\n  }\n`;\n"
        }
    ]
}