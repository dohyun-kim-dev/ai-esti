{
    "sourceFile": "src/components/CustomList/GenericDateRangePicker.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1755144494048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755144617740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,9 +402,9 @@\n   margin: 0;\n   background-color: ${({ selected, $themeMode }) =>\n     selected\n       ? $themeMode === \"light\"\n-        ? THEME_COLORS.light.primary\n+        ? THEME_COLORS.light.#2C2E3C\n         : THEME_COLORS.dark.primary\n       : $themeMode === \"light\"\n       ? \"#E0E0E0\"\n       : \"#707281\"};\n"
                },
                {
                    "date": 1755144657103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,12 +402,12 @@\n   margin: 0;\n   background-color: ${({ selected, $themeMode }) =>\n     selected\n       ? $themeMode === \"light\"\n-        ? THEME_COLORS.light.#2C2E3C\n+        ? THEME_COLORS.light.primary\n         : THEME_COLORS.dark.primary\n       : $themeMode === \"light\"\n-      ? \"#E0E0E0\"\n+      ? \"#2C2E3C\"\n       : \"#707281\"};\n   color: ${({ selected, $themeMode }) =>\n     selected\n       ? $themeMode === \"light\"\n"
                },
                {
                    "date": 1755144675137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,9 +405,9 @@\n       ? $themeMode === \"light\"\n         ? THEME_COLORS.light.primary\n         : THEME_COLORS.dark.primary\n       : $themeMode === \"light\"\n-      ? \"#2C2E3C\"\n+      ? \"#E0E0E0\"\n       : \"#707281\"};\n   color: ${({ selected, $themeMode }) =>\n     selected\n       ? $themeMode === \"light\"\n"
                },
                {
                    "date": 1755144696158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,9 +402,9 @@\n   margin: 0;\n   background-color: ${({ selected, $themeMode }) =>\n     selected\n       ? $themeMode === \"light\"\n-        ? THEME_COLORS.light.primary\n+        ? \"#2C2E3C\"\n         : THEME_COLORS.dark.primary\n       : $themeMode === \"light\"\n       ? \"#E0E0E0\"\n       : \"#707281\"};\n"
                },
                {
                    "date": 1755144700626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,9 +402,9 @@\n   margin: 0;\n   background-color: ${({ selected, $themeMode }) =>\n     selected\n       ? $themeMode === \"light\"\n-        ? \"#2C2E3C\"\n+        ? \"#202055\"\n         : THEME_COLORS.dark.primary\n       : $themeMode === \"light\"\n       ? \"#E0E0E0\"\n       : \"#707281\"};\n"
                },
                {
                    "date": 1755145150349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import DatePicker from \"react-datepicker\";\n import \"react-datepicker/dist/react-datepicker.css\";\n import { THEME_COLORS, ThemeMode } from \"@/styles/theme_colors\";\n import { ko } from \"date-fns/locale\";\n+import { useDevice } from \"@/contexts/DeviceContext\";\n \n type RangeType = \"금월\" | \"지난달\" | \"1년\" | \"지정\";\n \n interface GenericDateRangePickerProps {\n@@ -24,8 +25,10 @@\n   onDateChange,\n   initialSelectedRange = \"금월\",\n   themeMode = \"light\",\n }) => {\n+  const device = useDevice();\n+  const isMobile = device === \"mobile\";\n   const [fromDate, setFromDate] = useState(initialFromDate);\n   const [toDate, setToDate] = useState(initialToDate);\n   const [selectedRange, setSelectedRange] = useState<RangeType>(initialSelectedRange);\n   const [showDatePicker, setShowDatePicker] = useState(false);\n@@ -272,41 +275,49 @@\n     </PickerBox>\n   );\n \n   return (\n-    <DateContainer $themeMode={themeMode}>\n-      <DateBox ref={dateBoxRef} onClick={handleDateBoxClick} $themeMode={themeMode}>\n+    <DateContainer $themeMode={themeMode} $isMobile={isMobile}>\n+      <DateBox ref={dateBoxRef} onClick={handleDateBoxClick} $themeMode={themeMode} $isMobile={isMobile}>\n         {fromDate} ~ {toDate}\n         <img src=\"/icon_burger.png\" alt=\"달력\" width=\"10\" height=\"16\" style={{ transform: \"rotate(270deg)\" }} />\n       </DateBox>\n       {showDatePicker && (\n-        <DatePickerWrapper ref={datePickerRef} $themeMode={themeMode}>\n-          {showYearPicker ? renderYearPicker()\n-            : showMonthPicker ? renderMonthPicker()\n-            : (\n-<StyledDatePicker\n-  key={calendarKey}\n-  selected={isSelectingFromDate ? dayjs(fromDate).toDate() : dayjs(toDate).toDate()}\n-  onChange={handleDateChange}\n-  dateFormat=\"yyyy-MM-dd\"\n-  inline\n-  renderCustomHeader={renderCustomHeader}\n-  startDate={dayjs(fromDate).toDate()}\n-  endDate={dayjs(toDate).toDate()}\n-  openToDate={calendarDate}\n-  locale={ko} // ✅ 요일 한글화\n-/>\n-\n+        <DatePickerWrapper ref={datePickerRef} $themeMode={themeMode} $isMobile={isMobile}>\n+          <div className={isMobile ? 'mobile-panel' : undefined}>\n+            {isMobile && (\n+              <MobilePanelHeader>\n+                <span>기간 선택</span>\n+                <CloseButton type=\"button\" onClick={() => setShowDatePicker(false)}>닫기</CloseButton>\n+              </MobilePanelHeader>\n             )}\n+            {showYearPicker ? renderYearPicker()\n+              : showMonthPicker ? renderMonthPicker()\n+              : (\n+                <StyledDatePicker\n+                  key={calendarKey}\n+                  selected={isSelectingFromDate ? dayjs(fromDate).toDate() : dayjs(toDate).toDate()}\n+                  onChange={handleDateChange}\n+                  dateFormat=\"yyyy-MM-dd\"\n+                  inline\n+                  renderCustomHeader={renderCustomHeader}\n+                  startDate={dayjs(fromDate).toDate()}\n+                  endDate={dayjs(toDate).toDate()}\n+                  openToDate={calendarDate}\n+                  locale={ko}\n+                />\n+              )}\n+          </div>\n         </DatePickerWrapper>\n       )}\n-      <RangeButtonGroup $themeMode={themeMode}>\n+      <RangeButtonGroup $themeMode={themeMode} $isMobile={isMobile}>\n         {([\"금월\", \"지난달\", \"1년\", \"지정\"] as RangeType[]).map((range) => (\n           <RangeButton\n             key={range}\n             selected={selectedRange === range}\n             onClick={() => handleRangeClick(range)}\n             $themeMode={themeMode}\n+            $isMobile={isMobile}\n           >\n             {range}\n           </RangeButton>\n         ))}\n@@ -368,38 +379,44 @@\n \n \n \n // --- Styled Components (Keep as they were in the original DateRangePicker) ---\n-const DateContainer = styled.div<{ $themeMode: ThemeMode }>`\n+const DateContainer = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n   display: flex;\n   align-items: center;\n   gap: 8px;\n   position: relative;\n+  flex-direction: ${({ $isMobile }) => ($isMobile ? 'column' : 'row')};\n+  align-items: ${({ $isMobile }) => ($isMobile ? 'stretch' : 'center')};\n `;\n \n-const DateBox = styled.div<{ $themeMode: ThemeMode }>`\n-  padding: 11px 14px;\n+const DateBox = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n+  padding: ${({ $isMobile }) => ($isMobile ? '14px 16px' : '11px 14px')};\n   background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" : THEME_COLORS.dark.inputBackground)};\n   color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"black\" : THEME_COLORS.dark.inputText)};\n   font-weight: 500;\n-  border-radius: 0px;\n+  border-radius: ${({ $isMobile }) => ($isMobile ? '8px' : '0px')};\n   border: 1px solid\n-    ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" /* 배경색과 동일하게 */ : THEME_COLORS.dark.borderColor)};\n-  font-size: 14px;\n+    ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" : THEME_COLORS.dark.borderColor)};\n+  font-size: ${({ $isMobile }) => ($isMobile ? '16px' : '14px')};\n   display: flex;\n   align-items: center;\n   gap: 8px;\n   cursor: pointer;\n   white-space: nowrap;\n+  justify-content: space-between;\n `;\n \n-const RangeButtonGroup = styled.div<{ $themeMode: ThemeMode }>`\n+const RangeButtonGroup = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n   display: flex;\n+  gap: ${({ $isMobile }) => ($isMobile ? '8px' : '0')};\n+  overflow-x: ${({ $isMobile }) => ($isMobile ? 'auto' : 'visible')};\n+  padding: ${({ $isMobile }) => ($isMobile ? '4px 2px' : '0')};\n `;\n \n-const RangeButton = styled.button<{ selected: boolean; $themeMode: ThemeMode }>`\n-  width: 60px;\n-  padding: 12px 12px;\n+const RangeButton = styled.button<{ selected: boolean; $themeMode: ThemeMode; $isMobile: boolean }>`\n+  width: ${({ $isMobile }) => ($isMobile ? 'auto' : '60px')};\n+  padding: ${({ $isMobile }) => ($isMobile ? '10px 14px' : '12px 12px')};\n   margin: 0;\n   background-color: ${({ selected, $themeMode }) =>\n     selected\n       ? $themeMode === \"light\"\n@@ -417,9 +434,9 @@\n       ? THEME_COLORS.light.text\n       : \"#8c8e96\"};\n   border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n   border-left: none;\n-  border-radius: 0px;\n+  border-radius: ${({ $isMobile }) => ($isMobile ? '9999px' : '0px')};\n   cursor: pointer;\n   font-weight: 500;\n   white-space: nowrap;\n \n@@ -427,14 +444,21 @@\n     border-left: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n   }\n `;\n \n-const DatePickerWrapper = styled.div<{ $themeMode: ThemeMode }>`\n-  position: absolute;\n-  top: 100%;\n+const DatePickerWrapper = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n+  position: ${({ $isMobile }) => ($isMobile ? 'fixed' : 'absolute')};\n+  top: ${({ $isMobile }) => ($isMobile ? '0' : '100%')};\n   left: 0;\n-  margin-top: 8px;\n+  right: ${({ $isMobile }) => ($isMobile ? '0' : 'auto')};\n+  bottom: ${({ $isMobile }) => ($isMobile ? '0' : 'auto')};\n+  margin-top: ${({ $isMobile }) => ($isMobile ? '0' : '8px')};\n   z-index: 1000;\n+  display: ${({ $isMobile }) => ($isMobile ? 'flex' : 'block')};\n+  align-items: ${({ $isMobile }) => ($isMobile ? 'center' : 'initial')};\n+  justify-content: ${({ $isMobile }) => ($isMobile ? 'center' : 'initial')};\n+  padding: ${({ $isMobile }) => ($isMobile ? '16px' : '0')};\n+  background: ${({ $isMobile }) => ($isMobile ? 'rgba(0,0,0,0.4)' : 'transparent')};\n \n   .custom-calendar {\n     background-color: ${({ $themeMode }) =>\n       $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.inputBackground};\n@@ -517,7 +541,34 @@\n   .react-datepicker__navigation-icon::before {\n     border-color: ${({ $themeMode }) =>\n       $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText};\n   }\n+\n+  .mobile-panel {\n+    width: 100%;\n+    max-width: 360px;\n+    border-radius: 12px;\n+    overflow: hidden;\n+    background: ${({ $themeMode }) =>\n+      $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.inputBackground};\n+    border: 1px solid\n+      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n+  }\n `;\n \n+const MobilePanelHeader = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 10px 12px;\n+  font-weight: 600;\n+`;\n+\n+const CloseButton = styled.button`\n+  background: none;\n+  border: none;\n+  font-size: 14px;\n+  color: #333;\n+  cursor: pointer;\n+`;\n+\n const StyledDatePicker = styled(DatePicker as any)``;\n"
                },
                {
                    "date": 1755145203517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,574 @@\n+\"use client\";\n+\n+import React, { useState, useEffect, useRef, useCallback } from \"react\";\n+import styled from \"styled-components\";\n+import dayjs from \"dayjs\";\n+import DatePicker from \"react-datepicker\";\n+import \"react-datepicker/dist/react-datepicker.css\";\n+import { THEME_COLORS, ThemeMode } from \"@/styles/theme_colors\";\n+import { ko } from \"date-fns/locale\";\n+import { useDevice } from \"@/contexts/DeviceContext\";\n+\n+type RangeType = \"금월\" | \"지난달\" | \"1년\" | \"지정\";\n+\n+interface GenericDateRangePickerProps {\n+  initialFromDate: string;\n+  initialToDate: string;\n+  onDateChange: (fromDate: string, toDate: string) => void;\n+  initialSelectedRange?: RangeType;\n+  themeMode?: ThemeMode;\n+}\n+\n+const GenericDateRangePicker: React.FC<GenericDateRangePickerProps> = ({\n+  initialFromDate,\n+  initialToDate,\n+  onDateChange,\n+  initialSelectedRange = \"금월\",\n+  themeMode = \"light\",\n+}) => {\n+  const device = useDevice();\n+  const isMobile = device === \"mobile\";\n+  const [fromDate, setFromDate] = useState(initialFromDate);\n+  const [toDate, setToDate] = useState(initialToDate);\n+  const [selectedRange, setSelectedRange] = useState<RangeType>(initialSelectedRange);\n+  const [showDatePicker, setShowDatePicker] = useState(false);\n+  const [isSelectingFromDate, setIsSelectingFromDate] = useState(true);\n+  const [calendarDate, setCalendarDate] = useState(dayjs().toDate());\n+  const [calendarKey, setCalendarKey] = useState(0);\n+  const [showYearPicker, setShowYearPicker] = useState(false);\n+  const [showMonthPicker, setShowMonthPicker] = useState(false);\n+  const [tempYear, setTempYear] = useState<number | null>(null);\n+  const [tempMonth, setTempMonth] = useState<number | null>(null);\n+  const datePickerRef = useRef<HTMLDivElement>(null);\n+  const dateBoxRef = useRef<HTMLDivElement>(null);\n+\n+  useEffect(() => {\n+    setFromDate(initialFromDate);\n+    setToDate(initialToDate);\n+  }, [initialFromDate, initialToDate]);\n+\n+  const handleClickOutside = useCallback((event: MouseEvent) => {\n+    if (\n+      datePickerRef.current &&\n+      !datePickerRef.current.contains(event.target as Node) &&\n+      dateBoxRef.current &&\n+      !dateBoxRef.current.contains(event.target as Node)\n+    ) {\n+      setShowDatePicker(false);\n+      setShowYearPicker(false);\n+      setShowMonthPicker(false);\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    document.addEventListener(\"mousedown\", handleClickOutside);\n+    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n+  }, [handleClickOutside]);\n+\n+  const handleRangeClick = (range: RangeType) => {\n+    const today = dayjs();\n+\n+    if (range === \"지정\") {\n+      setSelectedRange(\"지정\");\n+      setShowDatePicker(true);\n+      setIsSelectingFromDate(true);\n+      return;\n+    }\n+\n+    if (range === \"금월\") {\n+      const from = today.startOf(\"month\");\n+      const newFromDate = from.format(\"YYYY-MM-DD\");\n+      const newToDate = today.format(\"YYYY-MM-DD\");\n+\n+      setFromDate(newFromDate);\n+      setToDate(newToDate);\n+      setSelectedRange(range);\n+      onDateChange(newFromDate, newToDate);\n+      return;\n+    }\n+\n+    if (range === \"지난달\") {\n+      const from = today.subtract(1, \"month\").startOf(\"month\");\n+      const to = today.subtract(1, \"month\").endOf(\"month\");\n+      const newFromDate = from.format(\"YYYY-MM-DD\");\n+      const newToDate = to.format(\"YYYY-MM-DD\");\n+\n+      setFromDate(newFromDate);\n+      setToDate(newToDate);\n+      setSelectedRange(range);\n+      onDateChange(newFromDate, newToDate);\n+      return;\n+    }\n+\n+    if (range === \"1년\") {\n+      const from = today.subtract(1, \"year\");\n+      const newFromDate = from.format(\"YYYY-MM-DD\");\n+      const newToDate = today.format(\"YYYY-MM-DD\");\n+\n+      setFromDate(newFromDate);\n+      setToDate(newToDate);\n+      setSelectedRange(range);\n+      onDateChange(newFromDate, newToDate);\n+      return;\n+    }\n+  };\n+\n+  const handleDateBoxClick = () => {\n+    setShowDatePicker((prev) => {\n+      const willShow = !prev;\n+      if (willShow) {\n+        setIsSelectingFromDate(true);\n+        setShowYearPicker(false);    // 추가\n+        setShowMonthPicker(false);   // 추가\n+      }\n+      return willShow;\n+    });\n+  };\n+  \n+\n+  const handleDateChange = (date: Date) => {\n+    const formatted = dayjs(date).format(\"YYYY-MM-DD\");\n+\n+    if (isSelectingFromDate) {\n+      setFromDate(formatted);\n+      setIsSelectingFromDate(false);\n+    } else {\n+      if (dayjs(formatted).isBefore(dayjs(fromDate))) {\n+        setFromDate(formatted);\n+        setToDate(fromDate);\n+        onDateChange(formatted, fromDate);\n+      } else {\n+        setToDate(formatted);\n+        onDateChange(fromDate, formatted);\n+      }\n+      setShowDatePicker(false);\n+    }\n+  };\n+\n+  const handleYearConfirm = () => {\n+    if (tempYear !== null) {\n+      const updated = dayjs(calendarDate).year(tempYear).toDate();\n+      setCalendarDate(updated);\n+      setCalendarKey((prev) => prev + 1);\n+      setShowYearPicker(false);\n+    }\n+  };\n+\n+  const handleMonthConfirm = () => {\n+    if (tempMonth !== null) {\n+      const updated = dayjs(calendarDate).month(tempMonth).toDate();\n+      setCalendarDate(updated);\n+      setCalendarKey((prev) => prev + 1);\n+      setShowMonthPicker(false);\n+    }\n+  };\n+\n+  const renderCustomHeader = ({\n+    date,\n+    decreaseMonth,\n+    increaseMonth,\n+    prevMonthButtonDisabled,\n+    nextMonthButtonDisabled,\n+  }: {\n+    date: Date;\n+    decreaseMonth: () => void;\n+    increaseMonth: () => void;\n+    prevMonthButtonDisabled: boolean;\n+    nextMonthButtonDisabled: boolean;\n+  }) => (\n+    <div\n+      style={{\n+        display: \"flex\",\n+        alignItems: \"center\",\n+        justifyContent: \"space-between\",\n+        padding: \"8px\",\n+      }}\n+    >\n+      <button\n+        onClick={decreaseMonth}\n+        disabled={prevMonthButtonDisabled}\n+        style={{\n+          background: \"none\",\n+          border: \"none\",\n+          fontSize: \"18px\",\n+          cursor: \"pointer\",\n+          color: \"#000000\",\n+        }}\n+      >\n+        {\"<\"}\n+      </button>\n+  \n+      <div style={{ display: \"flex\", gap: \"12px\", alignItems: \"center\" }}>\n+        <button\n+          onClick={() => setShowYearPicker(true)}\n+          style={{\n+            background: \"none\",\n+            border: \"none\",\n+            fontWeight: \"bold\",\n+            cursor: \"pointer\",\n+            color: \"#000000\",\n+          }}\n+        >\n+          {dayjs(date).format(\"YYYY년\")}\n+        </button>\n+        <button\n+          onClick={() => setShowMonthPicker(true)}\n+          style={{\n+            background: \"none\",\n+            border: \"none\",\n+            fontWeight: \"bold\",\n+            cursor: \"pointer\",\n+            color: \"#000000\",\n+          }}\n+        >\n+          {dayjs(date).format(\"M월\")}\n+        </button>\n+      </div>\n+  \n+      <button\n+        onClick={increaseMonth}\n+        disabled={nextMonthButtonDisabled}\n+        style={{\n+          background: \"none\",\n+          border: \"none\",\n+          fontSize: \"18px\",\n+          cursor: \"pointer\",\n+          color: \"#000000\",\n+        }}\n+      >\n+        {\">\"}\n+      </button>\n+    </div>\n+  );\n+  \n+  \n+\n+  const renderYearPicker = () => {\n+    const currentYear = dayjs().year();\n+    const years = Array.from({ length: 20 }, (_, i) => currentYear - 10 + i);\n+    return (\n+      <PickerBox>\n+        <div className=\"picker-body\">\n+          {years.map((year) => (\n+            <button key={year} onClick={() => setTempYear(year)}>{year}년</button>\n+          ))}\n+        </div>\n+        <div className=\"picker-actions\">\n+          <button onClick={handleYearConfirm}>확인</button>\n+          <button onClick={() => setShowYearPicker(false)}>취소</button>\n+        </div>\n+      </PickerBox>\n+    );\n+  };\n+\n+  const renderMonthPicker = () => (\n+    <PickerBox>\n+      <div className=\"picker-body\">\n+        {Array.from({ length: 12 }, (_, i) => (\n+          <button key={i} onClick={() => setTempMonth(i)}>{i + 1}월</button>\n+        ))}\n+      </div>\n+      <div className=\"picker-actions\">\n+        <button onClick={handleMonthConfirm}>확인</button>\n+        <button onClick={() => setShowMonthPicker(false)}>취소</button>\n+      </div>\n+    </PickerBox>\n+  );\n+\n+  return (\n+    <DateContainer $themeMode={themeMode} $isMobile={isMobile}>\n+      <DateBox ref={dateBoxRef} onClick={handleDateBoxClick} $themeMode={themeMode} $isMobile={isMobile}>\n+        {fromDate} ~ {toDate}\n+        <img src=\"/icon_burger.png\" alt=\"달력\" width=\"10\" height=\"16\" style={{ transform: \"rotate(270deg)\" }} />\n+      </DateBox>\n+      {showDatePicker && (\n+        <DatePickerWrapper ref={datePickerRef} $themeMode={themeMode} $isMobile={isMobile}>\n+          <div className={isMobile ? 'mobile-panel' : undefined}>\n+            {isMobile && (\n+              <MobilePanelHeader>\n+                <span>기간 선택</span>\n+                <CloseButton type=\"button\" onClick={() => setShowDatePicker(false)}>닫기</CloseButton>\n+              </MobilePanelHeader>\n+            )}\n+            {showYearPicker ? renderYearPicker()\n+              : showMonthPicker ? renderMonthPicker()\n+              : (\n+                <StyledDatePicker\n+                  key={calendarKey}\n+                  selected={isSelectingFromDate ? dayjs(fromDate).toDate() : dayjs(toDate).toDate()}\n+                  onChange={handleDateChange}\n+                  dateFormat=\"yyyy-MM-dd\"\n+                  inline\n+                  renderCustomHeader={renderCustomHeader}\n+                  startDate={dayjs(fromDate).toDate()}\n+                  endDate={dayjs(toDate).toDate()}\n+                  openToDate={calendarDate}\n+                  locale={ko}\n+                />\n+              )}\n+          </div>\n+        </DatePickerWrapper>\n+      )}\n+      <RangeButtonGroup $themeMode={themeMode} $isMobile={isMobile}>\n+        {([\"금월\", \"지난달\", \"1년\", \"지정\"] as RangeType[]).map((range) => (\n+          <RangeButton\n+            key={range}\n+            selected={selectedRange === range}\n+            onClick={() => handleRangeClick(range)}\n+            $themeMode={themeMode}\n+            $isMobile={isMobile}\n+          >\n+            {range}\n+          </RangeButton>\n+        ))}\n+      </RangeButtonGroup>\n+    </DateContainer>\n+  );\n+};\n+\n+export default GenericDateRangePicker;\n+\n+// 추가 스타일\n+const PickerBox = styled.div`\n+  width: 252px; /* ✅ DatePicker 기본 너비에 맞춤 */\n+  background: white;\n+  padding: 8px;\n+  border-radius: 6px;\n+  border: 1px solid #ccc;\n+\n+  .picker-body {\n+    display: grid;\n+    grid-template-columns: repeat(3, 1fr); /* ✅ 3열 */\n+    gap: 8px;\n+    margin-bottom: 8px;\n+  }\n+\n+  .picker-body button {\n+  width: 100%;\n+  padding: 8px 0;\n+  background: #f0f0f0;\n+  border: none;\n+  border-radius: 4px;\n+  text-align: center;\n+  color: #000;\n+  cursor: pointer;\n+  font-size: 14px;\n+\n+  &:hover {\n+    background: #d0d0d0;\n+  }\n+}\n+\n+\n+  .picker-actions {\n+  display: flex;\n+  justify-content: flex-end;\n+  gap: 12px;\n+}\n+\n+.picker-actions button {\n+  background: none;\n+  border: none;\n+  padding: 0;\n+  font-size: 14px;\n+  color: #000000;\n+  cursor: pointer;\n+}\n+\n+`;\n+\n+\n+\n+// --- Styled Components (Keep as they were in the original DateRangePicker) ---\n+const DateContainer = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  position: relative;\n+  flex-direction: ${({ $isMobile }) => ($isMobile ? 'column' : 'row')};\n+  align-items: ${({ $isMobile }) => ($isMobile ? 'stretch' : 'center')};\n+`;\n+\n+const DateBox = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n+  padding: ${({ $isMobile }) => ($isMobile ? '14px 16px' : '11px 14px')};\n+  background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" : THEME_COLORS.dark.inputBackground)};\n+  color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"black\" : THEME_COLORS.dark.inputText)};\n+  font-weight: 500;\n+  border-radius: ${({ $isMobile }) => ($isMobile ? '8px' : '0px')};\n+  border: 1px solid\n+    ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" : THEME_COLORS.dark.borderColor)};\n+  font-size: ${({ $isMobile }) => ($isMobile ? '16px' : '14px')};\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  cursor: pointer;\n+  white-space: nowrap;\n+  justify-content: space-between;\n+`;\n+\n+const RangeButtonGroup = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n+  display: flex;\n+  gap: ${({ $isMobile }) => ($isMobile ? '8px' : '0')};\n+  overflow-x: ${({ $isMobile }) => ($isMobile ? 'auto' : 'visible')};\n+  padding: ${({ $isMobile }) => ($isMobile ? '4px 2px' : '0')};\n+`;\n+\n+const RangeButton = styled.button<{ selected: boolean; $themeMode: ThemeMode; $isMobile: boolean }>`\n+  width: ${({ $isMobile }) => ($isMobile ? 'auto' : '60px')};\n+  padding: ${({ $isMobile }) => ($isMobile ? '10px 14px' : '12px 12px')};\n+  margin: 0;\n+  background-color: ${({ selected, $themeMode }) =>\n+    selected\n+      ? $themeMode === \"light\"\n+        ? \"#202055\"\n+        : THEME_COLORS.dark.primary\n+      : $themeMode === \"light\"\n+      ? \"#E0E0E0\"\n+      : \"#707281\"};\n+  color: ${({ selected, $themeMode }) =>\n+    selected\n+      ? $themeMode === \"light\"\n+        ? THEME_COLORS.light.buttonText\n+        : THEME_COLORS.dark.buttonText\n+      : $themeMode === \"light\"\n+      ? THEME_COLORS.light.text\n+      : \"#8c8e96\"};\n+  border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n+  border-left: none;\n+  border-radius: ${({ $isMobile }) => ($isMobile ? 'px' : '0px')};\n+  cursor: pointer;\n+  font-weight: 500;\n+  white-space: nowrap;\n+\n+  &:first-child {\n+    border-left: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n+  }\n+`;\n+\n+const DatePickerWrapper = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n+  position: ${({ $isMobile }) => ($isMobile ? 'fixed' : 'absolute')};\n+  top: ${({ $isMobile }) => ($isMobile ? '0' : '100%')};\n+  left: 0;\n+  right: ${({ $isMobile }) => ($isMobile ? '0' : 'auto')};\n+  bottom: ${({ $isMobile }) => ($isMobile ? '0' : 'auto')};\n+  margin-top: ${({ $isMobile }) => ($isMobile ? '0' : '8px')};\n+  z-index: 1000;\n+  display: ${({ $isMobile }) => ($isMobile ? 'flex' : 'block')};\n+  align-items: ${({ $isMobile }) => ($isMobile ? 'center' : 'initial')};\n+  justify-content: ${({ $isMobile }) => ($isMobile ? 'center' : 'initial')};\n+  padding: ${({ $isMobile }) => ($isMobile ? '16px' : '0')};\n+  background: ${({ $isMobile }) => ($isMobile ? 'rgba(0,0,0,0.4)' : 'transparent')};\n+\n+  .custom-calendar {\n+    background-color: ${({ $themeMode }) =>\n+      $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.inputBackground};\n+    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n+    border: 1px solid\n+      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n+    border-radius: 4px;\n+    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n+  }\n+\n+  .react-datepicker__day-name,\n+  .react-datepicker__day,\n+  .react-datepicker__time-name {\n+    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n+    width: 2em;\n+    line-height: 2em;\n+  }\n+\n+  .react-datepicker__day--selected,\n+  .react-datepicker__day--keyboard-selected {\n+    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n+    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n+    border-radius: 50%;\n+  }\n+\n+  .react-datepicker__day--in-selecting-range {\n+    background-color: transparent;\n+    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n+    border-radius: 0;\n+  }\n+\n+  .react-datepicker__day--in-range {\n+    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#e0e0e0\" : \"#424451\")};\n+    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n+    border-radius: 0;\n+  }\n+\n+  .react-datepicker__day--range-start.react-datepicker__day--range-end,\n+  .react-datepicker__day--selected.react-datepicker__day--in-selecting-range {\n+    border-radius: 50%;\n+    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n+    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n+  }\n+\n+  .react-datepicker__day--range-start,\n+  .react-datepicker__day--range-end {\n+    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n+    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n+    border-radius: 50%;\n+  }\n+\n+  .react-datepicker__day:hover {\n+    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#d0d0d0\" : \"#555555\")};\n+    border-radius: 50%;\n+  }\n+\n+  .react-datepicker__day--today {\n+    font-weight: bold;\n+    border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.accent : \"#888888\")};\n+    border-radius: 50%;\n+  }\n+\n+  .react-datepicker__day--outside-month {\n+    color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#AAAAAA\" : \"#666666\")};\n+  }\n+\n+  .react-datepicker__header {\n+    background-color: ${({ $themeMode }) =>\n+      $themeMode === \"light\" ? \"#F0F0F0\" : THEME_COLORS.dark.tableHeaderBackground};\n+    border-bottom: 1px solid\n+      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n+  }\n+\n+  .react-datepicker__current-month,\n+  .react-datepicker__day-name {\n+    color: ${({ $themeMode }) =>\n+      $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.tableHeaderText};\n+  }\n+\n+  .react-datepicker__navigation-icon::before {\n+    border-color: ${({ $themeMode }) =>\n+      $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText};\n+  }\n+\n+  .mobile-panel {\n+    width: 100%;\n+    max-width: 360px;\n+    border-radius: 12px;\n+    overflow: hidden;\n+    background: ${({ $themeMode }) =>\n+      $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.inputBackground};\n+    border: 1px solid\n+      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n+  }\n+`;\n+\n+const MobilePanelHeader = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 10px 12px;\n+  font-weight: 600;\n+`;\n+\n+const CloseButton = styled.button`\n+  background: none;\n+  border: none;\n+  font-size: 14px;\n+  color: #333;\n+  cursor: pointer;\n+`;\n+\n+const StyledDatePicker = styled(DatePicker as any)``;\n"
                },
                {
                    "date": 1755145241600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -407,8 +407,9 @@\n `;\n \n const RangeButtonGroup = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n   display: flex;\n+  jus\n   gap: ${({ $isMobile }) => ($isMobile ? '8px' : '0')};\n   overflow-x: ${({ $isMobile }) => ($isMobile ? 'auto' : 'visible')};\n   padding: ${({ $isMobile }) => ($isMobile ? '4px 2px' : '0')};\n `;\n@@ -434,9 +435,9 @@\n       ? THEME_COLORS.light.text\n       : \"#8c8e96\"};\n   border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n   border-left: none;\n-  border-radius: ${({ $isMobile }) => ($isMobile ? 'px' : '0px')};\n+  border-radius: ${({ $isMobile }) => ($isMobile ? '12px' : '0px')};\n   cursor: pointer;\n   font-weight: 500;\n   white-space: nowrap;\n \n@@ -571,578 +572,4 @@\n   cursor: pointer;\n `;\n \n const StyledDatePicker = styled(DatePicker as any)``;\n-\"use client\";\n-\n-import React, { useState, useEffect, useRef, useCallback } from \"react\";\n-import styled from \"styled-components\";\n-import dayjs from \"dayjs\";\n-import DatePicker from \"react-datepicker\";\n-import \"react-datepicker/dist/react-datepicker.css\";\n-import { THEME_COLORS, ThemeMode } from \"@/styles/theme_colors\";\n-import { ko } from \"date-fns/locale\";\n-import { useDevice } from \"@/contexts/DeviceContext\";\n-\n-type RangeType = \"금월\" | \"지난달\" | \"1년\" | \"지정\";\n-\n-interface GenericDateRangePickerProps {\n-  initialFromDate: string;\n-  initialToDate: string;\n-  onDateChange: (fromDate: string, toDate: string) => void;\n-  initialSelectedRange?: RangeType;\n-  themeMode?: ThemeMode;\n-}\n-\n-const GenericDateRangePicker: React.FC<GenericDateRangePickerProps> = ({\n-  initialFromDate,\n-  initialToDate,\n-  onDateChange,\n-  initialSelectedRange = \"금월\",\n-  themeMode = \"light\",\n-}) => {\n-  const device = useDevice();\n-  const isMobile = device === \"mobile\";\n-  const [fromDate, setFromDate] = useState(initialFromDate);\n-  const [toDate, setToDate] = useState(initialToDate);\n-  const [selectedRange, setSelectedRange] = useState<RangeType>(initialSelectedRange);\n-  const [showDatePicker, setShowDatePicker] = useState(false);\n-  const [isSelectingFromDate, setIsSelectingFromDate] = useState(true);\n-  const [calendarDate, setCalendarDate] = useState(dayjs().toDate());\n-  const [calendarKey, setCalendarKey] = useState(0);\n-  const [showYearPicker, setShowYearPicker] = useState(false);\n-  const [showMonthPicker, setShowMonthPicker] = useState(false);\n-  const [tempYear, setTempYear] = useState<number | null>(null);\n-  const [tempMonth, setTempMonth] = useState<number | null>(null);\n-  const datePickerRef = useRef<HTMLDivElement>(null);\n-  const dateBoxRef = useRef<HTMLDivElement>(null);\n-\n-  useEffect(() => {\n-    setFromDate(initialFromDate);\n-    setToDate(initialToDate);\n-  }, [initialFromDate, initialToDate]);\n-\n-  const handleClickOutside = useCallback((event: MouseEvent) => {\n-    if (\n-      datePickerRef.current &&\n-      !datePickerRef.current.contains(event.target as Node) &&\n-      dateBoxRef.current &&\n-      !dateBoxRef.current.contains(event.target as Node)\n-    ) {\n-      setShowDatePicker(false);\n-      setShowYearPicker(false);\n-      setShowMonthPicker(false);\n-    }\n-  }, []);\n-\n-  useEffect(() => {\n-    document.addEventListener(\"mousedown\", handleClickOutside);\n-    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n-  }, [handleClickOutside]);\n-\n-  const handleRangeClick = (range: RangeType) => {\n-    const today = dayjs();\n-\n-    if (range === \"지정\") {\n-      setSelectedRange(\"지정\");\n-      setShowDatePicker(true);\n-      setIsSelectingFromDate(true);\n-      return;\n-    }\n-\n-    if (range === \"금월\") {\n-      const from = today.startOf(\"month\");\n-      const newFromDate = from.format(\"YYYY-MM-DD\");\n-      const newToDate = today.format(\"YYYY-MM-DD\");\n-\n-      setFromDate(newFromDate);\n-      setToDate(newToDate);\n-      setSelectedRange(range);\n-      onDateChange(newFromDate, newToDate);\n-      return;\n-    }\n-\n-    if (range === \"지난달\") {\n-      const from = today.subtract(1, \"month\").startOf(\"month\");\n-      const to = today.subtract(1, \"month\").endOf(\"month\");\n-      const newFromDate = from.format(\"YYYY-MM-DD\");\n-      const newToDate = to.format(\"YYYY-MM-DD\");\n-\n-      setFromDate(newFromDate);\n-      setToDate(newToDate);\n-      setSelectedRange(range);\n-      onDateChange(newFromDate, newToDate);\n-      return;\n-    }\n-\n-    if (range === \"1년\") {\n-      const from = today.subtract(1, \"year\");\n-      const newFromDate = from.format(\"YYYY-MM-DD\");\n-      const newToDate = today.format(\"YYYY-MM-DD\");\n-\n-      setFromDate(newFromDate);\n-      setToDate(newToDate);\n-      setSelectedRange(range);\n-      onDateChange(newFromDate, newToDate);\n-      return;\n-    }\n-  };\n-\n-  const handleDateBoxClick = () => {\n-    setShowDatePicker((prev) => {\n-      const willShow = !prev;\n-      if (willShow) {\n-        setIsSelectingFromDate(true);\n-        setShowYearPicker(false);    // 추가\n-        setShowMonthPicker(false);   // 추가\n-      }\n-      return willShow;\n-    });\n-  };\n-  \n-\n-  const handleDateChange = (date: Date) => {\n-    const formatted = dayjs(date).format(\"YYYY-MM-DD\");\n-\n-    if (isSelectingFromDate) {\n-      setFromDate(formatted);\n-      setIsSelectingFromDate(false);\n-    } else {\n-      if (dayjs(formatted).isBefore(dayjs(fromDate))) {\n-        setFromDate(formatted);\n-        setToDate(fromDate);\n-        onDateChange(formatted, fromDate);\n-      } else {\n-        setToDate(formatted);\n-        onDateChange(fromDate, formatted);\n-      }\n-      setShowDatePicker(false);\n-    }\n-  };\n-\n-  const handleYearConfirm = () => {\n-    if (tempYear !== null) {\n-      const updated = dayjs(calendarDate).year(tempYear).toDate();\n-      setCalendarDate(updated);\n-      setCalendarKey((prev) => prev + 1);\n-      setShowYearPicker(false);\n-    }\n-  };\n-\n-  const handleMonthConfirm = () => {\n-    if (tempMonth !== null) {\n-      const updated = dayjs(calendarDate).month(tempMonth).toDate();\n-      setCalendarDate(updated);\n-      setCalendarKey((prev) => prev + 1);\n-      setShowMonthPicker(false);\n-    }\n-  };\n-\n-  const renderCustomHeader = ({\n-    date,\n-    decreaseMonth,\n-    increaseMonth,\n-    prevMonthButtonDisabled,\n-    nextMonthButtonDisabled,\n-  }: {\n-    date: Date;\n-    decreaseMonth: () => void;\n-    increaseMonth: () => void;\n-    prevMonthButtonDisabled: boolean;\n-    nextMonthButtonDisabled: boolean;\n-  }) => (\n-    <div\n-      style={{\n-        display: \"flex\",\n-        alignItems: \"center\",\n-        justifyContent: \"space-between\",\n-        padding: \"8px\",\n-      }}\n-    >\n-      <button\n-        onClick={decreaseMonth}\n-        disabled={prevMonthButtonDisabled}\n-        style={{\n-          background: \"none\",\n-          border: \"none\",\n-          fontSize: \"18px\",\n-          cursor: \"pointer\",\n-          color: \"#000000\",\n-        }}\n-      >\n-        {\"<\"}\n-      </button>\n-  \n-      <div style={{ display: \"flex\", gap: \"12px\", alignItems: \"center\" }}>\n-        <button\n-          onClick={() => setShowYearPicker(true)}\n-          style={{\n-            background: \"none\",\n-            border: \"none\",\n-            fontWeight: \"bold\",\n-            cursor: \"pointer\",\n-            color: \"#000000\",\n-          }}\n-        >\n-          {dayjs(date).format(\"YYYY년\")}\n-        </button>\n-        <button\n-          onClick={() => setShowMonthPicker(true)}\n-          style={{\n-            background: \"none\",\n-            border: \"none\",\n-            fontWeight: \"bold\",\n-            cursor: \"pointer\",\n-            color: \"#000000\",\n-          }}\n-        >\n-          {dayjs(date).format(\"M월\")}\n-        </button>\n-      </div>\n-  \n-      <button\n-        onClick={increaseMonth}\n-        disabled={nextMonthButtonDisabled}\n-        style={{\n-          background: \"none\",\n-          border: \"none\",\n-          fontSize: \"18px\",\n-          cursor: \"pointer\",\n-          color: \"#000000\",\n-        }}\n-      >\n-        {\">\"}\n-      </button>\n-    </div>\n-  );\n-  \n-  \n-\n-  const renderYearPicker = () => {\n-    const currentYear = dayjs().year();\n-    const years = Array.from({ length: 20 }, (_, i) => currentYear - 10 + i);\n-    return (\n-      <PickerBox>\n-        <div className=\"picker-body\">\n-          {years.map((year) => (\n-            <button key={year} onClick={() => setTempYear(year)}>{year}년</button>\n-          ))}\n-        </div>\n-        <div className=\"picker-actions\">\n-          <button onClick={handleYearConfirm}>확인</button>\n-          <button onClick={() => setShowYearPicker(false)}>취소</button>\n-        </div>\n-      </PickerBox>\n-    );\n-  };\n-\n-  const renderMonthPicker = () => (\n-    <PickerBox>\n-      <div className=\"picker-body\">\n-        {Array.from({ length: 12 }, (_, i) => (\n-          <button key={i} onClick={() => setTempMonth(i)}>{i + 1}월</button>\n-        ))}\n-      </div>\n-      <div className=\"picker-actions\">\n-        <button onClick={handleMonthConfirm}>확인</button>\n-        <button onClick={() => setShowMonthPicker(false)}>취소</button>\n-      </div>\n-    </PickerBox>\n-  );\n-\n-  return (\n-    <DateContainer $themeMode={themeMode} $isMobile={isMobile}>\n-      <DateBox ref={dateBoxRef} onClick={handleDateBoxClick} $themeMode={themeMode} $isMobile={isMobile}>\n-        {fromDate} ~ {toDate}\n-        <img src=\"/icon_burger.png\" alt=\"달력\" width=\"10\" height=\"16\" style={{ transform: \"rotate(270deg)\" }} />\n-      </DateBox>\n-      {showDatePicker && (\n-        <DatePickerWrapper ref={datePickerRef} $themeMode={themeMode} $isMobile={isMobile}>\n-          <div className={isMobile ? 'mobile-panel' : undefined}>\n-            {isMobile && (\n-              <MobilePanelHeader>\n-                <span>기간 선택</span>\n-                <CloseButton type=\"button\" onClick={() => setShowDatePicker(false)}>닫기</CloseButton>\n-              </MobilePanelHeader>\n-            )}\n-            {showYearPicker ? renderYearPicker()\n-              : showMonthPicker ? renderMonthPicker()\n-              : (\n-                <StyledDatePicker\n-                  key={calendarKey}\n-                  selected={isSelectingFromDate ? dayjs(fromDate).toDate() : dayjs(toDate).toDate()}\n-                  onChange={handleDateChange}\n-                  dateFormat=\"yyyy-MM-dd\"\n-                  inline\n-                  renderCustomHeader={renderCustomHeader}\n-                  startDate={dayjs(fromDate).toDate()}\n-                  endDate={dayjs(toDate).toDate()}\n-                  openToDate={calendarDate}\n-                  locale={ko}\n-                />\n-              )}\n-          </div>\n-        </DatePickerWrapper>\n-      )}\n-      <RangeButtonGroup $themeMode={themeMode} $isMobile={isMobile}>\n-        {([\"금월\", \"지난달\", \"1년\", \"지정\"] as RangeType[]).map((range) => (\n-          <RangeButton\n-            key={range}\n-            selected={selectedRange === range}\n-            onClick={() => handleRangeClick(range)}\n-            $themeMode={themeMode}\n-            $isMobile={isMobile}\n-          >\n-            {range}\n-          </RangeButton>\n-        ))}\n-      </RangeButtonGroup>\n-    </DateContainer>\n-  );\n-};\n-\n-export default GenericDateRangePicker;\n-\n-// 추가 스타일\n-const PickerBox = styled.div`\n-  width: 252px; /* ✅ DatePicker 기본 너비에 맞춤 */\n-  background: white;\n-  padding: 8px;\n-  border-radius: 6px;\n-  border: 1px solid #ccc;\n-\n-  .picker-body {\n-    display: grid;\n-    grid-template-columns: repeat(3, 1fr); /* ✅ 3열 */\n-    gap: 8px;\n-    margin-bottom: 8px;\n-  }\n-\n-  .picker-body button {\n-  width: 100%;\n-  padding: 8px 0;\n-  background: #f0f0f0;\n-  border: none;\n-  border-radius: 4px;\n-  text-align: center;\n-  color: #000;\n-  cursor: pointer;\n-  font-size: 14px;\n-\n-  &:hover {\n-    background: #d0d0d0;\n-  }\n-}\n-\n-\n-  .picker-actions {\n-  display: flex;\n-  justify-content: flex-end;\n-  gap: 12px;\n-}\n-\n-.picker-actions button {\n-  background: none;\n-  border: none;\n-  padding: 0;\n-  font-size: 14px;\n-  color: #000000;\n-  cursor: pointer;\n-}\n-\n-`;\n-\n-\n-\n-// --- Styled Components (Keep as they were in the original DateRangePicker) ---\n-const DateContainer = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-  position: relative;\n-  flex-direction: ${({ $isMobile }) => ($isMobile ? 'column' : 'row')};\n-  align-items: ${({ $isMobile }) => ($isMobile ? 'stretch' : 'center')};\n-`;\n-\n-const DateBox = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n-  padding: ${({ $isMobile }) => ($isMobile ? '14px 16px' : '11px 14px')};\n-  background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" : THEME_COLORS.dark.inputBackground)};\n-  color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"black\" : THEME_COLORS.dark.inputText)};\n-  font-weight: 500;\n-  border-radius: ${({ $isMobile }) => ($isMobile ? '8px' : '0px')};\n-  border: 1px solid\n-    ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" : THEME_COLORS.dark.borderColor)};\n-  font-size: ${({ $isMobile }) => ($isMobile ? '16px' : '14px')};\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-  cursor: pointer;\n-  white-space: nowrap;\n-  justify-content: space-between;\n-`;\n-\n-const RangeButtonGroup = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n-  display: flex;\n-  gap: ${({ $isMobile }) => ($isMobile ? '8px' : '0')};\n-  overflow-x: ${({ $isMobile }) => ($isMobile ? 'auto' : 'visible')};\n-  padding: ${({ $isMobile }) => ($isMobile ? '4px 2px' : '0')};\n-`;\n-\n-const RangeButton = styled.button<{ selected: boolean; $themeMode: ThemeMode; $isMobile: boolean }>`\n-  width: ${({ $isMobile }) => ($isMobile ? 'auto' : '60px')};\n-  padding: ${({ $isMobile }) => ($isMobile ? '10px 14px' : '12px 12px')};\n-  margin: 0;\n-  background-color: ${({ selected, $themeMode }) =>\n-    selected\n-      ? $themeMode === \"light\"\n-        ? \"#202055\"\n-        : THEME_COLORS.dark.primary\n-      : $themeMode === \"light\"\n-      ? \"#E0E0E0\"\n-      : \"#707281\"};\n-  color: ${({ selected, $themeMode }) =>\n-    selected\n-      ? $themeMode === \"light\"\n-        ? THEME_COLORS.light.buttonText\n-        : THEME_COLORS.dark.buttonText\n-      : $themeMode === \"light\"\n-      ? THEME_COLORS.light.text\n-      : \"#8c8e96\"};\n-  border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n-  border-left: none;\n-  border-radius: ${({ $isMobile }) => ($isMobile ? '9999px' : '0px')};\n-  cursor: pointer;\n-  font-weight: 500;\n-  white-space: nowrap;\n-\n-  &:first-child {\n-    border-left: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n-  }\n-`;\n-\n-const DatePickerWrapper = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n-  position: ${({ $isMobile }) => ($isMobile ? 'fixed' : 'absolute')};\n-  top: ${({ $isMobile }) => ($isMobile ? '0' : '100%')};\n-  left: 0;\n-  right: ${({ $isMobile }) => ($isMobile ? '0' : 'auto')};\n-  bottom: ${({ $isMobile }) => ($isMobile ? '0' : 'auto')};\n-  margin-top: ${({ $isMobile }) => ($isMobile ? '0' : '8px')};\n-  z-index: 1000;\n-  display: ${({ $isMobile }) => ($isMobile ? 'flex' : 'block')};\n-  align-items: ${({ $isMobile }) => ($isMobile ? 'center' : 'initial')};\n-  justify-content: ${({ $isMobile }) => ($isMobile ? 'center' : 'initial')};\n-  padding: ${({ $isMobile }) => ($isMobile ? '16px' : '0')};\n-  background: ${({ $isMobile }) => ($isMobile ? 'rgba(0,0,0,0.4)' : 'transparent')};\n-\n-  .custom-calendar {\n-    background-color: ${({ $themeMode }) =>\n-      $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.inputBackground};\n-    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n-    border: 1px solid\n-      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n-    border-radius: 4px;\n-    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n-  }\n-\n-  .react-datepicker__day-name,\n-  .react-datepicker__day,\n-  .react-datepicker__time-name {\n-    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n-    width: 2em;\n-    line-height: 2em;\n-  }\n-\n-  .react-datepicker__day--selected,\n-  .react-datepicker__day--keyboard-selected {\n-    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n-    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n-    border-radius: 50%;\n-  }\n-\n-  .react-datepicker__day--in-selecting-range {\n-    background-color: transparent;\n-    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n-    border-radius: 0;\n-  }\n-\n-  .react-datepicker__day--in-range {\n-    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#e0e0e0\" : \"#424451\")};\n-    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n-    border-radius: 0;\n-  }\n-\n-  .react-datepicker__day--range-start.react-datepicker__day--range-end,\n-  .react-datepicker__day--selected.react-datepicker__day--in-selecting-range {\n-    border-radius: 50%;\n-    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n-    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n-  }\n-\n-  .react-datepicker__day--range-start,\n-  .react-datepicker__day--range-end {\n-    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n-    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n-    border-radius: 50%;\n-  }\n-\n-  .react-datepicker__day:hover {\n-    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#d0d0d0\" : \"#555555\")};\n-    border-radius: 50%;\n-  }\n-\n-  .react-datepicker__day--today {\n-    font-weight: bold;\n-    border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.accent : \"#888888\")};\n-    border-radius: 50%;\n-  }\n-\n-  .react-datepicker__day--outside-month {\n-    color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#AAAAAA\" : \"#666666\")};\n-  }\n-\n-  .react-datepicker__header {\n-    background-color: ${({ $themeMode }) =>\n-      $themeMode === \"light\" ? \"#F0F0F0\" : THEME_COLORS.dark.tableHeaderBackground};\n-    border-bottom: 1px solid\n-      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n-  }\n-\n-  .react-datepicker__current-month,\n-  .react-datepicker__day-name {\n-    color: ${({ $themeMode }) =>\n-      $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.tableHeaderText};\n-  }\n-\n-  .react-datepicker__navigation-icon::before {\n-    border-color: ${({ $themeMode }) =>\n-      $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText};\n-  }\n-\n-  .mobile-panel {\n-    width: 100%;\n-    max-width: 360px;\n-    border-radius: 12px;\n-    overflow: hidden;\n-    background: ${({ $themeMode }) =>\n-      $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.inputBackground};\n-    border: 1px solid\n-      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n-  }\n-`;\n-\n-const MobilePanelHeader = styled.div`\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 10px 12px;\n-  font-weight: 600;\n-`;\n-\n-const CloseButton = styled.button`\n-  background: none;\n-  border: none;\n-  font-size: 14px;\n-  color: #333;\n-  cursor: pointer;\n-`;\n-\n-const StyledDatePicker = styled(DatePicker as any)``;\n"
                },
                {
                    "date": 1755145263501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -407,9 +407,9 @@\n `;\n \n const RangeButtonGroup = styled.div<{ $themeMode: ThemeMode; $isMobile: boolean }>`\n   display: flex;\n-  jus\n+  justify-content: end;\n   gap: ${({ $isMobile }) => ($isMobile ? '8px' : '0')};\n   overflow-x: ${({ $isMobile }) => ($isMobile ? 'auto' : 'visible')};\n   padding: ${({ $isMobile }) => ($isMobile ? '4px 2px' : '0')};\n `;\n"
                }
            ],
            "date": 1755144494048,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport dayjs from \"dayjs\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { THEME_COLORS, ThemeMode } from \"@/styles/theme_colors\";\nimport { ko } from \"date-fns/locale\";\n\ntype RangeType = \"금월\" | \"지난달\" | \"1년\" | \"지정\";\n\ninterface GenericDateRangePickerProps {\n  initialFromDate: string;\n  initialToDate: string;\n  onDateChange: (fromDate: string, toDate: string) => void;\n  initialSelectedRange?: RangeType;\n  themeMode?: ThemeMode;\n}\n\nconst GenericDateRangePicker: React.FC<GenericDateRangePickerProps> = ({\n  initialFromDate,\n  initialToDate,\n  onDateChange,\n  initialSelectedRange = \"금월\",\n  themeMode = \"light\",\n}) => {\n  const [fromDate, setFromDate] = useState(initialFromDate);\n  const [toDate, setToDate] = useState(initialToDate);\n  const [selectedRange, setSelectedRange] = useState<RangeType>(initialSelectedRange);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [isSelectingFromDate, setIsSelectingFromDate] = useState(true);\n  const [calendarDate, setCalendarDate] = useState(dayjs().toDate());\n  const [calendarKey, setCalendarKey] = useState(0);\n  const [showYearPicker, setShowYearPicker] = useState(false);\n  const [showMonthPicker, setShowMonthPicker] = useState(false);\n  const [tempYear, setTempYear] = useState<number | null>(null);\n  const [tempMonth, setTempMonth] = useState<number | null>(null);\n  const datePickerRef = useRef<HTMLDivElement>(null);\n  const dateBoxRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setFromDate(initialFromDate);\n    setToDate(initialToDate);\n  }, [initialFromDate, initialToDate]);\n\n  const handleClickOutside = useCallback((event: MouseEvent) => {\n    if (\n      datePickerRef.current &&\n      !datePickerRef.current.contains(event.target as Node) &&\n      dateBoxRef.current &&\n      !dateBoxRef.current.contains(event.target as Node)\n    ) {\n      setShowDatePicker(false);\n      setShowYearPicker(false);\n      setShowMonthPicker(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [handleClickOutside]);\n\n  const handleRangeClick = (range: RangeType) => {\n    const today = dayjs();\n\n    if (range === \"지정\") {\n      setSelectedRange(\"지정\");\n      setShowDatePicker(true);\n      setIsSelectingFromDate(true);\n      return;\n    }\n\n    if (range === \"금월\") {\n      const from = today.startOf(\"month\");\n      const newFromDate = from.format(\"YYYY-MM-DD\");\n      const newToDate = today.format(\"YYYY-MM-DD\");\n\n      setFromDate(newFromDate);\n      setToDate(newToDate);\n      setSelectedRange(range);\n      onDateChange(newFromDate, newToDate);\n      return;\n    }\n\n    if (range === \"지난달\") {\n      const from = today.subtract(1, \"month\").startOf(\"month\");\n      const to = today.subtract(1, \"month\").endOf(\"month\");\n      const newFromDate = from.format(\"YYYY-MM-DD\");\n      const newToDate = to.format(\"YYYY-MM-DD\");\n\n      setFromDate(newFromDate);\n      setToDate(newToDate);\n      setSelectedRange(range);\n      onDateChange(newFromDate, newToDate);\n      return;\n    }\n\n    if (range === \"1년\") {\n      const from = today.subtract(1, \"year\");\n      const newFromDate = from.format(\"YYYY-MM-DD\");\n      const newToDate = today.format(\"YYYY-MM-DD\");\n\n      setFromDate(newFromDate);\n      setToDate(newToDate);\n      setSelectedRange(range);\n      onDateChange(newFromDate, newToDate);\n      return;\n    }\n  };\n\n  const handleDateBoxClick = () => {\n    setShowDatePicker((prev) => {\n      const willShow = !prev;\n      if (willShow) {\n        setIsSelectingFromDate(true);\n        setShowYearPicker(false);    // 추가\n        setShowMonthPicker(false);   // 추가\n      }\n      return willShow;\n    });\n  };\n  \n\n  const handleDateChange = (date: Date) => {\n    const formatted = dayjs(date).format(\"YYYY-MM-DD\");\n\n    if (isSelectingFromDate) {\n      setFromDate(formatted);\n      setIsSelectingFromDate(false);\n    } else {\n      if (dayjs(formatted).isBefore(dayjs(fromDate))) {\n        setFromDate(formatted);\n        setToDate(fromDate);\n        onDateChange(formatted, fromDate);\n      } else {\n        setToDate(formatted);\n        onDateChange(fromDate, formatted);\n      }\n      setShowDatePicker(false);\n    }\n  };\n\n  const handleYearConfirm = () => {\n    if (tempYear !== null) {\n      const updated = dayjs(calendarDate).year(tempYear).toDate();\n      setCalendarDate(updated);\n      setCalendarKey((prev) => prev + 1);\n      setShowYearPicker(false);\n    }\n  };\n\n  const handleMonthConfirm = () => {\n    if (tempMonth !== null) {\n      const updated = dayjs(calendarDate).month(tempMonth).toDate();\n      setCalendarDate(updated);\n      setCalendarKey((prev) => prev + 1);\n      setShowMonthPicker(false);\n    }\n  };\n\n  const renderCustomHeader = ({\n    date,\n    decreaseMonth,\n    increaseMonth,\n    prevMonthButtonDisabled,\n    nextMonthButtonDisabled,\n  }: {\n    date: Date;\n    decreaseMonth: () => void;\n    increaseMonth: () => void;\n    prevMonthButtonDisabled: boolean;\n    nextMonthButtonDisabled: boolean;\n  }) => (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        padding: \"8px\",\n      }}\n    >\n      <button\n        onClick={decreaseMonth}\n        disabled={prevMonthButtonDisabled}\n        style={{\n          background: \"none\",\n          border: \"none\",\n          fontSize: \"18px\",\n          cursor: \"pointer\",\n          color: \"#000000\",\n        }}\n      >\n        {\"<\"}\n      </button>\n  \n      <div style={{ display: \"flex\", gap: \"12px\", alignItems: \"center\" }}>\n        <button\n          onClick={() => setShowYearPicker(true)}\n          style={{\n            background: \"none\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\",\n            color: \"#000000\",\n          }}\n        >\n          {dayjs(date).format(\"YYYY년\")}\n        </button>\n        <button\n          onClick={() => setShowMonthPicker(true)}\n          style={{\n            background: \"none\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\",\n            color: \"#000000\",\n          }}\n        >\n          {dayjs(date).format(\"M월\")}\n        </button>\n      </div>\n  \n      <button\n        onClick={increaseMonth}\n        disabled={nextMonthButtonDisabled}\n        style={{\n          background: \"none\",\n          border: \"none\",\n          fontSize: \"18px\",\n          cursor: \"pointer\",\n          color: \"#000000\",\n        }}\n      >\n        {\">\"}\n      </button>\n    </div>\n  );\n  \n  \n\n  const renderYearPicker = () => {\n    const currentYear = dayjs().year();\n    const years = Array.from({ length: 20 }, (_, i) => currentYear - 10 + i);\n    return (\n      <PickerBox>\n        <div className=\"picker-body\">\n          {years.map((year) => (\n            <button key={year} onClick={() => setTempYear(year)}>{year}년</button>\n          ))}\n        </div>\n        <div className=\"picker-actions\">\n          <button onClick={handleYearConfirm}>확인</button>\n          <button onClick={() => setShowYearPicker(false)}>취소</button>\n        </div>\n      </PickerBox>\n    );\n  };\n\n  const renderMonthPicker = () => (\n    <PickerBox>\n      <div className=\"picker-body\">\n        {Array.from({ length: 12 }, (_, i) => (\n          <button key={i} onClick={() => setTempMonth(i)}>{i + 1}월</button>\n        ))}\n      </div>\n      <div className=\"picker-actions\">\n        <button onClick={handleMonthConfirm}>확인</button>\n        <button onClick={() => setShowMonthPicker(false)}>취소</button>\n      </div>\n    </PickerBox>\n  );\n\n  return (\n    <DateContainer $themeMode={themeMode}>\n      <DateBox ref={dateBoxRef} onClick={handleDateBoxClick} $themeMode={themeMode}>\n        {fromDate} ~ {toDate}\n        <img src=\"/icon_burger.png\" alt=\"달력\" width=\"10\" height=\"16\" style={{ transform: \"rotate(270deg)\" }} />\n      </DateBox>\n      {showDatePicker && (\n        <DatePickerWrapper ref={datePickerRef} $themeMode={themeMode}>\n          {showYearPicker ? renderYearPicker()\n            : showMonthPicker ? renderMonthPicker()\n            : (\n<StyledDatePicker\n  key={calendarKey}\n  selected={isSelectingFromDate ? dayjs(fromDate).toDate() : dayjs(toDate).toDate()}\n  onChange={handleDateChange}\n  dateFormat=\"yyyy-MM-dd\"\n  inline\n  renderCustomHeader={renderCustomHeader}\n  startDate={dayjs(fromDate).toDate()}\n  endDate={dayjs(toDate).toDate()}\n  openToDate={calendarDate}\n  locale={ko} // ✅ 요일 한글화\n/>\n\n            )}\n        </DatePickerWrapper>\n      )}\n      <RangeButtonGroup $themeMode={themeMode}>\n        {([\"금월\", \"지난달\", \"1년\", \"지정\"] as RangeType[]).map((range) => (\n          <RangeButton\n            key={range}\n            selected={selectedRange === range}\n            onClick={() => handleRangeClick(range)}\n            $themeMode={themeMode}\n          >\n            {range}\n          </RangeButton>\n        ))}\n      </RangeButtonGroup>\n    </DateContainer>\n  );\n};\n\nexport default GenericDateRangePicker;\n\n// 추가 스타일\nconst PickerBox = styled.div`\n  width: 252px; /* ✅ DatePicker 기본 너비에 맞춤 */\n  background: white;\n  padding: 8px;\n  border-radius: 6px;\n  border: 1px solid #ccc;\n\n  .picker-body {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr); /* ✅ 3열 */\n    gap: 8px;\n    margin-bottom: 8px;\n  }\n\n  .picker-body button {\n  width: 100%;\n  padding: 8px 0;\n  background: #f0f0f0;\n  border: none;\n  border-radius: 4px;\n  text-align: center;\n  color: #000;\n  cursor: pointer;\n  font-size: 14px;\n\n  &:hover {\n    background: #d0d0d0;\n  }\n}\n\n\n  .picker-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n}\n\n.picker-actions button {\n  background: none;\n  border: none;\n  padding: 0;\n  font-size: 14px;\n  color: #000000;\n  cursor: pointer;\n}\n\n`;\n\n\n\n// --- Styled Components (Keep as they were in the original DateRangePicker) ---\nconst DateContainer = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  position: relative;\n`;\n\nconst DateBox = styled.div<{ $themeMode: ThemeMode }>`\n  padding: 11px 14px;\n  background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" : THEME_COLORS.dark.inputBackground)};\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"black\" : THEME_COLORS.dark.inputText)};\n  font-weight: 500;\n  border-radius: 0px;\n  border: 1px solid\n    ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" /* 배경색과 동일하게 */ : THEME_COLORS.dark.borderColor)};\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  cursor: pointer;\n  white-space: nowrap;\n`;\n\nconst RangeButtonGroup = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n`;\n\nconst RangeButton = styled.button<{ selected: boolean; $themeMode: ThemeMode }>`\n  width: 60px;\n  padding: 12px 12px;\n  margin: 0;\n  background-color: ${({ selected, $themeMode }) =>\n    selected\n      ? $themeMode === \"light\"\n        ? THEME_COLORS.light.primary\n        : THEME_COLORS.dark.primary\n      : $themeMode === \"light\"\n      ? \"#E0E0E0\"\n      : \"#707281\"};\n  color: ${({ selected, $themeMode }) =>\n    selected\n      ? $themeMode === \"light\"\n        ? THEME_COLORS.light.buttonText\n        : THEME_COLORS.dark.buttonText\n      : $themeMode === \"light\"\n      ? THEME_COLORS.light.text\n      : \"#8c8e96\"};\n  border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n  border-left: none;\n  border-radius: 0px;\n  cursor: pointer;\n  font-weight: 500;\n  white-space: nowrap;\n\n  &:first-child {\n    border-left: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E6E7E9\" : THEME_COLORS.dark.borderColor)};\n  }\n`;\n\nconst DatePickerWrapper = styled.div<{ $themeMode: ThemeMode }>`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  margin-top: 8px;\n  z-index: 1000;\n\n  .custom-calendar {\n    background-color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.inputBackground};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n    border: 1px solid\n      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n    border-radius: 4px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  .react-datepicker__day-name,\n  .react-datepicker__day,\n  .react-datepicker__time-name {\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n    width: 2em;\n    line-height: 2em;\n  }\n\n  .react-datepicker__day--selected,\n  .react-datepicker__day--keyboard-selected {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n    border-radius: 50%;\n  }\n\n  .react-datepicker__day--in-selecting-range {\n    background-color: transparent;\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n    border-radius: 0;\n  }\n\n  .react-datepicker__day--in-range {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#e0e0e0\" : \"#424451\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n    border-radius: 0;\n  }\n\n  .react-datepicker__day--range-start.react-datepicker__day--range-end,\n  .react-datepicker__day--selected.react-datepicker__day--in-selecting-range {\n    border-radius: 50%;\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n  }\n\n  .react-datepicker__day--range-start,\n  .react-datepicker__day--range-end {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n    border-radius: 50%;\n  }\n\n  .react-datepicker__day:hover {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#d0d0d0\" : \"#555555\")};\n    border-radius: 50%;\n  }\n\n  .react-datepicker__day--today {\n    font-weight: bold;\n    border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.accent : \"#888888\")};\n    border-radius: 50%;\n  }\n\n  .react-datepicker__day--outside-month {\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#AAAAAA\" : \"#666666\")};\n  }\n\n  .react-datepicker__header {\n    background-color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? \"#F0F0F0\" : THEME_COLORS.dark.tableHeaderBackground};\n    border-bottom: 1px solid\n      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n  }\n\n  .react-datepicker__current-month,\n  .react-datepicker__day-name {\n    color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.tableHeaderText};\n  }\n\n  .react-datepicker__navigation-icon::before {\n    border-color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText};\n  }\n`;\n\nconst StyledDatePicker = styled(DatePicker as any)``;\n"
        }
    ]
}