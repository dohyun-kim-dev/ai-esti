{
    "sourceFile": "src/store/chatStore.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1755480379010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755480386221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n interface ChatState {\n   messages: ChatMessage[]\n   addMessage: (m: ChatMessage) => void\n   clear: () => void\n-  updateLastMessage: (newContent) => set((state) => {\n+  updateLastMessage: (newContent: string) => set((state) => {\n     const lastMessage = state.messages[state.messages.length - 1];\n     if (lastMessage) {\n       return {\n         messages: [\n"
                },
                {
                    "date": 1755480391352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,20 @@\n     (set) => ({\n       messages: [],\n       addMessage: (m) => set((s) => ({ messages: [...s.messages, m] })),\n       clear: () => set({ messages: [] }),\n+      updateLastMessage: (newContent: string) => set((state) => {\n+        const lastMessage = state.messages[state.messages.length - 1];\n+        if (lastMessage) {\n+          return {\n+            messages: [\n+              ...state.messages.slice(0, -1),\n+              { ...lastMessage, content: newContent, isLoading: false }\n+            ]\n+          };\n+        }\n+        return state;\n+      }),\n     }),\n     {\n       name: 'ai-chat-storage',\n       storage: createJSONStorage(() => sessionStorage),\n"
                },
                {
                    "date": 1755480397909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,40 +6,17 @@\n interface ChatState {\n   messages: ChatMessage[]\n   addMessage: (m: ChatMessage) => void\n   clear: () => void\n-  updateLastMessage: (newContent: string) => set((state) => {\n-    const lastMessage = state.messages[state.messages.length - 1];\n-    if (lastMessage) {\n-      return {\n-        messages: [\n-          ...state.messages.slice(0, -1),\n-          { ...lastMessage, content: newContent, isLoading: false }\n-        ]\n-      };\n-    }\n-    return state;\n-  }),\n+  \n }\n \n export const useChatStore = create<ChatState>()(\n   persist(\n     (set) => ({\n       messages: [],\n       addMessage: (m) => set((s) => ({ messages: [...s.messages, m] })),\n       clear: () => set({ messages: [] }),\n-      updateLastMessage: (newContent: string) => set((state) => {\n-        const lastMessage = state.messages[state.messages.length - 1];\n-        if (lastMessage) {\n-          return {\n-            messages: [\n-              ...state.messages.slice(0, -1),\n-              { ...lastMessage, content: newContent, isLoading: false }\n-            ]\n-          };\n-        }\n-        return state;\n-      }),\n     }),\n     {\n       name: 'ai-chat-storage',\n       storage: createJSONStorage(() => sessionStorage),\n"
                },
                {
                    "date": 1755480437754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,5 +21,17 @@\n       name: 'ai-chat-storage',\n       storage: createJSONStorage(() => sessionStorage),\n     }\n   ),\n- \n\\ No newline at end of file\n+  updateLastMessage: (newContent) => set((state) => {\n+    const lastMessage = state.messages[state.messages.length - 1];\n+    if (lastMessage) {\n+      return {\n+        messages: [\n+          ...state.messages.slice(0, -1),\n+          { ...lastMessage, content: newContent, isLoading: false }\n+        ]\n+      };\n+    }\n+    return state;\n+  }),\n+)\n"
                }
            ],
            "date": 1755480379010,
            "name": "Commit-0",
            "content": "import { create } from 'zustand'\nimport { persist, createJSONStorage } from 'zustand/middleware'\n\nexport type ChatMessage = { role: 'user' | 'ai'; content: string }\n\ninterface ChatState {\n  messages: ChatMessage[]\n  addMessage: (m: ChatMessage) => void\n  clear: () => void\n  updateLastMessage: (newContent) => set((state) => {\n    const lastMessage = state.messages[state.messages.length - 1];\n    if (lastMessage) {\n      return {\n        messages: [\n          ...state.messages.slice(0, -1),\n          { ...lastMessage, content: newContent, isLoading: false }\n        ]\n      };\n    }\n    return state;\n  }),\n}\n\nexport const useChatStore = create<ChatState>()(\n  persist(\n    (set) => ({\n      messages: [],\n      addMessage: (m) => set((s) => ({ messages: [...s.messages, m] })),\n      clear: () => set({ messages: [] }),\n    }),\n    {\n      name: 'ai-chat-storage',\n      storage: createJSONStorage(() => sessionStorage),\n    }\n  )\n)\n"
        }
    ]
}