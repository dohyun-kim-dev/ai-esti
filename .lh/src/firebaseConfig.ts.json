{
    "sourceFile": "src/firebaseConfig.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1754641844435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754641907718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { getAuth } from 'firebase/auth'\n import { getFirestore } from 'firebase/firestore'\n import { getStorage } from 'firebase/storage'\n import { getVertexAI } from 'firebase/vertexai'\n-import { devLog } from '@/lib/utils/devLogger'\n+import { devLog } from '@/utils/devLogger'\n \n const firebaseConfig: FirebaseOptions = {\n   apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n   authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n"
                },
                {
                    "date": 1754645302703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { initializeApp, getApps, getApp, FirebaseOptions } from 'firebase/app'\n import { getAuth } from 'firebase/auth'\n import { getFirestore } from 'firebase/firestore'\n import { getStorage } from 'firebase/storage'\n-import { getVertexAI } from 'firebase/vertexai'\n+import { getVertexAI } from 'firebase/ai'\n import { devLog } from '@/utils/devLogger'\n \n const firebaseConfig: FirebaseOptions = {\n   apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n"
                },
                {
                    "date": 1754877427683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { initializeApp, getApps, getApp, FirebaseOptions } from 'firebase/app'\n import { getAuth } from 'firebase/auth'\n import { getFirestore } from 'firebase/firestore'\n import { getStorage } from 'firebase/storage'\n-import { getVertexAI } from 'firebase/ai'\n+import { getAI } from 'firebase/ai'\n import { devLog } from '@/utils/devLogger'\n \n const firebaseConfig: FirebaseOptions = {\n   apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n@@ -30,7 +30,7 @@\n \n const auth = getAuth(app)\n const db = app ? getFirestore(app) : null\n const storage = app ? getStorage(app) : null\n-const vertexAI = app ? getVertexAI(app) : null\n+const ai = app ? getAI(app) : null\n \n-export { app, auth, db, storage, vertexAI }\n+export { app, auth, db, storage, ai }\n"
                }
            ],
            "date": 1754641844435,
            "name": "Commit-0",
            "content": "import { initializeApp, getApps, getApp, FirebaseOptions } from 'firebase/app'\nimport { getAuth } from 'firebase/auth'\nimport { getFirestore } from 'firebase/firestore'\nimport { getStorage } from 'firebase/storage'\nimport { getVertexAI } from 'firebase/vertexai'\nimport { devLog } from '@/lib/utils/devLogger'\n\nconst firebaseConfig: FirebaseOptions = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n}\n\nlet app\ndevLog('>>>> Firebase Config: Attempting initialization...')\nif (!getApps().length) {\n  try {\n    app = initializeApp(firebaseConfig)\n    devLog('>>>> Firebase Config: Initialized successfully:', app.name)\n  } catch (error) {\n    console.error('>>>> Firebase Config: Error during initializeApp:', error)\n  }\n} else {\n  app = getApp()\n  devLog('>>>> Firebase Config: App already exists, getting app:', app.name)\n}\n\nconst auth = getAuth(app)\nconst db = app ? getFirestore(app) : null\nconst storage = app ? getStorage(app) : null\nconst vertexAI = app ? getVertexAI(app) : null\n\nexport { app, auth, db, storage, vertexAI }\n"
        }
    ]
}